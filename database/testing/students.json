[
    {"user_input": "Find students who scored above 95 in Mathematics.", "sql_query": "SELECT * FROM students WHERE math_score > 95;"},
    {"user_input": "Find students who scored above 85 in Mathematics.", "sql_query": "SELECT * FROM students WHERE math_score > 85;"},
    {"user_input": "Find students who scored exactly 60 in Mathematics.", "sql_query": "SELECT * FROM students WHERE math_score = 60;"},
    {"user_input": "Find students who scored between 60 and 80 in Mathematics.", "sql_query": "SELECT * FROM students WHERE math_score BETWEEN 60 AND 80;"},
    {"user_input": "Find students who scored less than 50 in Mathematics.", "sql_query": "SELECT * FROM students WHERE math_score < 50;"},
    {"user_input": "List students with Science scores above 80.", "sql_query": "SELECT * FROM students WHERE science_score > 80;"},
    {"user_input": "Find students who have both Science and Mathematics scores above 75.", "sql_query": "SELECT * FROM students WHERE science_score > 75 AND math_score > 75;"},
    {"user_input": "Find students who have scored below 40 in any subject.", "sql_query": "SELECT * FROM students WHERE math_score < 40 OR science_score < 40 OR english_score < 40;"},
    {"user_input": "Select students whose roll numbers are greater than 30.", "sql_query": "SELECT * FROM students WHERE roll_number > 30;"},
    {"user_input": "Find students whose roll numbers are between 25 and 50.", "sql_query": "SELECT * FROM students WHERE roll_number BETWEEN 25 AND 50;"},
    {"user_input": "Find students whose roll numbers are exactly 42.", "sql_query": "SELECT * FROM students WHERE roll_number = 42;"},
    {"user_input": "Find students who have attendance above 90%.", "sql_query": "SELECT * FROM students WHERE attendance_percentage > 90;"},
    {"user_input": "Fetch students who have attendance between 60% and 80%.", "sql_query": "SELECT * FROM students WHERE attendance_percentage BETWEEN 60 AND 80;"},
    {"user_input": "Find students who have been absent for more than 5 days.", "sql_query": "SELECT * FROM students WHERE days_absent > 5;"},
    {"user_input": "Select students who have been absent between 3 and 7 days.", "sql_query": "SELECT * FROM students WHERE days_absent BETWEEN 3 AND 7;"},
    {"user_input": "Find students who have not been absent at all.", "sql_query": "SELECT * FROM students WHERE days_absent = 0;"},
    {"user_input": "Find students who have at least one extracurricular activity.", "sql_query": "SELECT * FROM students WHERE extracurricular_activities > 0;"},
    {"user_input": "Find students who have participated in exactly 3 extracurricular activities.", "sql_query": "SELECT * FROM students WHERE extracurricular_activities = 3;"},
    {"user_input": "Show students who have participated in more than 5 extracurricular activities.", "sql_query": "SELECT * FROM students WHERE extracurricular_activities > 5;"},
    {"user_input": "Find students who have pending assignments.", "sql_query": "SELECT * FROM students WHERE pending_assignments > 0;"},
    {"user_input": "Extract students who have no pending assignments.", "sql_query": "SELECT * FROM students WHERE pending_assignments = 0;"},
    {"user_input": "Select students who have cleared all their dues.", "sql_query": "SELECT * FROM students WHERE fees_due = 0;"},
    {"user_input": "Find students who have partially paid their fees.", "sql_query": "SELECT * FROM students WHERE fees_due > 0 AND fees_due < total_fees;"},
    {"user_input": "Find students who have not paid any fees yet.", "sql_query": "SELECT * FROM students WHERE fees_due = total_fees;"},
    {"user_input": "Fetch students who have an average score above 85.", "sql_query": "SELECT * FROM students WHERE (math_score + science_score + english_score) / 3 > 85;"},
    {"user_input": "Find students who have an average score below 50.", "sql_query": "SELECT * FROM students WHERE (math_score + science_score + english_score) / 3 < 50;"},
    {"user_input": "Find students who are in grade 10.", "sql_query": "SELECT * FROM students WHERE grade = 10;"},
    {"user_input": "Find students who are in grade 12.", "sql_query": "SELECT * FROM students WHERE grade = 12;"},
    {"user_input": "Fetch students whose names start with 'A'.", "sql_query": "SELECT * FROM students WHERE name LIKE 'A%';"},
    {"user_input": "Find students whose names end with 'n'.", "sql_query": "SELECT * FROM students WHERE name LIKE '%n';"},
    {"user_input": "Find students who have a 'z' in their names.", "sql_query": "SELECT * FROM students WHERE name LIKE '%z%';"},
    {"user_input": "Find students who were born after 2005.", "sql_query": "SELECT * FROM students WHERE birth_year > 2005;"},
    {"user_input": "Find students who were born in 2004 or 2005.", "sql_query": "SELECT * FROM students WHERE birth_year IN (2004, 2005);"},
    {"user_input": "Give students who were born between 2000 and 2003.", "sql_query": "SELECT * FROM students WHERE birth_year BETWEEN 2000 AND 2003;"},
    {"user_input": "Find students whose parents' contact numbers are missing.", "sql_query": "SELECT * FROM students WHERE parent_contact IS NULL;"},
    {"user_input": "Display students who have a registered parent contact number.", "sql_query": "SELECT * FROM students WHERE parent_contact IS NOT NULL;"},
    {"user_input": "Find students who have email addresses ending with '@gmail.com'.", "sql_query": "SELECT * FROM students WHERE email LIKE '%@gmail.com';"},
    {"user_input": "Find students who have email addresses with '.edu' domains.", "sql_query": "SELECT * FROM students WHERE email LIKE '%.edu';"},
    {"user_input": "Find students who have scored above 90 in English.", "sql_query": "SELECT * FROM students WHERE english_score > 90;"},
    {"user_input": "Find students who have scored more than 75 but less than 90 in English.", "sql_query": "SELECT * FROM students WHERE english_score BETWEEN 75 AND 90;"},
    {"user_input": "Find students who have failed in English (score below 40).", "sql_query": "SELECT * FROM students WHERE english_score < 40;"},
    {"user_input": "Show students whose Science score is between 50 and 70.", "sql_query": "SELECT * FROM students WHERE science_score BETWEEN 50 AND 70;"},
    {"user_input": "Find students whose Science score is either 60 or 70.", "sql_query": "SELECT * FROM students WHERE science_score IN (60, 70);"},
    {"user_input": "Find students whose Mathematics score is not 75.", "sql_query": "SELECT * FROM students WHERE math_score != 75;"},
    {"user_input": "Provide students who have completed all their homework.", "sql_query": "SELECT * FROM students WHERE homework_pending = 0;"},
    {"user_input": "Find students who have pending homework assignments.", "sql_query": "SELECT * FROM students WHERE homework_pending > 0;"},
    {"user_input": "Find students who have more than 2 library books issued.", "sql_query": "SELECT * FROM students WHERE library_books_issued > 2;"},
    {"user_input": "Select students who have not issued any library books.", "sql_query": "SELECT * FROM students WHERE library_books_issued = 0;"},
    {"user_input": "Find students who are members of the sports team.", "sql_query": "SELECT * FROM students WHERE is_sports_team_member = TRUE;"},
    {"user_input": "Find students who are not part of any sports team.", "sql_query": "SELECT * FROM students WHERE is_sports_team_member = FALSE;"},
    {"user_input": "Find students who have participated in science fairs.", "sql_query": "SELECT * FROM students WHERE participated_in_science_fair = TRUE;"},
    {"user_input": "Find students who have not participated in science fairs.", "sql_query": "SELECT * FROM students WHERE participated_in_science_fair = FALSE;"},
    {"user_input": "Find students who have taken music as an elective subject.", "sql_query": "SELECT * FROM students WHERE elective_subject = 'Music';"},
    {"user_input": "Get students who have taken computer science as an elective subject.", "sql_query": "SELECT * FROM students WHERE elective_subject = 'Computer Science';"},
    {"user_input": "Find students who have birthdays in January.", "sql_query": "SELECT * FROM students WHERE MONTH(birth_date) = 1;"},
    {"user_input": "Find students who were born in the year 2006.", "sql_query": "SELECT * FROM students WHERE birth_year = 2006;"},
    {"user_input": "Find students who were born in 2004 or 2005.", "sql_query": "SELECT * FROM students WHERE birth_year IN (2004, 2005);"},
    {"user_input": "Find students whose names have 'John' in them.", "sql_query": "SELECT * FROM students WHERE name LIKE '%John%';"},
    {"user_input": "Find students whose last names start with 'S'.", "sql_query": "SELECT * FROM students WHERE last_name LIKE 'S%';"},
    {"user_input": "Display students whose email ends with '@yahoo.com'.", "sql_query": "SELECT * FROM students WHERE email LIKE '%@yahoo.com';"},
    {"user_input": "Find students whose roll number is between 10 and 20.", "sql_query": "SELECT * FROM students WHERE roll_number BETWEEN 10 AND 20;"},
    {"user_input": "Find students whose roll number is an odd number.", "sql_query": "SELECT * FROM students WHERE MOD(roll_number, 2) = 1;"},
    {"user_input": "Provide students who are older than 18 years.", "sql_query": "SELECT * FROM students WHERE age > 18;"},
    {"user_input": "Find students who are exactly 15 years old.", "sql_query": "SELECT * FROM students WHERE age = 15;"},
    {"user_input": "Find students who belong to section 'A'.", "sql_query": "SELECT * FROM students WHERE section = 'A';"},
    {"user_input": "Find students who belong to section 'B' or 'C'.", "sql_query": "SELECT * FROM students WHERE section IN ('B', 'C');"},
    {"user_input": "Extract students who do not belong to section 'D'.", "sql_query": "SELECT * FROM students WHERE section != 'D';"},
    {"user_input": "Find students who have secured first rank in any subject.", "sql_query": "SELECT * FROM students WHERE rank = 1;"},
    {"user_input": "Identify students who have secured top 3 ranks in Science.", "sql_query": "SELECT * FROM students WHERE science_rank <= 3;"},
    {"user_input": "Find students who have registered for the upcoming exam.", "sql_query": "SELECT * FROM students WHERE exam_registered = TRUE;"},
    {"user_input": "Find students who have not yet registered for the exam.", "sql_query": "SELECT * FROM students WHERE exam_registered = FALSE;"},
    {"user_input": "Display students who live in New York.", "sql_query": "SELECT * FROM students WHERE city = 'New York';"},
    {"user_input": "Find students who live in either California or Texas.", "sql_query": "SELECT * FROM students WHERE city IN ('California', 'Texas');"},
    {"user_input": "Find students who have siblings in the same school.", "sql_query": "SELECT * FROM students WHERE has_sibling_in_school = TRUE;"},
    {"user_input": "Extract students who have medical conditions.", "sql_query": "SELECT * FROM students WHERE has_medical_condition = TRUE;"},
    {"user_input": "Find students who do not have any medical conditions.", "sql_query": "SELECT * FROM students WHERE has_medical_condition = FALSE;"},
    {"user_input": "Find students who have bus transportation.", "sql_query": "SELECT * FROM students WHERE uses_school_bus = TRUE;"},
    {"user_input": "Display students who walk to school.", "sql_query": "SELECT * FROM students WHERE uses_school_bus = FALSE;"},
    {"user_input": "Find the names of students who have scored more than 85 in Mathematics.", "sql_query": "SELECT name FROM students WHERE math_score > 85;"},
    {"user_input": "Find the names and roll numbers of students who have scored between 70 and 85 in Mathematics.", "sql_query": "SELECT name, roll_number FROM students WHERE math_score BETWEEN 70 AND 85;"},
    {"user_input": "Find students whose Mathematics score is exactly 75.", "sql_query": "SELECT * FROM students WHERE math_score = 75;"},
    {"user_input": "Provide students who have attended more than 90% of their classes.", "sql_query": "SELECT * FROM students WHERE attendance_percentage > 90;"},
    {"user_input": "Find students who have attended between 70% and 90% of their classes.", "sql_query": "SELECT * FROM students WHERE attendance_percentage BETWEEN 70 AND 90;"},
    {"user_input": "Find students who have attended exactly 100% of their classes.", "sql_query": "SELECT * FROM students WHERE attendance_percentage = 100;"},
    {"user_input": "Retrieve students who have pending tuition fees.", "sql_query": "SELECT * FROM students WHERE fees_pending > 0;"},
    {"user_input": "Find students who have paid all their tuition fees.", "sql_query": "SELECT * FROM students WHERE fees_pending = 0;"},
    {"user_input": "Find students who have pending fees less than 5000.", "sql_query": "SELECT * FROM students WHERE fees_pending < 5000;"},
    {"user_input": "Find students who have borrowed more than 3 library books.", "sql_query": "SELECT * FROM students WHERE library_books_issued > 3;"},
    {"user_input": "Find students who have borrowed between 1 and 3 library books.", "sql_query": "SELECT * FROM students WHERE library_books_issued BETWEEN 1 AND 3;"},
    {"user_input": "Show students who have not borrowed any library books.", "sql_query": "SELECT * FROM students WHERE library_books_issued = 0;"},
    {"user_input": "Find students whose first name starts with 'A'.", "sql_query": "SELECT * FROM students WHERE first_name LIKE 'A%';"},
    {"user_input": "Provide students whose last name contains 'Singh'.", "sql_query": "SELECT * FROM students WHERE last_name LIKE '%Singh%';"},
    {"user_input": "Find students whose email domain is '@gmail.com'.", "sql_query": "SELECT * FROM students WHERE email LIKE '%@gmail.com';"},
    {"user_input": "Find students whose email does not contain 'yahoo'.", "sql_query": "SELECT * FROM students WHERE email NOT LIKE '%yahoo%';"},
    {"user_input": "Give students who have scored the highest in Science.", "sql_query": "SELECT * FROM students ORDER BY science_score DESC LIMIT 1;"},
    {"user_input": "Find students who have the lowest score in English.", "sql_query": "SELECT * FROM students ORDER BY english_score ASC LIMIT 1;"},
    {"user_input": "Find students who are in grade 10 and have an average score above 80.", "sql_query": "SELECT * FROM students WHERE grade = 10 AND avg_score > 80;"},
    {"user_input": "Find students who are in grade 12 and have a Science score above 85.", "sql_query": "SELECT * FROM students WHERE grade = 12 AND science_score > 85;"},
    {"user_input": "Find students who have participated in more than 2 school events.", "sql_query": "SELECT * FROM students WHERE school_events_participated > 2;"},
    {"user_input": "Search students who have participated in at least 1 sports event.", "sql_query": "SELECT * FROM students WHERE sports_events_participated >= 1;"},
    {"user_input": "Find students who have never participated in any school events.", "sql_query": "SELECT * FROM students WHERE school_events_participated = 0;"},
    {"user_input": "Identify students whose parents' occupation is 'Doctor'.", "sql_query": "SELECT * FROM students WHERE parent_occupation = 'Doctor';"},
    {"user_input": "Extract students whose parents' occupation is 'Engineer' or 'Teacher'.", "sql_query": "SELECT * FROM students WHERE parent_occupation IN ('Engineer', 'Teacher');"},
    {"user_input": "Find students who have at least one sibling studying in the same school.", "sql_query": "SELECT * FROM students WHERE has_sibling_in_school = TRUE;"},
    {"user_input": "Find students who have no siblings studying in the same school.", "sql_query": "SELECT * FROM students WHERE has_sibling_in_school = FALSE;"},
    {"user_input": "Find students who are eligible for a scholarship.", "sql_query": "SELECT * FROM students WHERE is_scholarship_eligible = TRUE;"},
    {"user_input": "Retrieve students who are not eligible for a scholarship.", "sql_query": "SELECT * FROM students WHERE is_scholarship_eligible = FALSE;"},
    {"user_input": "Find students who live in a hostel.", "sql_query": "SELECT * FROM students WHERE lives_in_hostel = TRUE;"},
    {"user_input": "Find students who do not live in a hostel.", "sql_query": "SELECT * FROM students WHERE lives_in_hostel = FALSE;"},
    {"user_input": "Provide students who were born before the year 2005.", "sql_query": "SELECT * FROM students WHERE birth_year < 2005;"},
    {"user_input": "Find students who were born after the year 2010.", "sql_query": "SELECT * FROM students WHERE birth_year > 2010;"},
    {"user_input": "Find students who have secured rank 1 in any subject.", "sql_query": "SELECT * FROM students WHERE rank = 1;"},
    {"user_input": "Give students who have secured a rank between 1 and 3.", "sql_query": "SELECT * FROM students WHERE rank BETWEEN 1 AND 3;"},
    {"user_input": "Find students who have secured a rank greater than 10.", "sql_query": "SELECT * FROM students WHERE rank > 10;"},
    {"user_input": "Find students who have more than 5 absences.", "sql_query": "SELECT * FROM students WHERE absences > 5;"},
    {"user_input": "Identify students who have never been absent.", "sql_query": "SELECT * FROM students WHERE absences = 0;"},
    {"user_input": "Retrieve students who have attendance less than 50%.", "sql_query": "SELECT * FROM students WHERE attendance_percentage < 50;"},
    {"user_input": "Add a new student named 'Rohit Sharma' with roll number 105 in the Computer Science course.", "sql_query": "INSERT INTO students (roll_no, name, course) VALUES (105, 'Rohit Sharma', 'Computer Science');"},
  {"user_input": "Create a record for 'Priya Mehta' in Electronics with roll 210.", "sql_query": "INSERT INTO students (roll_no, name, course) VALUES (210, 'Priya Mehta', 'Electronics');"},
  {"user_input": "Add student 'Amit Kumar', roll 302, from 'Delhi' with phone number '9876543210'.", "sql_query": "INSERT INTO students (roll_no, name, city, phone) VALUES (302, 'Amit Kumar', 'Delhi', '9876543210');"},
  {"user_input": "Create an entry for 'Neha Gupta' (Roll 402) from 'Mumbai' with email 'neha.g@gmail.com'.", "sql_query": "INSERT INTO students (roll_no, name, city, email) VALUES (402, 'Neha Gupta', 'Mumbai', 'neha.g@gmail.com');"},
  {"user_input": "Insert student 'Vikas Singh' with roll 505, admitted in 2023 in 'Mechanical'.", "sql_query": "INSERT INTO students (roll_no, name, admission_year, course) VALUES (505, 'Vikas Singh', 2023, 'Mechanical');"},
  {"user_input": "Add 'Swati Verma' (Roll 601) who joined in 2022 for 'Civil Engineering'.", "sql_query": "INSERT INTO students (roll_no, name, admission_year, course) VALUES (601, 'Swati Verma', 2022, 'Civil Engineering');"},
  {"user_input": "Add 'Rahul Yadav', Roll 701, enrolled in 'Biotechnology' with a scholarship of 50%.", "sql_query": "INSERT INTO students (roll_no, name, course, scholarship) VALUES (701, 'Rahul Yadav', 'Biotechnology', 50);"},
  {"user_input": "Create a new entry for 'Ananya Roy', Roll 805, with full fees paid for 'Data Science'.", "sql_query": "INSERT INTO students (roll_no, name, course, fees_paid) VALUES (805, 'Ananya Roy', 'Data Science', 'Yes');"},
  {"user_input": "Insert 'Karan Joshi', Roll 905, for 'Physics' with initial attendance of 75%.", "sql_query": "INSERT INTO students (roll_no, name, course, attendance_percentage) VALUES (905, 'Karan Joshi', 'Physics', 75);"},
  {"user_input": "Add 'Sonia Dutta', Roll 1001, in 'Mathematics' with 85% attendance.", "sql_query": "INSERT INTO students (roll_no, name, course, attendance_percentage) VALUES (1001, 'Sonia Dutta', 'Mathematics', 85);"},
  {"user_input": "Insert 'Deepak Rao', Roll 1102, in batch 2025 for 'AI & ML'.", "sql_query": "INSERT INTO students (roll_no, name, batch_year, course) VALUES (1102, 'Deepak Rao', 2025, 'AI & ML');"},
  {"user_input": "Create student 'Megha Sharma', Roll 1203, in batch 2026 for 'Cyber Security'.", "sql_query": "INSERT INTO students (roll_no, name, batch_year, course) VALUES (1203, 'Megha Sharma', 2026, 'Cyber Security');"},
  {"user_input": "Add 'Ravi Tiwari', Roll 1304, in 'Statistics' with 89 marks in last semester.", "sql_query": "INSERT INTO students (roll_no, name, course, last_semester_marks) VALUES (1304, 'Ravi Tiwari', 'Statistics', 89);"},
  {"user_input": "Insert student 'Simran Kaur', Roll 1405, for 'History' who scored 76 marks.", "sql_query": "INSERT INTO students (roll_no, name, course, last_semester_marks) VALUES (1405, 'Simran Kaur', 'History', 76);"},
  {"user_input": "Create record for 'Arjun Pandey', Roll 1506, staying in Hostel A.", "sql_query": "INSERT INTO students (roll_no, name, hostel_block) VALUES (1506, 'Arjun Pandey', 'Hostel A');"},
  {"user_input": "Add 'Ritika Das', Roll 1607, residing in Hostel C.", "sql_query": "INSERT INTO students (roll_no, name, hostel_block) VALUES (1607, 'Ritika Das', 'Hostel C');"},
  {"user_input": "Insert 'Suresh Nair', Roll 1708, enrolled in 'Philosophy' with father’s name 'Ramesh Nair'.", "sql_query": "INSERT INTO students (roll_no, name, course, father_name) VALUES (1708, 'Suresh Nair', 'Philosophy', 'Ramesh Nair');"},
  {"user_input": "Create record for 'Manisha Sen', Roll 1809, studying 'Economics' with mother’s name 'Sunita Sen'.", "sql_query": "INSERT INTO students (roll_no, name, course, mother_name) VALUES (1809, 'Manisha Sen', 'Economics', 'Sunita Sen');"},
  {"user_input": "Add 'Akash Patel', Roll 1900, for 'Geology' at 'Delhi University'.", "sql_query": "INSERT INTO students (roll_no, name, course, university) VALUES (1900, 'Akash Patel', 'Geology', 'Delhi University');"},
  {"user_input": "Insert 'Nidhi Raghav', Roll 2001, in 'Law' at 'Mumbai University'.", "sql_query": "INSERT INTO students (roll_no, name, course, university) VALUES (2001, 'Nidhi Raghav', 'Law', 'Mumbai University');"},
  {"user_input": "Create a new table for student records with some example data.", "sql_query": "CREATE TABLE student_records (id INT PRIMARY KEY, name VARCHAR(100), age INT, course VARCHAR(50)); INSERT INTO student_records VALUES (1, 'Example Student', 18, 'Physics');"},
  {"user_input": "Generate a structure for student enrollments with a sample row.", "sql_query": "CREATE TABLE student_enrollments (enrollment_id INT PRIMARY KEY, student_name VARCHAR(100), course_name VARCHAR(50)); INSERT INTO student_enrollments VALUES (1, 'Sample Student', 'Mathematics');"},
  {"user_input": "Make a table to store student extracurricular activities with a demo row.", "sql_query": "CREATE TABLE student_extracurricular (student_id INT PRIMARY KEY, activity_name VARCHAR(100), level VARCHAR(50)); INSERT INTO student_extracurricular VALUES (1, 'Football', 'State');"},
  {"user_input": "Design a database for tracking student internships with a sample entry.", "sql_query": "CREATE TABLE student_internships (student_id INT PRIMARY KEY, company_name VARCHAR(100), role VARCHAR(100)); INSERT INTO student_internships VALUES (1, 'ABC Corp', 'Intern');"},
  {"user_input": "Build a student scholarship tracking system with an example row.", "sql_query": "CREATE TABLE student_scholarships (student_id INT PRIMARY KEY, scholarship_type VARCHAR(50), amount DECIMAL(10,2)); INSERT INTO student_scholarships VALUES (1, 'Merit-Based', 3000.00);"},
  {"user_input": "Create a table for tracking student health records with some sample data.", "sql_query": "CREATE TABLE student_health (student_id INT PRIMARY KEY, condition TEXT, last_checkup DATE); INSERT INTO student_health VALUES (1, 'No known issues', '2024-06-01');"},
  {"user_input": "Form a student project repository with a dummy project entry.", "sql_query": "CREATE TABLE student_projects (student_id INT PRIMARY KEY, project_title VARCHAR(255), mentor VARCHAR(100)); INSERT INTO student_projects VALUES (1, 'AI for Education', 'Dr. Patel');"},
  {"user_input": "Generate a student course registration system with some test data.", "sql_query": "CREATE TABLE student_courses (student_id INT PRIMARY KEY, course_name VARCHAR(100), semester VARCHAR(20)); INSERT INTO student_courses VALUES (1, 'Database Systems', 'Spring 2024');"},
  {"user_input": "Set up a database to monitor student hostel allocations with a sample row.", "sql_query": "CREATE TABLE student_hostel (student_id INT PRIMARY KEY, hostel_name VARCHAR(50), room_number INT); INSERT INTO student_hostel VALUES (1, 'Oak Hostel', 305);"},
  {"user_input": "Define a table to track student library book borrowing history with example data.", "sql_query": "CREATE TABLE student_library (student_id INT PRIMARY KEY, book_title VARCHAR(255), return_date DATE); INSERT INTO student_library VALUES (1, 'Machine Learning Basics', '2024-07-10');"},
  {"user_input": "Create a student profile for Emma, aged 20, in Computer Science.", "sql_query": "CREATE TABLE student_profiles (id INT PRIMARY KEY, name VARCHAR(100), age INT, major VARCHAR(50)); INSERT INTO student_profiles VALUES (1, 'Emma Roberts', 20, 'Computer Science');"},
  {"user_input": "Make a student record and insert Liam, 22, in Business.", "sql_query": "CREATE TABLE student_info (id INT PRIMARY KEY, full_name VARCHAR(100), age INT, department VARCHAR(100)); INSERT INTO student_info VALUES (1, 'Liam Johnson', 22, 'Business');"},
  {"user_input": "Define a student grading system and add Mia’s 90 in Biology.", "sql_query": "CREATE TABLE student_grades (student_id INT PRIMARY KEY, subject VARCHAR(100), marks INT); INSERT INTO student_grades VALUES (1, 'Biology', 90);"},
  {"user_input": "Generate a table for tracking attendance and add Oliver’s 25 days present in Physics.", "sql_query": "CREATE TABLE student_attendance (student_id INT PRIMARY KEY, subject VARCHAR(100), days_present INT); INSERT INTO student_attendance VALUES (1, 'Physics', 25);"},
  {"user_input": "Make a student fee table and record Jack’s payment of $1500.", "sql_query": "CREATE TABLE student_fees (student_id INT PRIMARY KEY, total_fee DECIMAL(10,2), paid_amount DECIMAL(10,2)); INSERT INTO student_fees VALUES (1, 4000.00, 1500.00);"},
  {"user_input": "Create a student research table and insert Sophia’s project on Machine Learning under Dr. Rao.", "sql_query": "CREATE TABLE student_research (student_id INT PRIMARY KEY, research_topic VARCHAR(255), mentor VARCHAR(100)); INSERT INTO student_research VALUES (1, 'Machine Learning Applications', 'Dr. Rao');"},
  {"user_input": "Make a sports participation log and add Ethan’s participation in the University Basketball team.", "sql_query": "CREATE TABLE student_sports (student_id INT PRIMARY KEY, sport VARCHAR(100), level VARCHAR(50)); INSERT INTO student_sports VALUES (1, 'Basketball', 'University');"},
  {"user_input": "Create a student organization membership table and add Ava in the Debate Club.", "sql_query": "CREATE TABLE student_organizations (student_id INT PRIMARY KEY, club_name VARCHAR(100), role VARCHAR(50)); INSERT INTO student_organizations VALUES (1, 'Debate Club', 'President');"},
  {"user_input": "Generate a volunteer service record and log Noah’s 30 hours at the Animal Shelter.", "sql_query": "CREATE TABLE student_volunteer (student_id INT PRIMARY KEY, organization VARCHAR(100), hours INT); INSERT INTO student_volunteer VALUES (1, 'Animal Shelter', 30);"},
  {"user_input": "Define a student exam schedule and add Olivia’s Math test on June 10th.", "sql_query": "CREATE TABLE student_exams (student_id INT PRIMARY KEY, subject VARCHAR(100), exam_date DATE); INSERT INTO student_exams VALUES (1, 'Mathematics', '2024-06-10');"},
  {"user_input": "Create a table for student academic records with example data.", "sql_query": "CREATE TABLE student_academics (student_id INT PRIMARY KEY, name VARCHAR(100), cgpa FLOAT, major VARCHAR(100));"},
  {"user_input": "Set up a student attendance monitoring table with demo entries.", "sql_query": "CREATE TABLE student_attendance (student_id INT PRIMARY KEY, subject VARCHAR(100), attendance_percentage FLOAT);"},
  {"user_input": "Generate a student examination results table with some test cases.", "sql_query": "CREATE TABLE student_results (student_id INT PRIMARY KEY, subject VARCHAR(100), marks INT, grade CHAR(1));"},
  {"user_input": "Make a table for storing student library book records.", "sql_query": "CREATE TABLE student_library (student_id INT PRIMARY KEY, book_title VARCHAR(255), issue_date DATE, return_date DATE);"},
  {"user_input": "Create a student fee payment table with sample data.", "sql_query": "CREATE TABLE student_fees (student_id INT PRIMARY KEY, total_fee DECIMAL(10,2), paid_amount DECIMAL(10,2));"},
  {"user_input": "Build a table for tracking student internship details.", "sql_query": "CREATE TABLE student_internships (student_id INT PRIMARY KEY, company_name VARCHAR(100), duration_months INT);"},
  {"user_input": "Generate a student extracurricular activities table with dummy values.", "sql_query": "CREATE TABLE student_extracurricular (student_id INT PRIMARY KEY, activity_name VARCHAR(100), role VARCHAR(50));"},
  {"user_input": "Set up a student club membership records table.", "sql_query": "CREATE TABLE student_clubs (student_id INT PRIMARY KEY, club_name VARCHAR(100), position VARCHAR(50));"},
  {"user_input": "Create a table for student scholarship details.", "sql_query": "CREATE TABLE student_scholarships (student_id INT PRIMARY KEY, scholarship_name VARCHAR(100), amount DECIMAL(10,2));"},
  {"user_input": "Make a table for student hostel accommodations.", "sql_query": "CREATE TABLE student_hostel (student_id INT PRIMARY KEY, hostel_name VARCHAR(100), room_number INT);"},
  {"user_input": "Set up a table for student mentorship programs with example entries.", "sql_query": "CREATE TABLE student_mentorship (student_id INT PRIMARY KEY, mentor_name VARCHAR(100), duration_months INT);"},
  {"user_input": "Create a table and add a student enrolled in AI course for semester 5.", "sql_query": "CREATE TABLE student_courses (student_id INT PRIMARY KEY, course_name VARCHAR(100), semester INT); INSERT INTO student_courses VALUES (1, 'Artificial Intelligence', 5);"},
  {"user_input": "Make a table and add a student who won a national coding competition.", "sql_query": "CREATE TABLE student_achievements (student_id INT PRIMARY KEY, award_name VARCHAR(100), awarded_by VARCHAR(100)); INSERT INTO student_achievements VALUES (1, 'National Coding Champion', 'CodeFest');"},
  {"user_input": "Set up a table and insert a student doing an internship at Google.", "sql_query": "CREATE TABLE student_internships (student_id INT PRIMARY KEY, company_name VARCHAR(100), duration_months INT); INSERT INTO student_internships VALUES (1, 'Google', 6);"},
  {"user_input": "Create a table and insert a student staying in Gamma Hostel, Room 306.", "sql_query": "CREATE TABLE student_hostel (student_id INT PRIMARY KEY, hostel_name VARCHAR(100), room_number INT); INSERT INTO student_hostel VALUES (1, 'Gamma Hostel', 306);"},
  {"user_input": "Make a table and add a student borrowing 'Deep Learning with Python' from the library.", "sql_query": "CREATE TABLE student_library (student_id INT PRIMARY KEY, book_title VARCHAR(255), issue_date DATE, return_date DATE); INSERT INTO student_library VALUES (1, 'Deep Learning with Python', '2025-02-05', '2025-03-05');"},
  {"user_input": "Create a table and insert a student enrolled in an online ML course on Udacity.", "sql_query": "CREATE TABLE student_online_courses (student_id INT PRIMARY KEY, platform VARCHAR(100), course_title VARCHAR(255)); INSERT INTO student_online_courses VALUES (1, 'Udacity', 'Intro to Machine Learning');"},
  {"user_input": "Generate a table and add a student winning a silver medal in National Olympiad.", "sql_query": "CREATE TABLE student_achievements (student_id INT PRIMARY KEY, award_name VARCHAR(100), awarded_by VARCHAR(100)); INSERT INTO student_achievements VALUES (1, 'Silver Medal', 'National Olympiad');"},
  {"user_input": "Make a table and insert a student taking Data Science Bootcamp on edX.", "sql_query": "CREATE TABLE student_online_courses (student_id INT PRIMARY KEY, platform VARCHAR(100), course_title VARCHAR(255)); INSERT INTO student_online_courses VALUES (1, 'edX', 'Data Science Bootcamp');"},
  {"user_input": "Set up a student participation table and record a student in a robotics competition.", "sql_query": "CREATE TABLE student_events (student_id INT PRIMARY KEY, event_name VARCHAR(100), role VARCHAR(50)); INSERT INTO student_events VALUES (1, 'Robotics Competition', 'Participant');"},
  {"user_input": "Build a table and insert a student receiving a 75,000 INR scholarship.", "sql_query": "CREATE TABLE student_scholarships (student_id INT PRIMARY KEY, scholarship_name VARCHAR(100), amount DECIMAL(10,2)); INSERT INTO student_scholarships VALUES (1, 'National Merit Scholarship', 75000.00);"},
  {"user_input": "Create tables for student emergency contacts and medical history.", "sql_query": "CREATE TABLE student_emergency_contacts (student_id INT PRIMARY KEY, guardian_name VARCHAR(100), contact_number VARCHAR(15)); CREATE TABLE student_medical_history (student_id INT PRIMARY KEY, blood_group VARCHAR(5), allergies TEXT);"},
  {"user_input": "Set up student placement records and industry internship details.", "sql_query": "CREATE TABLE student_placement (student_id INT PRIMARY KEY, company_name VARCHAR(100), job_role VARCHAR(100)); CREATE TABLE student_internship (student_id INT PRIMARY KEY, company_name VARCHAR(100), duration_months INT);"},
  {"user_input": "Make student research publications and conference participation records.", "sql_query": "CREATE TABLE student_research (student_id INT PRIMARY KEY, paper_title VARCHAR(255), journal VARCHAR(100)); CREATE TABLE student_conference (student_id INT PRIMARY KEY, conference_name VARCHAR(100), year INT);"},
  {"user_input": "Create student volunteering and NGO collaboration tables.", "sql_query": "CREATE TABLE student_volunteering (student_id INT PRIMARY KEY, organization VARCHAR(100), hours_contributed INT); CREATE TABLE student_ngo_projects (student_id INT PRIMARY KEY, project_title VARCHAR(255), impact TEXT);"},
  {"user_input": "Generate tables for student hostel allocation and mess preferences.", "sql_query": "CREATE TABLE student_hostel (student_id INT PRIMARY KEY, hostel_name VARCHAR(100), room_number INT); CREATE TABLE student_mess (student_id INT PRIMARY KEY, meal_preference VARCHAR(50));"},
  {"user_input": "Set up tables for student disciplinary actions and complaint tracking.", "sql_query": "CREATE TABLE student_disciplinary (student_id INT PRIMARY KEY, violation_description TEXT, date_reported DATE); CREATE TABLE student_complaints (student_id INT PRIMARY KEY, complaint_details TEXT, resolution_status VARCHAR(50));"},
  {"user_input": "Make tables for student academic projects and seminar participation.", "sql_query": "CREATE TABLE student_projects (student_id INT PRIMARY KEY, project_title VARCHAR(255), submission_date DATE); CREATE TABLE student_seminars (student_id INT PRIMARY KEY, seminar_topic VARCHAR(255), speaker_name VARCHAR(100));"},
  {"user_input": "Create student language proficiency and certifications tables.", "sql_query": "CREATE TABLE student_languages (student_id INT PRIMARY KEY, language VARCHAR(50), proficiency_level VARCHAR(50)); CREATE TABLE student_certifications (student_id INT PRIMARY KEY, certificate_name VARCHAR(100), issuing_organization VARCHAR(100));"},
  {"user_input": "Generate tables for student co-curricular activities and club memberships.", "sql_query": "CREATE TABLE student_cocurricular (student_id INT PRIMARY KEY, activity_name VARCHAR(100), role VARCHAR(50)); CREATE TABLE student_clubs (student_id INT PRIMARY KEY, club_name VARCHAR(100), position VARCHAR(50));"},
  {"user_input": "Set up student alumni network and mentorship records.", "sql_query": "CREATE TABLE student_alumni (alumni_id INT PRIMARY KEY, name VARCHAR(100), graduation_year INT); CREATE TABLE student_mentorship (student_id INT PRIMARY KEY, mentor_name VARCHAR(100), duration_months INT);"},
  {"user_input": "Create student study groups and group project tables.", "sql_query": "CREATE TABLE student_study_groups (group_id INT PRIMARY KEY, group_name VARCHAR(100), subject VARCHAR(100)); CREATE TABLE student_group_projects (project_id INT PRIMARY KEY, project_title VARCHAR(255), team_size INT);"},
  {"user_input": "Generate student online learning progress tracking and certifications.", "sql_query": "CREATE TABLE student_online_learning (student_id INT PRIMARY KEY, platform VARCHAR(100), course_title VARCHAR(255)); CREATE TABLE student_certificates (student_id INT PRIMARY KEY, certificate_name VARCHAR(255), completion_date DATE);"},
  {"user_input": "Set up student career counseling sessions and resume submissions.", "sql_query": "CREATE TABLE student_counseling (student_id INT PRIMARY KEY, counselor_name VARCHAR(100), session_date DATE); CREATE TABLE student_resume (student_id INT PRIMARY KEY, resume_link VARCHAR(255), last_updated DATE);"},
  {"user_input": "Make student transportation records and route details.", "sql_query": "CREATE TABLE student_transport (student_id INT PRIMARY KEY, bus_route VARCHAR(50), pickup_point VARCHAR(100)); CREATE TABLE student_vehicle (student_id INT PRIMARY KEY, vehicle_type VARCHAR(50), registration_number VARCHAR(50));"},
  {"user_input": "Create tables for student hackathon participation and coding competitions.", "sql_query": "CREATE TABLE student_hackathons (student_id INT PRIMARY KEY, hackathon_name VARCHAR(100), award VARCHAR(100)); CREATE TABLE student_coding_contests (student_id INT PRIMARY KEY, contest_name VARCHAR(100), rank INT);"},
  {"user_input": "Generate tables for student research projects and journal publications.", "sql_query": "CREATE TABLE student_research (student_id INT PRIMARY KEY, research_topic VARCHAR(255), professor_name VARCHAR(100)); CREATE TABLE student_journals (student_id INT PRIMARY KEY, journal_title VARCHAR(255), publication_date DATE);"},
  {"user_input": "Set up student mentorship and alumni networking tables.", "sql_query": "CREATE TABLE student_mentorship (student_id INT PRIMARY KEY, mentor_name VARCHAR(100), duration_months INT); CREATE TABLE student_alumni_network (alumni_id INT PRIMARY KEY, name VARCHAR(100), graduation_year INT);"},
  {"user_input": "Make tables for student sports team participation and awards.", "sql_query": "CREATE TABLE student_sports (student_id INT PRIMARY KEY, sport_name VARCHAR(100), position VARCHAR(50)); CREATE TABLE student_sports_awards (student_id INT PRIMARY KEY, award_name VARCHAR(100), year INT);"},
  {"user_input": "Create student hostel allocation and meal preference tables.", "sql_query": "CREATE TABLE student_hostel (student_id INT PRIMARY KEY, hostel_name VARCHAR(100), room_number INT); CREATE TABLE student_meal_plan (student_id INT PRIMARY KEY, meal_type VARCHAR(50), dietary_preference VARCHAR(100));"},
  {"user_input": "Generate tables for student disciplinary actions and complaint management.", "sql_query": "CREATE TABLE student_disciplinary (student_id INT PRIMARY KEY, offense_description TEXT, date_reported DATE); CREATE TABLE student_complaints (student_id INT PRIMARY KEY, complaint_details TEXT, resolution_status VARCHAR(50));"},
  {"user_input": "Set up student part-time job records and internship tracking.", "sql_query": "CREATE TABLE student_jobs (student_id INT PRIMARY KEY, company_name VARCHAR(100), job_role VARCHAR(100)); CREATE TABLE student_internships (student_id INT PRIMARY KEY, internship_company VARCHAR(100), duration_months INT);"},
  {"user_input": "Make tables for student cultural event participation and leadership roles.", "sql_query": "CREATE TABLE student_cultural_events (student_id INT PRIMARY KEY, event_name VARCHAR(100), role VARCHAR(50)); CREATE TABLE student_leadership (student_id INT PRIMARY KEY, position_name VARCHAR(100), organization VARCHAR(100));"},
  {"user_input": "Create tables for student workshops and guest lecture participation.", "sql_query": "CREATE TABLE student_workshops (student_id INT PRIMARY KEY, workshop_topic VARCHAR(255), organizer VARCHAR(100)); CREATE TABLE student_guest_lectures (student_id INT PRIMARY KEY, lecturer_name VARCHAR(100), lecture_topic VARCHAR(255));"},
  {"user_input": "Generate student medical records and emergency contacts tables.", "sql_query": "CREATE TABLE student_medical (student_id INT PRIMARY KEY, blood_group VARCHAR(5), allergies TEXT); CREATE TABLE student_emergency_contacts (student_id INT PRIMARY KEY, guardian_name VARCHAR(100), contact_number VARCHAR(15));"},
  {"user_input": "Set up student volunteering projects and NGO partnerships.", "sql_query": "CREATE TABLE student_volunteering (student_id INT PRIMARY KEY, organization VARCHAR(100), hours_contributed INT); CREATE TABLE student_ngo_collaborations (student_id INT PRIMARY KEY, project_title VARCHAR(255), impact_description TEXT);"},
  {"user_input": "Make student group study and project collaboration tables.", "sql_query": "CREATE TABLE student_study_groups (group_id INT PRIMARY KEY, group_name VARCHAR(100), subject VARCHAR(100)); CREATE TABLE student_group_projects (project_id INT PRIMARY KEY, project_title VARCHAR(255), team_size INT);"},
  {"user_input": "Fetch student names along with their enrolled course names.", "sql_query": "SELECT s.name, c.course_name FROM students s INNER JOIN enrollments e ON s.student_id = e.student_id INNER JOIN courses c ON e.course_id = c.course_id;"},
  {"user_input": "Retrieve all students and their respective department names.", "sql_query": "SELECT s.name, d.department_name FROM students s LEFT JOIN departments d ON s.department_id = d.department_id;"},
  {"user_input": "Get students who have enrolled in at least one course.", "sql_query": "SELECT s.name FROM students s INNER JOIN enrollments e ON s.student_id = e.student_id;"},
  {"user_input": "Fetch student details along with their advisor names.", "sql_query": "SELECT s.name, a.advisor_name FROM students s LEFT JOIN advisors a ON s.advisor_id = a.advisor_id;"},
  {"user_input": "List all students and their assigned hostel names.", "sql_query": "SELECT s.name, h.hostel_name FROM students s LEFT JOIN hostels h ON s.hostel_id = h.hostel_id;"},
  {"user_input": "Get all students and their scholarship details if available.", "sql_query": "SELECT s.name, sch.scholarship_name FROM students s LEFT JOIN scholarships sch ON s.scholarship_id = sch.scholarship_id;"},
  {"user_input": "Fetch students and their assigned mentors.", "sql_query": "SELECT s.name, m.mentor_name FROM students s LEFT JOIN mentors m ON s.mentor_id = m.mentor_id;"},
  {"user_input": "List all students and their internship companies.", "sql_query": "SELECT s.name, i.company_name FROM students s LEFT JOIN internships i ON s.student_id = i.student_id;"},
  {"user_input": "Retrieve students and the number of courses they are enrolled in.", "sql_query": "SELECT s.name, COUNT(e.course_id) AS total_courses FROM students s INNER JOIN enrollments e ON s.student_id = e.student_id GROUP BY s.name;"},
  {"user_input": "Fetch students and their library issued book names.", "sql_query": "SELECT s.name, b.book_title FROM students s LEFT JOIN library_issues l ON s.student_id = l.student_id LEFT JOIN books b ON l.book_id = b.book_id;"},
  {"user_input": "Get student names and their attendance percentage.", "sql_query": "SELECT s.name, a.attendance_percentage FROM students s LEFT JOIN attendance a ON s.student_id = a.student_id;"},
  {"user_input": "Fetch all students along with their exam grades.", "sql_query": "SELECT s.name, e.exam_name, g.grade FROM students s INNER JOIN grades g ON s.student_id = g.student_id INNER JOIN exams e ON g.exam_id = e.exam_id;"},
  {"user_input": "Retrieve students and their assigned project titles.", "sql_query": "SELECT s.name, p.project_title FROM students s LEFT JOIN projects p ON s.student_id = p.student_id;"},
  {"user_input": "List students and their parents' contact numbers.", "sql_query": "SELECT s.name, p.parent_contact FROM students s LEFT JOIN parents p ON s.parent_id = p.parent_id;"},
  {"user_input": "Fetch students and their preferred transport mode.", "sql_query": "SELECT s.name, t.transport_mode FROM students s LEFT JOIN transport t ON s.transport_id = t.transport_id;"},
  {"user_input": "Get students and their assigned club activities.", "sql_query": "SELECT s.name, c.club_name FROM students s LEFT JOIN clubs c ON s.club_id = c.club_id;"},
  {"user_input": "Retrieve students and their campus job positions.", "sql_query": "SELECT s.name, j.job_position FROM students s LEFT JOIN campus_jobs j ON s.student_id = j.student_id;"},
  {"user_input": "List students and their medical history records.", "sql_query": "SELECT s.name, m.medical_condition FROM students s LEFT JOIN medical_records m ON s.student_id = m.student_id;"},
  {"user_input": "Fetch students and their graduation year.", "sql_query": "SELECT s.name, g.graduation_year FROM students s LEFT JOIN graduation g ON s.student_id = g.student_id;"},
  {"user_input": "Get students and their attendance in cultural events.", "sql_query": "SELECT s.name, ce.event_name FROM students s LEFT JOIN cultural_events ce ON s.student_id = ce.student_id;"},
  {"user_input": "Fetch students and their assigned sports teams.", "sql_query": "SELECT s.name, sp.team_name FROM students s LEFT JOIN sports_teams sp ON s.team_id = sp.team_id;"},
  {"user_input": "Retrieve students and their assigned research topics.", "sql_query": "SELECT s.name, r.research_topic FROM students s LEFT JOIN research_projects r ON s.student_id = r.student_id;"},
  {"user_input": "List students and their assigned hostel room numbers.", "sql_query": "SELECT s.name, h.room_number FROM students s LEFT JOIN hostels h ON s.hostel_id = h.hostel_id;"},
  {"user_input": "Fetch students and their assigned academic counselors.", "sql_query": "SELECT s.name, c.counselor_name FROM students s LEFT JOIN counselors c ON s.counselor_id = c.counselor_id;"},
  {"user_input": "Get students and their elective course choices.", "sql_query": "SELECT s.name, ec.course_name FROM students s INNER JOIN elective_courses ec ON s.student_id = ec.student_id;"},
  {"user_input": "Fetch students and their fee payment details.", "sql_query": "SELECT s.name, f.fee_status FROM students s LEFT JOIN fees f ON s.student_id = f.student_id;"},
  {"user_input": "Retrieve students and their extracurricular activities.", "sql_query": "SELECT s.name, e.activity_name FROM students s LEFT JOIN extracurricular e ON s.activity_id = e.activity_id;"},
  {"user_input": "List students and their study abroad program details.", "sql_query": "SELECT s.name, sa.program_name FROM students s LEFT JOIN study_abroad sa ON s.student_id = sa.student_id;"},
  {"user_input": "Fetch students and their past academic performance.", "sql_query": "SELECT s.name, p.performance_score FROM students s LEFT JOIN past_performance p ON s.student_id = p.student_id;"},
  {"user_input": "Retrieve students and their alumni connections.", "sql_query": "SELECT s.name, a.alumni_name FROM students s LEFT JOIN alumni a ON s.alumni_id = a.alumni_id;"},
  {"user_input": "List students and their skill development programs.", "sql_query": "SELECT s.name, sd.program_name FROM students s LEFT JOIN skill_development sd ON s.program_id = sd.program_id;"},
  {"user_input": "Fetch students and their internship mentors.", "sql_query": "SELECT s.name, im.mentor_name FROM students s LEFT JOIN internship_mentors im ON s.student_id = im.student_id;"},
  {"user_input": "Get students and their assigned thesis supervisors.", "sql_query": "SELECT s.name, ts.supervisor_name FROM students s LEFT JOIN thesis_supervisors ts ON s.supervisor_id = ts.supervisor_id;"},
  {"user_input": "Fetch students and their degree specialization.", "sql_query": "SELECT s.name, ds.specialization FROM students s LEFT JOIN degree_specialization ds ON s.student_id = ds.student_id;"},
  {"user_input": "Retrieve students and their enrollment year.", "sql_query": "SELECT s.name, e.enrollment_year FROM students s LEFT JOIN enrollment e ON s.student_id = e.student_id;"},
  {"user_input": "List students and their recorded volunteer work.", "sql_query": "SELECT s.name, v.volunteer_event FROM students s LEFT JOIN volunteer_work v ON s.student_id = v.student_id;"},
  {"user_input": "Fetch students and their foreign language certifications.", "sql_query": "SELECT s.name, fl.language_name FROM students s LEFT JOIN foreign_languages fl ON s.student_id = fl.student_id;"},
  {"user_input": "Get all possible mentor-student pairs from the student and mentor tables.", "sql_query": "SELECT s.student_id, s.student_name, m.mentor_id, m.mentor_name FROM students s CROSS JOIN mentors m;"},
  {"user_input": "List all possible student-course combinations.", "sql_query": "SELECT s.student_id, s.student_name, c.course_id, c.course_name FROM students s CROSS JOIN courses c;"},
  {"user_input": "Find all students who share the same elective subject.", "sql_query": "SELECT s1.student_id AS student1, s2.student_id AS student2, e.elective_name FROM students s1 JOIN students s2 ON s1.elective_id = s2.elective_id AND s1.student_id <> s2.student_id JOIN electives e ON s1.elective_id = e.elective_id;"},
  {"user_input": "Generate all possible student-hostel room assignments.", "sql_query": "SELECT s.student_id, s.student_name, h.hostel_id, h.room_number FROM students s CROSS JOIN hostels h;"},
  {"user_input": "Find all students working on the same research project.", "sql_query": "SELECT s1.student_id AS student1, s2.student_id AS student2, r.research_topic FROM students s1 JOIN students s2 ON s1.research_team_id = s2.research_team_id AND s1.student_id <> s2.student_id JOIN research_projects r ON s1.research_team_id = r.research_team_id;"},
  {"user_input": "Find all students with the same faculty mentor.", "sql_query": "SELECT s1.student_id AS student1, s2.student_id AS student2, m.mentor_name FROM students s1 JOIN students s2 ON s1.mentor_id = s2.mentor_id AND s1.student_id <> s2.student_id JOIN mentors m ON s1.mentor_id = m.mentor_id;"},
  {"user_input": "Find all student pairs who are in the same lab section.", "sql_query": "SELECT s1.student_id AS student1, s2.student_id AS student2, l.lab_name FROM students s1 JOIN students s2 ON s1.lab_group_id = s2.lab_group_id AND s1.student_id <> s2.student_id JOIN labs l ON s1.lab_group_id = l.lab_group_id;"},
  {"user_input": "List all student-student pairs for possible study abroad exchange programs.", "sql_query": "SELECT s1.student_id AS student1, s2.student_id AS student2, ep.exchange_program_name FROM students s1 JOIN students s2 ON s1.exchange_program_id = s2.exchange_program_id AND s1.student_id <> s2.student_id JOIN exchange_programs ep ON s1.exchange_program_id = ep.exchange_program_id;"},
  {"user_input": "Find all possible pairs of students in the same dormitory.", "sql_query": "SELECT s1.student_id AS student1, s2.student_id AS student2, h.hostel_name FROM students s1 JOIN students s2 ON s1.hostel_id = s2.hostel_id AND s1.student_id <> s2.student_id JOIN hostels h ON s1.hostel_id = h.hostel_id;"},
  {"user_input": "Get all student pairs enrolled in the same course.", "sql_query": "SELECT s1.student_id AS student1, s2.student_id AS student2, c.course_name FROM enrollments e1 JOIN enrollments e2 ON e1.course_id = e2.course_id AND e1.student_id <> e2.student_id JOIN courses c ON e1.course_id = c.course_id;"},
  {"user_input": "List all student pairs in the same research group.", "sql_query": "SELECT s1.student_id AS student1, s2.student_id AS student2, r.research_topic FROM students s1 JOIN students s2 ON s1.research_team_id = s2.research_team_id AND s1.student_id <> s2.student_id JOIN research_projects r ON s1.research_team_id = r.research_team_id;"},
  {"user_input": "Find students who are in the same study abroad program.", "sql_query": "SELECT s1.student_id AS student1, s2.student_id AS student2, ep.exchange_program_name FROM students s1 JOIN students s2 ON s1.exchange_program_id = s2.exchange_program_id AND s1.student_id <> s2.student_id JOIN exchange_programs ep ON s1.exchange_program_id = ep.exchange_program_id;"},
  {"user_input": "Find all possible student-course assignments.", "sql_query": "SELECT s.student_id, s.student_name, c.course_id, c.course_name FROM students s CROSS JOIN courses c;"},
  {"user_input": "List all student-mentor pairs.", "sql_query": "SELECT s.student_id, s.student_name, m.mentor_id, m.mentor_name FROM students s CROSS JOIN mentors m;"},
  {"user_input": "Find all student pairs who are working on the same project group.", "sql_query": "SELECT s1.student_id AS student1, s2.student_id AS student2, p.project_name FROM students s1 JOIN students s2 ON s1.research_team_id = s2.research_team_id AND s1.student_id <> s2.student_id JOIN projects p ON s1.research_team_id = p.research_team_id;"}
]
