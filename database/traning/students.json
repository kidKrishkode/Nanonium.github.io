[
    {"user_input": "Give me the names of students whose roll number is more than 20.", "sql_query": "SELECT name FROM students WHERE roll > 20;"},
    {"user_input": "Find the names of students whose roll number is more than 43.", "sql_query": "SELECT name FROM students WHERE roll > 43;"},
    {"user_input": "Show the names of students whose roll number is not below 30.", "sql_query": "SELECT name FROM students WHERE roll >= 30;"},
    {"user_input": "Get the students' names where roll is between 24 and 27.", "sql_query": "SELECT name FROM students WHERE roll BETWEEN 24 AND 27;"},
    {"user_input": "List all students whose marks are greater than 80.", "sql_query": "SELECT * FROM students WHERE marks > 80;"},
    {"user_input": "Find students who scored less than 50 marks.", "sql_query": "SELECT * FROM students WHERE marks < 50;"},
    {"user_input": "Show all students where age is above 18.", "sql_query": "SELECT * FROM students WHERE age > 18;"},
    {"user_input": "Get the student details where age is between 16 and 20.", "sql_query": "SELECT * FROM students WHERE age BETWEEN 16 AND 20;"},
    {"user_input": "Find the names and roll numbers of students who are in class 10.", "sql_query": "SELECT name, roll FROM students WHERE class = 10;"},
    {"user_input": "Give me the details of students who are in either class 9 or class 10.", "sql_query": "SELECT * FROM students WHERE class IN (9, 10);"},
    {"user_input": "Find all students whose name starts with 'A'.", "sql_query": "SELECT * FROM students WHERE name LIKE 'A%';"},
    {"user_input": "Show the list of students whose name contains 'an'.", "sql_query": "SELECT * FROM students WHERE name LIKE '%an%';"},
    {"user_input": "Get the students' details sorted by their marks in descending order.", "sql_query": "SELECT * FROM students ORDER BY marks DESC;"},
    {"user_input": "Find the top 5 students with the highest marks.", "sql_query": "SELECT * FROM students ORDER BY marks DESC LIMIT 5;"},
    {"user_input": "Give me the total number of students in the table.", "sql_query": "SELECT COUNT(*) FROM students;"},
    {"user_input": "Find the average marks of students.", "sql_query": "SELECT AVG(marks) FROM students;"},
    {"user_input": "Show the maximum and minimum marks in the class.", "sql_query": "SELECT MAX(marks) AS highest, MIN(marks) AS lowest FROM students;"},
    {"user_input": "Get the number of students in each class.", "sql_query": "SELECT class, COUNT(*) FROM students GROUP BY class;"},
    {"user_input": "Find the students who have the same name.", "sql_query": "SELECT name, COUNT(*) FROM students GROUP BY name HAVING COUNT(*) > 1;"},
    {"user_input": "Show me the students whose marks are above the class average.", "sql_query": "SELECT * FROM students WHERE marks > (SELECT AVG(marks) FROM students);" },
    {"user_input": "Find students who have not registered for any course.", "sql_query": "SELECT * FROM students WHERE course_id IS NULL;"},
    {"user_input": "Get the names of students who registered after January 1, 2023.", "sql_query": "SELECT name FROM students WHERE registration_date > '2023-01-01';"},
    {"user_input": "Find all students whose email ends with '@gmail.com'.", "sql_query": "SELECT * FROM students WHERE email LIKE '%@gmail.com';"},
    {"user_input": "Show me the students who have submitted all assignments.", "sql_query": "SELECT * FROM students WHERE assignments_completed = total_assignments;"},
    {"user_input": "List students along with their course names.", "sql_query": "SELECT students.name, courses.course_name FROM students JOIN courses ON students.course_id = courses.id;"},
    {"user_input": "Extract students who are taking Mathematics.", "sql_query": "SELECT * FROM students WHERE course_id = (SELECT id FROM courses WHERE course_name = 'Mathematics');"},
    {"user_input": "Find students whose birthdays are in March.", "sql_query": "SELECT * FROM students WHERE MONTH(birth_date) = 3;"},
    {"user_input": "Get a list of students who scored above the class average in Math.", "sql_query": "SELECT * FROM students WHERE marks > (SELECT AVG(marks) FROM students WHERE course_id = (SELECT id FROM courses WHERE course_name = 'Math'));"},
    {"user_input": "Find the students who have attended more than 90% of their classes.", "sql_query": "SELECT * FROM students WHERE attendance_percentage > 90;"},
    {"user_input": "Get the names of students along with their professors' names.", "sql_query": "SELECT students.name, professors.name FROM students JOIN professors ON students.professor_id = professors.id;"},
    {"user_input": "List all students who live in 'New York'.", "sql_query": "SELECT * FROM students WHERE city = 'New York';"},
    {"user_input": "Find students who have at least one pending fee payment.", "sql_query": "SELECT * FROM students WHERE pending_fees > 0;"},
    {"user_input": "Show students who are enrolled in more than 3 courses.", "sql_query": "SELECT students.name FROM students JOIN enrollments ON students.id = enrollments.student_id GROUP BY students.id HAVING COUNT(enrollments.course_id) > 3;"},
    {"user_input": "Get the student who has the highest marks in Physics.", "sql_query": "SELECT * FROM students WHERE course_id = (SELECT id FROM courses WHERE course_name = 'Physics') ORDER BY marks DESC LIMIT 1;"},
    {"user_input": "Find all students who have the same birth date.", "sql_query": "SELECT birth_date, COUNT(*) FROM students GROUP BY birth_date HAVING COUNT(*) > 1;"},
    {"user_input": "Show the students who have enrolled in the last 7 days.", "sql_query": "SELECT * FROM students WHERE registration_date >= CURDATE() - INTERVAL 7 DAY;"},
    {"user_input": "Find students who have both Physics and Chemistry as their courses.", "sql_query": "SELECT students.name FROM students JOIN enrollments ON students.id = enrollments.student_id WHERE enrollments.course_id IN (SELECT id FROM courses WHERE course_name IN ('Physics', 'Chemistry')) GROUP BY students.id HAVING COUNT(DISTINCT enrollments.course_id) = 2;"},
    {"user_input": "Update the email of the student whose roll number is 105.", "sql_query": "UPDATE students SET email = 'newemail@example.com' WHERE roll = 105;"},
    {"user_input": "Delete students who have never attended any classes.", "sql_query": "DELETE FROM students WHERE attendance_percentage = 0;"},
    {"user_input": "Find students who have registered before January 1, 2023.", "sql_query": "SELECT * FROM students WHERE registration_date < '2023-01-01';"},
    {"user_input": "Find students who have registered before February 1, 2023.", "sql_query": "SELECT * FROM students WHERE registration_date < '2023-02-01';"},
    {"user_input": "Find students who registered between January 1, 2023, and March 1, 2023.", "sql_query": "SELECT * FROM students WHERE registration_date BETWEEN '2023-01-01' AND '2023-03-01';"},
    {"user_input": "Find students whose marks in Physics are greater than 50.", "sql_query": "SELECT * FROM students WHERE physics_marks > 50;"},
    {"user_input": "Find students whose marks in Physics are greater than 55.", "sql_query": "SELECT * FROM students WHERE physics_marks > 55;"},
    {"user_input": "Find students whose marks in Physics are between 60 and 70.", "sql_query": "SELECT * FROM students WHERE physics_marks BETWEEN 60 AND 70;"},
    {"user_input": "List students who have attendance greater than 80%.", "sql_query": "SELECT * FROM students WHERE attendance_percentage > 80;"},
    {"user_input": "List students who have attendance greater than 85%.", "sql_query": "SELECT * FROM students WHERE attendance_percentage > 85;"},
    {"user_input": "List students who have attendance between 75% and 90%.", "sql_query": "SELECT * FROM students WHERE attendance_percentage BETWEEN 75 AND 90;"},
    {"user_input": "Find students whose roll number is greater than 20.", "sql_query": "SELECT * FROM students WHERE roll > 20;"},
    {"user_input": "Find students whose roll number is greater than 30.", "sql_query": "SELECT * FROM students WHERE roll > 30;"},
    {"user_input": "Find students whose roll number is between 25 and 40.", "sql_query": "SELECT * FROM students WHERE roll BETWEEN 25 AND 40;"},
    {"user_input": "Get students whose last name starts with 'S'.", "sql_query": "SELECT * FROM students WHERE last_name LIKE 'S%';"},
    {"user_input": "Get students whose last name starts with 'T'.", "sql_query": "SELECT * FROM students WHERE last_name LIKE 'T%';"},
    {"user_input": "Get students whose last name contains 'a'.", "sql_query": "SELECT * FROM students WHERE last_name LIKE '%a%';"},
    {"user_input": "Find students who have submitted at least 3 assignments.", "sql_query": "SELECT * FROM students WHERE assignments_completed >= 3;"},
    {"user_input": "Find students who have submitted at least 5 assignments.", "sql_query": "SELECT * FROM students WHERE assignments_completed >= 5;"},
    {"user_input": "Find students who have submitted assignments between 4 and 8.", "sql_query": "SELECT * FROM students WHERE assignments_completed BETWEEN 4 AND 8;"},
    {"user_input": "Find students who are 18 years or older.", "sql_query": "SELECT * FROM students WHERE age >= 18;"},
    {"user_input": "Find students who are 20 years or older.", "sql_query": "SELECT * FROM students WHERE age >= 20;"},
    {"user_input": "Get the names of students whose marks are more than 60.", "sql_query": "SELECT name FROM students WHERE marks > 60;"},
    {"user_input": "Get the names of students whose marks are more than 65.", "sql_query": "SELECT name FROM students WHERE marks > 65;"},
    {"user_input": "Get the names of students whose marks are between 70 and 80.", "sql_query": "SELECT name FROM students WHERE marks BETWEEN 70 AND 80;"},
    {"user_input": "Find students who are in class 10.", "sql_query": "SELECT * FROM students WHERE class = 10;"},
    {"user_input": "Find students who are in class 11.", "sql_query": "SELECT * FROM students WHERE class = 11;"},
    {"user_input": "Find students who are in class 12 and scored above 75.", "sql_query": "SELECT * FROM students WHERE class = 12 AND marks > 75;"},
    {"user_input": "Get the list of students who have registered after 2022-01-01.", "sql_query": "SELECT * FROM students WHERE registration_date > '2022-01-01';"},
    {"user_input": "Get the list of students who have registered after 2023-01-01.", "sql_query": "SELECT * FROM students WHERE registration_date > '2023-01-01';"},
    {"user_input": "Get the list of students who registered between 2022-06-01 and 2023-06-01.", "sql_query": "SELECT * FROM students WHERE registration_date BETWEEN '2022-06-01' AND '2023-06-01';"},
    {"user_input": "Find students who have more than 75% attendance.", "sql_query": "SELECT * FROM students WHERE attendance > 75;"},
    {"user_input": "Find students who have more than 80% attendance.", "sql_query": "SELECT * FROM students WHERE attendance > 80;"},
    {"user_input": "Find students who have attendance between 50% and 70%.", "sql_query": "SELECT * FROM students WHERE attendance BETWEEN 50 AND 70;"},
    {"user_input": "Get students whose age is above 15.", "sql_query": "SELECT * FROM students WHERE age > 15;"},
    {"user_input": "Get students whose age is above 16.", "sql_query": "SELECT * FROM students WHERE age > 16;"},
    {"user_input": "Get students whose age is between 14 and 18.", "sql_query": "SELECT * FROM students WHERE age BETWEEN 14 AND 18;"},
    {"user_input": "Find students who have taken the 'Mathematics' subject.", "sql_query": "SELECT * FROM students WHERE subject = 'Mathematics';"},
    {"user_input": "Find students who have taken 'Physics' as a subject.", "sql_query": "SELECT * FROM students WHERE subject = 'Physics';"},
    {"user_input": "Find students who have taken either 'Chemistry' or 'Biology'.", "sql_query": "SELECT * FROM students WHERE subject IN ('Chemistry', 'Biology');"},
    {"user_input": "Find students who have not selected 'History' as a subject.", "sql_query": "SELECT * FROM students WHERE subject != 'History';"},
    {"user_input": "Get students who live in 'New York'.", "sql_query": "SELECT * FROM students WHERE city = 'New York';"},
    {"user_input": "List all students sorted by their marks in descending order.", "sql_query": "SELECT * FROM students ORDER BY marks DESC;"},
    {"user_input": "List all students sorted by their marks in ascending order.", "sql_query": "SELECT * FROM students ORDER BY marks ASC;"},
    {"user_input": "Get the top 5 students based on marks.", "sql_query": "SELECT * FROM students ORDER BY marks DESC LIMIT 5;"},
    {"user_input": "Get the top 10 students based on marks.", "sql_query": "SELECT * FROM students ORDER BY marks DESC LIMIT 10;"},
    {"user_input": "Provide students who scored more than 50 but less than 80.", "sql_query": "SELECT * FROM students WHERE marks > 50 AND marks < 80;"},
    {"user_input": "Get students who scored more than 55 but less than 85.", "sql_query": "SELECT * FROM students WHERE marks > 55 AND marks < 85;"},
    {"user_input": "Find students whose roll number is an even number.", "sql_query": "SELECT * FROM students WHERE roll_number % 2 = 0;"},
    {"user_input": "Provide students whose roll number is an odd number.", "sql_query": "SELECT * FROM students WHERE roll_number % 2 != 0;"},
    {"user_input": "Find students who have a roll number between 10 and 50.", "sql_query": "SELECT * FROM students WHERE roll_number BETWEEN 10 AND 50;"},
    {"user_input": "Get the count of students in each class.", "sql_query": "SELECT class, COUNT(*) FROM students GROUP BY class;"},
    {"user_input": "Get the count of students in each subject.", "sql_query": "SELECT subject, COUNT(*) FROM students GROUP BY subject;"},
    {"user_input": "Find students who have 'A' in their name.", "sql_query": "SELECT * FROM students WHERE name LIKE '%A%';"},
    {"user_input": "Find students whose name starts with 'S'.", "sql_query": "SELECT * FROM students WHERE name LIKE 'S%';"},
    {"user_input": "Find students whose name ends with 'n'.", "sql_query": "SELECT * FROM students WHERE name LIKE '%n';"},
    {"user_input": "Get students who were born after 2005-01-01.", "sql_query": "SELECT * FROM students WHERE birth_date > '2005-01-01';"},
    {"user_input": "Get students who were born before 2010-01-01.", "sql_query": "SELECT * FROM students WHERE birth_date < '2010-01-01';"},
    {"user_input": "Find students who have the highest marks in each class.", "sql_query": "SELECT class, MAX(marks) FROM students GROUP BY class;"},
    {"user_input": "Find students who have the lowest marks in each class.", "sql_query": "SELECT class, MIN(marks) FROM students GROUP BY class;"},
    {"user_input": "Find students who have attended more than 100 classes.", "sql_query": "SELECT * FROM students WHERE attendance_count > 100;"},
    {"user_input": "Find students who have attended between 50 and 150 classes.", "sql_query": "SELECT * FROM students WHERE attendance_count BETWEEN 50 AND 150;"},
    {"user_input": "Get all students who scored more than 80 in mathematics.", "sql_query": "SELECT * FROM students WHERE math_score > 80;"},
    {"user_input": "Show the students who scored above 85 in mathematics.", "sql_query": "SELECT * FROM students WHERE math_score > 85;"},
    {"user_input": "Find students with a mathematics score between 75 and 90.", "sql_query": "SELECT * FROM students WHERE math_score BETWEEN 75 AND 90;"},
    {"user_input": "List students who failed in mathematics.", "sql_query": "SELECT * FROM students WHERE math_score < 40;"},
    {"user_input": "Find students who failed in either mathematics or science.", "sql_query": "SELECT * FROM students WHERE math_score < 40 OR science_score < 40;"},
    {"user_input": "Get students who passed both mathematics and science.", "sql_query": "SELECT * FROM students WHERE math_score >= 40 AND science_score >= 40;"},
    {"user_input": "Find students who got exactly 75 marks in mathematics.", "sql_query": "SELECT * FROM students WHERE math_score = 75;"},
    {"user_input": "Show students with attendance less than 75%.", "sql_query": "SELECT * FROM students WHERE attendance_percentage < 75;"},
    {"user_input": "Find students with attendance between 60% and 80%.", "sql_query": "SELECT * FROM students WHERE attendance_percentage BETWEEN 60 AND 80;"},
    {"user_input": "List students who have full attendance.", "sql_query": "SELECT * FROM students WHERE attendance_percentage = 100;"},
    {"user_input": "Get students who have paid full fees.", "sql_query": "SELECT * FROM students WHERE fees_due = 0;"},
    {"user_input": "Find students with pending fees above 5000.", "sql_query": "SELECT * FROM students WHERE fees_due > 5000;"},
    {"user_input": "Show students with pending fees between 2000 and 7000.", "sql_query": "SELECT * FROM students WHERE fees_due BETWEEN 2000 AND 7000;"},
    {"user_input": "List students who are in hostel.", "sql_query": "SELECT * FROM students WHERE hostel_status = 'Yes';"},
    {"user_input": "Find students who are day scholars.", "sql_query": "SELECT * FROM students WHERE hostel_status = 'No';"},
    {"user_input": "Get students who got a scholarship.", "sql_query": "SELECT * FROM students WHERE scholarship_status = 'Yes';"},
    {"user_input": "Show students who did not receive a scholarship.", "sql_query": "SELECT * FROM students WHERE scholarship_status = 'No';"},
    {"user_input": "Find students who participated in sports.", "sql_query": "SELECT * FROM students WHERE sports_participation = 'Yes';"},
    {"user_input": "Get students who have not taken part in any sports.", "sql_query": "SELECT * FROM students WHERE sports_participation = 'No';"},
    {"user_input": "List students who were disciplined for misconduct.", "sql_query": "SELECT * FROM students WHERE disciplinary_action = 'Yes';"},
    {"user_input": "Find all students who scored above 90 in English.", "sql_query": "SELECT * FROM students WHERE english_score > 90;"},
    {"user_input": "Get students who scored above 85 in English.", "sql_query": "SELECT * FROM students WHERE english_score > 85;"},
    {"user_input": "Find students who got exactly 75 in English.", "sql_query": "SELECT * FROM students WHERE english_score = 75;"},
    {"user_input": "List students with English scores between 70 and 85.", "sql_query": "SELECT * FROM students WHERE english_score BETWEEN 70 AND 85;"},
    {"user_input": "Give students who scored less than 50 in English.", "sql_query": "SELECT * FROM students WHERE english_score < 50;"},
    {"user_input": "Get students with more than 80 marks in both English and Science.", "sql_query": "SELECT * FROM students WHERE english_score > 80 AND science_score > 80;"},
    {"user_input": "Find students who have more than 70 marks in at least one subject.", "sql_query": "SELECT * FROM students WHERE english_score > 70 OR science_score > 70 OR math_score > 70;"},
    {"user_input": "Show students with roll numbers greater than 50.", "sql_query": "SELECT * FROM students WHERE roll_number > 50;"},
    {"user_input": "Get students with roll numbers between 40 and 60.", "sql_query": "SELECT * FROM students WHERE roll_number BETWEEN 40 AND 60;"},
    {"user_input": "Find students whose roll numbers are either 10, 20, or 30.", "sql_query": "SELECT * FROM students WHERE roll_number IN (10, 20, 30);"},
    {"user_input": "List students who have attendance greater than 80%.", "sql_query": "SELECT * FROM students WHERE attendance_percentage > 80;"},
    {"user_input": "Identify students with attendance between 50% and 75%.", "sql_query": "SELECT * FROM students WHERE attendance_percentage BETWEEN 50 AND 75;"},
    {"user_input": "Get students who have pending assignments.", "sql_query": "SELECT * FROM students WHERE pending_assignments > 0;"},
    {"user_input": "Find students who have no pending assignments.", "sql_query": "SELECT * FROM students WHERE pending_assignments = 0;"},
    {"user_input": "Get students who have participated in at least one extracurricular activity.", "sql_query": "SELECT * FROM students WHERE extracurricular_activities > 0;"},
    {"user_input": "Find students who have participated in more than two extracurricular activities.", "sql_query": "SELECT * FROM students WHERE extracurricular_activities > 2;"},
    {"user_input": "List students who have been absent for more than 10 days.", "sql_query": "SELECT * FROM students WHERE days_absent > 10;"},
    {"user_input": "Find students who have been absent between 5 and 10 days.", "sql_query": "SELECT * FROM students WHERE days_absent BETWEEN 5 AND 10;"},
    {"user_input": "Get students who have paid partial fees.", "sql_query": "SELECT * FROM students WHERE fees_due > 0 AND fees_due < total_fees;"},
    {"user_input": "Find students who have paid no fees at all.", "sql_query": "SELECT * FROM students WHERE fees_due = total_fees;"},
    {"user_input": "Give students who scored above 90 in English.", "sql_query": "SELECT * FROM students WHERE english_score > 90;"},
    {"user_input": "Find students who scored between 75 and 90 in English.", "sql_query": "SELECT * FROM students WHERE english_score BETWEEN 75 AND 90;"},
    {"user_input": "Select students who scored exactly 80 in English.", "sql_query": "SELECT * FROM students WHERE english_score = 80;"},
    {"user_input": "Find students who failed in Mathematics.", "sql_query": "SELECT * FROM students WHERE math_score < 40;"},
    {"user_input": "List students who passed in Mathematics.", "sql_query": "SELECT * FROM students WHERE math_score >= 40;"},
    {"user_input": "Find students who scored below 60 in Science.", "sql_query": "SELECT * FROM students WHERE science_score < 60;"},
    {"user_input": "Find students with attendance greater than 95%.", "sql_query": "SELECT * FROM students WHERE attendance_percentage > 95;"},
    {"user_input": "Select students with attendance between 80% and 95%.", "sql_query": "SELECT * FROM students WHERE attendance_percentage BETWEEN 80 AND 95;"},
    {"user_input": "Find students with exactly 75% attendance.", "sql_query": "SELECT * FROM students WHERE attendance_percentage = 75;"},
    {"user_input": "Find students who have more than 2 disciplinary actions.", "sql_query": "SELECT * FROM students WHERE disciplinary_actions > 2;"},
    {"user_input": "Fetch students who have no disciplinary actions.", "sql_query": "SELECT * FROM students WHERE disciplinary_actions = 0;"},
    {"user_input": "Find students who have borrowed more than 5 books from the library.", "sql_query": "SELECT * FROM students WHERE library_books_issued > 5;"},
    {"user_input": "Extract students who have borrowed between 2 and 5 books.", "sql_query": "SELECT * FROM students WHERE library_books_issued BETWEEN 2 AND 5;"},
    {"user_input": "Find students who have borrowed exactly 1 book.", "sql_query": "SELECT * FROM students WHERE library_books_issued = 1;"},
    {"user_input": "Select students whose first name contains 'Raj'.", "sql_query": "SELECT * FROM students WHERE first_name LIKE '%Raj%';"},
    {"user_input": "Find students whose last name starts with 'K'.", "sql_query": "SELECT * FROM students WHERE last_name LIKE 'K%';"},
    {"user_input": "Find students whose email contains 'university'.", "sql_query": "SELECT * FROM students WHERE email LIKE '%university%';"},
    {"user_input": "Select students whose email does not contain 'gmail'.", "sql_query": "SELECT * FROM students WHERE email NOT LIKE '%gmail%';"},
    {"user_input": "Find students who ranked top 5 in overall performance.", "sql_query": "SELECT * FROM students ORDER BY avg_score DESC LIMIT 5;"},
    {"user_input": "Provide students who ranked in the bottom 5 in overall performance.", "sql_query": "SELECT * FROM students ORDER BY avg_score ASC LIMIT 5;"},
    {"user_input": "Find students who live in 'Kolkata'.", "sql_query": "SELECT * FROM students WHERE city = 'Kolkata';"},
    {"user_input": "Find students who live outside 'Delhi'.", "sql_query": "SELECT * FROM students WHERE city != 'Delhi';"},
    {"user_input": "Find students who have at least 3 siblings.", "sql_query": "SELECT * FROM students WHERE num_of_siblings >= 3;"},
    {"user_input": "Get students who have no siblings.", "sql_query": "SELECT * FROM students WHERE num_of_siblings = 0;"},
    {"user_input": "Find students who take part in at least 1 extracurricular activity.", "sql_query": "SELECT * FROM students WHERE extracurricular_activities >= 1;"},
    {"user_input": "Give students who do not participate in any extracurricular activities.", "sql_query": "SELECT * FROM students WHERE extracurricular_activities = 0;"},
    {"user_input": "Find students who were born in the year 2008.", "sql_query": "SELECT * FROM students WHERE birth_year = 2008;"},
    {"user_input": "Identify students who were born before the year 2010.", "sql_query": "SELECT * FROM students WHERE birth_year < 2010;"},
    {"user_input": "Find students who were born after the year 2005.", "sql_query": "SELECT * FROM students WHERE birth_year > 2005;"},
    {"user_input": "Get students who received full scholarships.", "sql_query": "SELECT * FROM students WHERE scholarship_amount = total_fees;"},
    {"user_input": "Find students who received a scholarship of at least 50%.", "sql_query": "SELECT * FROM students WHERE scholarship_amount >= (total_fees / 2);"},
    {"user_input": "Retrieve students who did not receive any scholarship.", "sql_query": "SELECT * FROM students WHERE scholarship_amount = 0;"},
    {"user_input": "Find students who have pending fee payments greater than 10000.", "sql_query": "SELECT * FROM students WHERE fees_pending > 10000;"},
    {"user_input": "Find students who have pending fee payments less than 5000.", "sql_query": "SELECT * FROM students WHERE fees_pending < 5000;"},
    {"user_input": "Select students who have fully paid their tuition fees.", "sql_query": "SELECT * FROM students WHERE fees_pending = 0;"},
    {"user_input": "Find students who have secured first place in at least one subject.", "sql_query": "SELECT * FROM students WHERE subject_rank = 1;"},
    {"user_input": "Find students who have secured a rank lower than 5 in any subject.", "sql_query": "SELECT * FROM students WHERE subject_rank < 5;"},
    {"user_input": "Extract students who have secured a rank greater than 10 in any subject.", "sql_query": "SELECT * FROM students WHERE subject_rank > 10;"},
    {"user_input": "List students who have received at least 3 warnings for discipline violations.", "sql_query": "SELECT * FROM students WHERE disciplinary_warnings >= 3;"},
      {"user_input": "Create a table for students.", "sql_query": "CREATE TABLE students (id INT PRIMARY KEY, name VARCHAR(100), age INT, grade VARCHAR(10));"},
  {"user_input": "Make a student table with roll number, name, and marks.", "sql_query": "CREATE TABLE students (roll_number INT PRIMARY KEY, name VARCHAR(100), marks INT);"},
  {"user_input": "Generate a new table called students with student ID, full name, and date of birth.", "sql_query": "CREATE TABLE students (student_id INT PRIMARY KEY, full_name VARCHAR(100), dob DATE);"},
  {"user_input": "Build a table named student_data having fields for ID, Name, and Class.", "sql_query": "CREATE TABLE student_data (id INT PRIMARY KEY, name VARCHAR(100), class VARCHAR(10));"},
  {"user_input": "Design a student records table that stores roll, name, subject, and scores.", "sql_query": "CREATE TABLE student_records (roll INT PRIMARY KEY, name VARCHAR(100), subject VARCHAR(50), score FLOAT);"},
  {"user_input": "Make a database table for students, including roll number, name, age, and address.", "sql_query": "CREATE TABLE students (roll_number INT PRIMARY KEY, name VARCHAR(100), age INT, address VARCHAR(255));"},
  {"user_input": "Set up a student list table that holds student ID, email, and phone number.", "sql_query": "CREATE TABLE student_list (student_id INT PRIMARY KEY, email VARCHAR(255), phone VARCHAR(15));"},
  {"user_input": "Create a structure for student details where each student has an ID, name, and enrollment year.", "sql_query": "CREATE TABLE student_details (student_id INT PRIMARY KEY, name VARCHAR(100), enrollment_year INT);"},
  {"user_input": "Prepare a table named academic_students storing student ID, department, and percentage.", "sql_query": "CREATE TABLE academic_students (student_id INT PRIMARY KEY, department VARCHAR(50), percentage FLOAT);"},
  {"user_input": "Form a table to store student exam results, including roll number, subject, and marks obtained.", "sql_query": "CREATE TABLE student_exam_results (roll_number INT PRIMARY KEY, subject VARCHAR(50), marks INT);"},
  {"user_input": "Define a student profile table containing name, age, city, and country.", "sql_query": "CREATE TABLE student_profile (name VARCHAR(100), age INT, city VARCHAR(100), country VARCHAR(100));"},
  {"user_input": "Construct a students_info table including roll number, gender, and admission date.", "sql_query": "CREATE TABLE students_info (roll_number INT PRIMARY KEY, gender CHAR(1), admission_date DATE);"},
  {"user_input": "Build a database table to hold student information such as roll, name, address, and contact.", "sql_query": "CREATE TABLE student_info (roll_number INT PRIMARY KEY, name VARCHAR(100), address VARCHAR(255), contact VARCHAR(15));"},
  {"user_input": "Make a table where student records store their email, department, and passing year.", "sql_query": "CREATE TABLE student_records (email VARCHAR(255) PRIMARY KEY, department VARCHAR(50), passing_year INT);"},
  {"user_input": "Set up a student grades table that includes name, subject, and letter grade.", "sql_query": "CREATE TABLE student_grades (name VARCHAR(100), subject VARCHAR(50), grade CHAR(2));"},
  {"user_input": "Generate a student database table where each record has ID, first name, and last name.", "sql_query": "CREATE TABLE student_database (id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50));"},
  {"user_input": "Create a student_table with ID, address, phone, and date of birth.", "sql_query": "CREATE TABLE student_table (id INT PRIMARY KEY, address VARCHAR(255), phone VARCHAR(15), dob DATE);"},
  {"user_input": "Form a structured table where students have an ID, email, and registered courses.", "sql_query": "CREATE TABLE students_courses (student_id INT PRIMARY KEY, email VARCHAR(255), registered_courses TEXT);"},
  {"user_input": "Make an academic performance table to store roll number, CGPA, and year of study.", "sql_query": "CREATE TABLE academic_performance (roll_number INT PRIMARY KEY, cgpa FLOAT, year_of_study INT);"},
  {"user_input": "Construct a table for student attendance tracking with student ID, subject, and attendance percentage.", "sql_query": "CREATE TABLE student_attendance (student_id INT PRIMARY KEY, subject VARCHAR(50), attendance_percent FLOAT);"},
  {"user_input": "Define a table that keeps student extracurricular details with name, club, and position held.", "sql_query": "CREATE TABLE student_extracurricular (name VARCHAR(100), club VARCHAR(50), position VARCHAR(50));"},
  {"user_input": "Prepare a student loans table containing student ID, loan amount, and bank name.", "sql_query": "CREATE TABLE student_loans (student_id INT PRIMARY KEY, loan_amount DECIMAL(10,2), bank_name VARCHAR(100));"},
  {"user_input": "Set up a table called scholarship_students with student ID, scholarship type, and amount.", "sql_query": "CREATE TABLE scholarship_students (student_id INT PRIMARY KEY, scholarship_type VARCHAR(50), amount DECIMAL(10,2));"},
  {"user_input": "Make a student internship records table that includes roll number, company, and duration.", "sql_query": "CREATE TABLE student_internships (roll_number INT PRIMARY KEY, company VARCHAR(100), duration VARCHAR(20));"},
  {"user_input": "Create a table to track student participation in competitions with ID, event name, and rank.", "sql_query": "CREATE TABLE student_competitions (student_id INT PRIMARY KEY, event_name VARCHAR(100), rank INT);"},
  {"user_input": "Generate a table where each student entry contains an ID, research topic, and supervisor.", "sql_query": "CREATE TABLE student_research (student_id INT PRIMARY KEY, research_topic VARCHAR(255), supervisor VARCHAR(100));"},
  {"user_input": "Build a student payments table having ID, payment date, and amount paid.", "sql_query": "CREATE TABLE student_payments (student_id INT PRIMARY KEY, payment_date DATE, amount_paid DECIMAL(10,2));"},
  {"user_input": "Define a student medical records table that includes student ID, health condition, and last checkup date.", "sql_query": "CREATE TABLE student_medical (student_id INT PRIMARY KEY, health_condition TEXT, last_checkup DATE);"},
  {"user_input": "Make a student transport database where each record has ID, vehicle type, and route number.", "sql_query": "CREATE TABLE student_transport (student_id INT PRIMARY KEY, vehicle_type VARCHAR(50), route_number INT);"},
  {"user_input": "Prepare a table to store student hostel details, including roll number, room number, and block.", "sql_query": "CREATE TABLE student_hostel (roll_number INT PRIMARY KEY, room_number INT, block VARCHAR(20));"},
  {"user_input": "Construct a student mentorship table with ID, mentor name, and mentoring duration.", "sql_query": "CREATE TABLE student_mentorship (student_id INT PRIMARY KEY, mentor_name VARCHAR(100), mentoring_duration INT);"},
  {"user_input": "Create a table called student_feedback that keeps student ID, feedback text, and rating.", "sql_query": "CREATE TABLE student_feedback (student_id INT PRIMARY KEY, feedback TEXT, rating FLOAT);"},
  {"user_input": "Define a project group table where students have ID, project title, and submission date.", "sql_query": "CREATE TABLE project_groups (student_id INT PRIMARY KEY, project_title VARCHAR(255), submission_date DATE);"},
  {"user_input": "Make a student club registration table storing ID, club name, and joining year.", "sql_query": "CREATE TABLE student_club_registration (student_id INT PRIMARY KEY, club_name VARCHAR(100), joining_year INT);"},
  {"user_input": "Set up a volunteer work table for students with ID, organization, and role.", "sql_query": "CREATE TABLE student_volunteer (student_id INT PRIMARY KEY, organization VARCHAR(100), role VARCHAR(100));"},
  {"user_input": "Create a student table with student ID, full name, and birth date.", "sql_query": "CREATE TABLE students (student_id INT PRIMARY KEY, full_name VARCHAR(100), birth_date DATE);"},
  {"user_input": "Make a table named student_records storing ID, name, and marks.", "sql_query": "CREATE TABLE student_records (id INT PRIMARY KEY, name VARCHAR(100), marks INT);"},
  {"user_input": "Build a student list table that contains roll number, name, and percentage.", "sql_query": "CREATE TABLE student_list (roll_number INT PRIMARY KEY, name VARCHAR(100), percentage FLOAT);"},
  {"user_input": "Generate a database table called students with fields for roll, class, and grades.", "sql_query": "CREATE TABLE students (roll INT PRIMARY KEY, class VARCHAR(20), grades VARCHAR(10));"},
  {"user_input": "Prepare a structure to store student profiles having name, birth date, and age.", "sql_query": "CREATE TABLE student_profiles (name VARCHAR(100), birth_date DATE, age INT);"},
  {"user_input": "Make a table for student attendance tracking, including student ID, subject, and attendance count.", "sql_query": "CREATE TABLE student_attendance (student_id INT PRIMARY KEY, subject VARCHAR(50), attendance_count INT);"},
  {"user_input": "Set up a student achievements table with student ID, competition, and rank.", "sql_query": "CREATE TABLE student_achievements (student_id INT PRIMARY KEY, competition VARCHAR(100), rank INT);"},
  {"user_input": "Design a student feedback database that keeps ID, feedback text, and rating.", "sql_query": "CREATE TABLE student_feedback (student_id INT PRIMARY KEY, feedback TEXT, rating FLOAT);"},
  {"user_input": "Define a table to store student loan details with ID, bank name, and loan amount.", "sql_query": "CREATE TABLE student_loans (student_id INT PRIMARY KEY, bank_name VARCHAR(100), loan_amount DECIMAL(10,2));"},
  {"user_input": "Construct a database for student hostel allocation including ID, room number, and block.", "sql_query": "CREATE TABLE student_hostel (student_id INT PRIMARY KEY, room_number INT, block VARCHAR(50));"},
  {"user_input": "Make a table where each student entry has ID, name, and admission date.", "sql_query": "CREATE TABLE student_admission (student_id INT PRIMARY KEY, name VARCHAR(100), admission_date DATE);"},
  {"user_input": "Build a student course registration table that includes ID, course name, and credits.", "sql_query": "CREATE TABLE student_courses (student_id INT PRIMARY KEY, course_name VARCHAR(100), credits INT);"},
  {"user_input": "Create a student payments structure that stores ID, amount, and payment date.", "sql_query": "CREATE TABLE student_payments (student_id INT PRIMARY KEY, amount DECIMAL(10,2), payment_date DATE);"},
  {"user_input": "Generate a table where each record contains student ID, project title, and mentor.", "sql_query": "CREATE TABLE student_projects (student_id INT PRIMARY KEY, project_title VARCHAR(255), mentor VARCHAR(100));"},
  {"user_input": "Set up a mentorship tracking database including student ID, mentor name, and duration.", "sql_query": "CREATE TABLE student_mentorship (student_id INT PRIMARY KEY, mentor_name VARCHAR(100), duration INT);"},
  {"user_input": "Define a structure where students have roll number, phone number, and email.", "sql_query": "CREATE TABLE student_contact (roll_number INT PRIMARY KEY, phone_number VARCHAR(15), email VARCHAR(255));"},
  {"user_input": "Prepare a structured table for student exam results with ID, subject, and marks.", "sql_query": "CREATE TABLE student_exam_results (student_id INT PRIMARY KEY, subject VARCHAR(100), marks INT);"},
  {"user_input": "Form a database where students are assigned to groups with ID, group name, and leader.", "sql_query": "CREATE TABLE student_groups (student_id INT PRIMARY KEY, group_name VARCHAR(100), leader VARCHAR(100));"},
  {"user_input": "Create a table for tracking student scholarships including ID, type, and amount.", "sql_query": "CREATE TABLE student_scholarships (student_id INT PRIMARY KEY, scholarship_type VARCHAR(100), amount DECIMAL(10,2));"},
  {"user_input": "Construct a record system for student internships with ID, company, and role.", "sql_query": "CREATE TABLE student_internships (student_id INT PRIMARY KEY, company VARCHAR(100), role VARCHAR(100));"},
  {"user_input": "Make a sports activity database for students having ID, sport, and achievements.", "sql_query": "CREATE TABLE student_sports (student_id INT PRIMARY KEY, sport VARCHAR(100), achievements TEXT);"},
  {"user_input": "Build a structure where each student entry includes ID, department, and batch year.", "sql_query": "CREATE TABLE student_department (student_id INT PRIMARY KEY, department VARCHAR(100), batch_year INT);"},
  {"user_input": "Generate a student transportation log that contains ID, vehicle type, and route number.", "sql_query": "CREATE TABLE student_transportation (student_id INT PRIMARY KEY, vehicle_type VARCHAR(50), route_number INT);"},
  {"user_input": "Set up a structured table where students have ID, research topic, and supervisor.", "sql_query": "CREATE TABLE student_research (student_id INT PRIMARY KEY, research_topic VARCHAR(255), supervisor VARCHAR(100));"},
  {"user_input": "Make a structured database where students have ID, club name, and membership status.", "sql_query": "CREATE TABLE student_clubs (student_id INT PRIMARY KEY, club_name VARCHAR(100), membership_status VARCHAR(50));"},
  {"user_input": "Create a table for student medical records storing ID, condition, and last checkup.", "sql_query": "CREATE TABLE student_medical (student_id INT PRIMARY KEY, health_condition TEXT, last_checkup DATE);"},
  {"user_input": "Build a library membership database containing ID, books borrowed, and due date.", "sql_query": "CREATE TABLE student_library (student_id INT PRIMARY KEY, books_borrowed TEXT, due_date DATE);"},
  {"user_input": "Prepare a structured table where each student record has ID, visa status, and country.", "sql_query": "CREATE TABLE student_visa (student_id INT PRIMARY KEY, visa_status VARCHAR(50), country VARCHAR(100));"},
  {"user_input": "Make a tracking database where students have ID, research funding, and publication count.", "sql_query": "CREATE TABLE student_funding (student_id INT PRIMARY KEY, research_funding DECIMAL(10,2), publication_count INT);"},
  {"user_input": "Set up a social work record table that includes ID, organization, and volunteer hours.", "sql_query": "CREATE TABLE student_volunteer (student_id INT PRIMARY KEY, organization VARCHAR(100), volunteer_hours INT);"},
  {"user_input": "Generate a table where students have ID, emergency contact, and relationship.", "sql_query": "CREATE TABLE student_emergency_contact (student_id INT PRIMARY KEY, contact VARCHAR(100), relationship VARCHAR(50));"},
  {"user_input": "Build a structure for student behavior logs with ID, disciplinary action, and date.", "sql_query": "CREATE TABLE student_behavior (student_id INT PRIMARY KEY, disciplinary_action TEXT, date DATE);"},
  {"user_input": "Define a student attendance database that keeps ID, subject, and percentage.", "sql_query": "CREATE TABLE student_attendance (student_id INT PRIMARY KEY, subject VARCHAR(50), percentage FLOAT);"},
  {"user_input": "Form a financial aid table where students have ID, aid type, and approval status.", "sql_query": "CREATE TABLE student_financial_aid (student_id INT PRIMARY KEY, aid_type VARCHAR(100), approval_status VARCHAR(50));"},
  {"user_input": "Create a structured system for student training programs with ID, program name, and duration.", "sql_query": "CREATE TABLE student_training (student_id INT PRIMARY KEY, program_name VARCHAR(100), duration INT);"},
  {"user_input": "Create a table for students with sample data.", "sql_query": "CREATE TABLE students (id INT PRIMARY KEY, name VARCHAR(100), age INT, grade VARCHAR(5)); INSERT INTO students VALUES (1, 'John Doe', 20, 'A');"},
  {"user_input": "Make a student record system with a few entries.", "sql_query": "CREATE TABLE student_records (roll_no INT PRIMARY KEY, full_name VARCHAR(100), birth_year INT, department VARCHAR(50)); INSERT INTO student_records VALUES (101, 'Alice Smith', 2003, 'Computer Science');"},
  {"user_input": "Generate a structure for storing student grades with an example entry.", "sql_query": "CREATE TABLE student_grades (student_id INT PRIMARY KEY, subject VARCHAR(100), marks INT); INSERT INTO student_grades VALUES (1, 'Mathematics', 95);"},
  {"user_input": "Set up a database table to track student fees with sample data.", "sql_query": "CREATE TABLE student_fees (student_id INT PRIMARY KEY, total_fee DECIMAL(10,2), paid_amount DECIMAL(10,2)); INSERT INTO student_fees VALUES (1, 50000.00, 25000.00);"},
  {"user_input": "Build a student attendance system with an example record.", "sql_query": "CREATE TABLE student_attendance (student_id INT PRIMARY KEY, subject VARCHAR(50), days_present INT); INSERT INTO student_attendance VALUES (1, 'Physics', 28);"},
  {"user_input": "Define a table for student hostel allocation with a sample entry.", "sql_query": "CREATE TABLE student_hostel (student_id INT PRIMARY KEY, hostel_name VARCHAR(50), room_number INT); INSERT INTO student_hostel VALUES (1, 'Maple Hostel', 202);"},
  {"user_input": "Create a structure for tracking student research with a sample row.", "sql_query": "CREATE TABLE student_research (student_id INT PRIMARY KEY, research_topic VARCHAR(255), supervisor VARCHAR(100)); INSERT INTO student_research VALUES (1, 'AI in Healthcare', 'Dr. Smith');"},
  {"user_input": "Generate a database for student achievements with example data.", "sql_query": "CREATE TABLE student_achievements (student_id INT PRIMARY KEY, event VARCHAR(100), position VARCHAR(10)); INSERT INTO student_achievements VALUES (1, 'Hackathon', 'Winner');"},
  {"user_input": "Make a student medical record system with an example row.", "sql_query": "CREATE TABLE student_medical (student_id INT PRIMARY KEY, health_condition TEXT, last_checkup DATE); INSERT INTO student_medical VALUES (1, 'Asthma', '2024-01-15');"},
  {"user_input": "Form a table for student club memberships with sample data.", "sql_query": "CREATE TABLE student_clubs (student_id INT PRIMARY KEY, club_name VARCHAR(100), role VARCHAR(50)); INSERT INTO student_clubs VALUES (1, 'Coding Club', 'Member');"},
  {"user_input": "Create a student record for Alex, aged 19, in Physics.", "sql_query": "CREATE TABLE student_records (id INT PRIMARY KEY, name VARCHAR(100), age INT, major VARCHAR(50)); INSERT INTO student_records VALUES (1, 'Alex Johnson', 19, 'Physics');"},
  {"user_input": "Make a table for students and insert Lisa, age 21, in Math.", "sql_query": "CREATE TABLE student_info (id INT PRIMARY KEY, full_name VARCHAR(100), age INT, course VARCHAR(100)); INSERT INTO student_info VALUES (1, 'Lisa White', 21, 'Mathematics');"},
  {"user_input": "Create a student fee structure and add entry for Tom who paid $2000.", "sql_query": "CREATE TABLE student_fees (student_id INT PRIMARY KEY, total_fee DECIMAL(10,2), paid_amount DECIMAL(10,2)); INSERT INTO student_fees VALUES (1, 5000.00, 2000.00);"},
  {"user_input": "Make a grade record table and add Jake's 88 in Chemistry.", "sql_query": "CREATE TABLE student_grades (student_id INT PRIMARY KEY, subject VARCHAR(100), marks INT); INSERT INTO student_grades VALUES (1, 'Chemistry', 88);"},
  {"user_input": "Set up an attendance system and add Alex's 30 days present in English.", "sql_query": "CREATE TABLE student_attendance (student_id INT PRIMARY KEY, subject VARCHAR(100), days_present INT); INSERT INTO student_attendance VALUES (1, 'English', 30);"},
  {"user_input": "Create a project submission table and insert Mia's AI project under Dr. Lee.", "sql_query": "CREATE TABLE student_projects (student_id INT PRIMARY KEY, project_title VARCHAR(255), mentor VARCHAR(100)); INSERT INTO student_projects VALUES (1, 'AI Chatbot', 'Dr. Lee');"},
  {"user_input": "Define a scholarship structure and insert Ben with $5000 merit scholarship.", "sql_query": "CREATE TABLE student_scholarships (student_id INT PRIMARY KEY, scholarship_type VARCHAR(100), amount DECIMAL(10,2)); INSERT INTO student_scholarships VALUES (1, 'Merit-Based', 5000.00);"},
  {"user_input": "Generate a transportation log and add Sara's bus number 42.", "sql_query": "CREATE TABLE student_transportation (student_id INT PRIMARY KEY, vehicle_type VARCHAR(50), route_number INT); INSERT INTO student_transportation VALUES (1, 'Bus', 42);"},
  {"user_input": "Make a medical record table and add John's allergy to peanuts.", "sql_query": "CREATE TABLE student_medical (student_id INT PRIMARY KEY, health_condition TEXT, last_checkup DATE); INSERT INTO student_medical VALUES (1, 'Peanut Allergy', '2024-05-10');"},
  {"user_input": "Create a volunteer work database and insert Emily's 20 hours at Red Cross.", "sql_query": "CREATE TABLE student_volunteer (student_id INT PRIMARY KEY, organization VARCHAR(100), volunteer_hours INT); INSERT INTO student_volunteer VALUES (1, 'Red Cross', 20);"},
  {"user_input": "Make a table for students who borrowed library books and add Max with 'Data Science' due next week.", "sql_query": "CREATE TABLE student_library (student_id INT PRIMARY KEY, books_borrowed TEXT, due_date DATE); INSERT INTO student_library VALUES (1, 'Data Science', '2024-06-15');"},
  {"user_input": "Build a behavior tracking system and add Leo’s late submission warning.", "sql_query": "CREATE TABLE student_behavior (student_id INT PRIMARY KEY, disciplinary_action TEXT, date DATE); INSERT INTO student_behavior VALUES (1, 'Late Submission Warning', '2024-04-05');"},
  {"user_input": "Create an emergency contact table and add David’s mother as primary contact.", "sql_query": "CREATE TABLE student_emergency_contact (student_id INT PRIMARY KEY, contact VARCHAR(100), relationship VARCHAR(50)); INSERT INTO student_emergency_contact VALUES (1, 'Sarah Williams', 'Mother');"},
  {"user_input": "Form a financial aid database and insert Sophia’s application for need-based aid.", "sql_query": "CREATE TABLE student_financial_aid (student_id INT PRIMARY KEY, aid_type VARCHAR(100), approval_status VARCHAR(50)); INSERT INTO student_financial_aid VALUES (1, 'Need-Based', 'Approved');"},
  {"user_input": "Define a student training program table and add Kevin's entry in Cyber Security bootcamp.", "sql_query": "CREATE TABLE student_training (student_id INT PRIMARY KEY, program_name VARCHAR(100), duration INT); INSERT INTO student_training VALUES (1, 'Cyber Security Bootcamp', 6);"},
  {"user_input": "Create a database table for students with default values.", "sql_query": "CREATE TABLE students (id INT PRIMARY KEY, name VARCHAR(100), age INT, department VARCHAR(50)); INSERT INTO students VALUES (1, 'John Doe', 20, 'Physics');"},
  {"user_input": "Make a student information system with sample data.", "sql_query": "CREATE TABLE student_info (student_id INT PRIMARY KEY, full_name VARCHAR(100), birth_year INT, major VARCHAR(50)); INSERT INTO student_info VALUES (101, 'Alice Brown', 2001, 'Mathematics');"},
  {"user_input": "Generate a structure for tracking student marks with a demo entry.", "sql_query": "CREATE TABLE student_marks (student_id INT PRIMARY KEY, subject VARCHAR(100), marks INT); INSERT INTO student_marks VALUES (1, 'Computer Science', 89);"},
  {"user_input": "Set up a student enrollment table with sample records.", "sql_query": "CREATE TABLE student_enrollment (student_id INT PRIMARY KEY, course_name VARCHAR(100), semester INT); INSERT INTO student_enrollment VALUES (1, 'Machine Learning', 2);"},
  {"user_input": "Build a database for student library access with sample data.", "sql_query": "CREATE TABLE student_library (student_id INT PRIMARY KEY, book_title VARCHAR(255), return_date DATE); INSERT INTO student_library VALUES (1, 'Data Science Handbook', '2024-08-12');"},
  {"user_input": "Define a student sports participation record with an example.", "sql_query": "CREATE TABLE student_sports (student_id INT PRIMARY KEY, sport_name VARCHAR(100), position VARCHAR(50)); INSERT INTO student_sports VALUES (1, 'Basketball', 'Captain');"},
  {"user_input": "Create a student disciplinary action table with sample values.", "sql_query": "CREATE TABLE student_discipline (student_id INT PRIMARY KEY, issue TEXT, resolution TEXT); INSERT INTO student_discipline VALUES (1, 'Late Assignment', 'Warning Issued');"},
  {"user_input": "Generate a database for student internships with an example.", "sql_query": "CREATE TABLE student_internships (student_id INT PRIMARY KEY, company VARCHAR(100), duration INT); INSERT INTO student_internships VALUES (1, 'Google', 6);"},
  {"user_input": "Make a table for student club members with a sample row.", "sql_query": "CREATE TABLE student_clubs (student_id INT PRIMARY KEY, club_name VARCHAR(100), role VARCHAR(50)); INSERT INTO student_clubs VALUES (1, 'Music Club', 'Vice President');"},
  {"user_input": "Form a database to track student travel records with example values.", "sql_query": "CREATE TABLE student_travel (student_id INT PRIMARY KEY, destination VARCHAR(100), purpose VARCHAR(50)); INSERT INTO student_travel VALUES (1, 'Berlin', 'Exchange Program');"},
  {"user_input": "Create a student record for Michael, 22 years old, in AI specialization.", "sql_query": "CREATE TABLE student_records (id INT PRIMARY KEY, name VARCHAR(100), age INT, specialization VARCHAR(50)); INSERT INTO student_records VALUES (1, 'Michael Scott', 22, 'Artificial Intelligence');"},
  {"user_input": "Make a table for students and insert Sophie, age 20, in Biotechnology.", "sql_query": "CREATE TABLE student_info (id INT PRIMARY KEY, full_name VARCHAR(100), age INT, course VARCHAR(100)); INSERT INTO student_info VALUES (1, 'Sophie Green', 20, 'Biotechnology');"},
  {"user_input": "Create a student attendance record and add James with 95% attendance.", "sql_query": "CREATE TABLE student_attendance (student_id INT PRIMARY KEY, subject VARCHAR(100), attendance_percent DECIMAL(5,2)); INSERT INTO student_attendance VALUES (1, 'Physics', 95.00);"},
  {"user_input": "Make a student grade system and add Emily’s A+ in Chemistry.", "sql_query": "CREATE TABLE student_grades (student_id INT PRIMARY KEY, subject VARCHAR(100), grade CHAR(2)); INSERT INTO student_grades VALUES (1, 'Chemistry', 'A+');"},
  {"user_input": "Define a student fee payment table and add Robert with $1500 paid.", "sql_query": "CREATE TABLE student_fees (student_id INT PRIMARY KEY, total_fee DECIMAL(10,2), amount_paid DECIMAL(10,2)); INSERT INTO student_fees VALUES (1, 5000.00, 1500.00);"},
  {"user_input": "Create a volunteer activity table and insert Ava with 40 hours at UNICEF.", "sql_query": "CREATE TABLE student_volunteer (student_id INT PRIMARY KEY, organization VARCHAR(100), hours INT); INSERT INTO student_volunteer VALUES (1, 'UNICEF', 40);"},
  {"user_input": "Define a table for student career counseling and add Oliver’s mentor as Dr. Roberts.", "sql_query": "CREATE TABLE student_counseling (student_id INT PRIMARY KEY, mentor VARCHAR(100), session_count INT); INSERT INTO student_counseling VALUES (1, 'Dr. Roberts', 5);"},
  {"user_input": "Create a transportation record for students and add Noah's bus route as 25B.", "sql_query": "CREATE TABLE student_transport (student_id INT PRIMARY KEY, vehicle_type VARCHAR(50), route VARCHAR(10)); INSERT INTO student_transport VALUES (1, 'Bus', '25B');"},
  {"user_input": "Make a health insurance database and add Amelia’s policy number 789123.", "sql_query": "CREATE TABLE student_health_insurance (student_id INT PRIMARY KEY, policy_number VARCHAR(50), provider VARCHAR(100)); INSERT INTO student_health_insurance VALUES (1, '789123', 'Blue Shield');"},
  {"user_input": "Set up a record for students participating in research and add Ethan working on Quantum Computing under Dr. Lee.", "sql_query": "CREATE TABLE student_research (student_id INT PRIMARY KEY, research_topic VARCHAR(255), professor VARCHAR(100)); INSERT INTO student_research VALUES (1, 'Quantum Computing', 'Dr. Lee');"},
  {"user_input": "Build a scholarship database and add Mia’s $5000 STEM scholarship.", "sql_query": "CREATE TABLE student_scholarships (student_id INT PRIMARY KEY, scholarship_name VARCHAR(100), amount DECIMAL(10,2)); INSERT INTO student_scholarships VALUES (1, 'STEM Excellence', 5000.00);"},
  {"user_input": "Form a database for student exchange programs and add Liam who went to Japan.", "sql_query": "CREATE TABLE student_exchange (student_id INT PRIMARY KEY, country VARCHAR(100), duration_months INT); INSERT INTO student_exchange VALUES (1, 'Japan', 6);"},
  {"user_input": "Generate a loan record table and add Ava’s $10,000 student loan.", "sql_query": "CREATE TABLE student_loans (student_id INT PRIMARY KEY, loan_type VARCHAR(100), amount DECIMAL(10,2)); INSERT INTO student_loans VALUES (1, 'Federal Loan', 10000.00);"},
  {"user_input": "Create a student leadership table and add Jake as Student Council President.", "sql_query": "CREATE TABLE student_leadership (student_id INT PRIMARY KEY, role VARCHAR(100), term_years INT); INSERT INTO student_leadership VALUES (1, 'Student Council President', 2);"},
  {"user_input": "Build a parent contact table and add Noah’s mother, Sarah Johnson.", "sql_query": "CREATE TABLE student_parent_contact (student_id INT PRIMARY KEY, parent_name VARCHAR(100), relation VARCHAR(50)); INSERT INTO student_parent_contact VALUES (1, 'Sarah Johnson', 'Mother');"},
  {"user_input": "Remove all records of students who have graduated.", "sql_query": "DELETE FROM students WHERE graduation_year <= YEAR(CURDATE()) - 1;"},
  {"user_input": "Delete student records for those who dropped out.", "sql_query": "DELETE FROM students WHERE status = 'Dropped Out';"},
  {"user_input": "Erase students who have been inactive for 5 years.", "sql_query": "DELETE FROM students WHERE last_active < DATE_SUB(CURDATE(), INTERVAL 5 YEAR);"},
  {"user_input": "Remove all student entries with NULL names.", "sql_query": "DELETE FROM students WHERE name IS NULL;"},
  {"user_input": "Delete records of students who failed all subjects.", "sql_query": "DELETE FROM students WHERE id IN (SELECT student_id FROM student_marks GROUP BY student_id HAVING SUM(marks) = 0);"},
  {"user_input": "Delete the record of student with ID 105.", "sql_query": "DELETE FROM students WHERE id = 105;"},
  {"user_input": "Remove student entry where the ID is 999.", "sql_query": "DELETE FROM students WHERE id = 999;"},
  {"user_input": "Erase student with roll number 250.", "sql_query": "DELETE FROM students WHERE roll_no = 250;"},
  {"user_input": "Delete student whose student number is 87456.", "sql_query": "DELETE FROM students WHERE student_number = 87456;"},
  {"user_input": "Remove the student with admission number 3021.", "sql_query": "DELETE FROM students WHERE admission_no = 3021;"},
  {"user_input": "Remove all students who are older than 30.", "sql_query": "DELETE FROM students WHERE age > 30;"},
  {"user_input": "Erase students who never enrolled in any course.", "sql_query": "DELETE FROM students WHERE id NOT IN (SELECT student_id FROM student_enrollment);"},
  {"user_input": "Delete students who failed at least 3 subjects.", "sql_query": "DELETE FROM students WHERE id IN (SELECT student_id FROM student_marks GROUP BY student_id HAVING COUNT(subject) >= 3 AND SUM(marks) < 40);"},
  {"user_input": "Remove students who have not paid their fees.", "sql_query": "DELETE FROM students WHERE id IN (SELECT student_id FROM student_fees WHERE amount_paid = 0);"},
  {"user_input": "Erase students who never attended any lectures.", "sql_query": "DELETE FROM students WHERE id NOT IN (SELECT student_id FROM student_attendance WHERE attendance_percent > 0);"},
  {"user_input": "Delete record of the student named 'John Doe'.", "sql_query": "DELETE FROM students WHERE name = 'John Doe';"},
  {"user_input": "Remove student whose name is 'Alice Brown'.", "sql_query": "DELETE FROM students WHERE name = 'Alice Brown';"},
  {"user_input": "Erase student entry for 'Michael Scott'.", "sql_query": "DELETE FROM students WHERE name = 'Michael Scott';"},
  {"user_input": "Delete the student named 'Sophie Green'.", "sql_query": "DELETE FROM students WHERE name = 'Sophie Green';"},
  {"user_input": "Remove student with the name 'James Smith'.", "sql_query": "DELETE FROM students WHERE name = 'James Smith';"},
  {"user_input": "Delete all students from the Mathematics department.", "sql_query": "DELETE FROM students WHERE department = 'Mathematics';"},
  {"user_input": "Remove students studying Physics.", "sql_query": "DELETE FROM students WHERE department = 'Physics';"},
  {"user_input": "Erase records of students from the Biotechnology field.", "sql_query": "DELETE FROM students WHERE department = 'Biotechnology';"},
  {"user_input": "Delete student entries from the Engineering stream.", "sql_query": "DELETE FROM students WHERE department = 'Engineering';"},
  {"user_input": "Remove all students from the Arts division.", "sql_query": "DELETE FROM students WHERE department = 'Arts';"},
  {"user_input": "Delete students admitted before 2010.", "sql_query": "DELETE FROM students WHERE admission_year < 2010;"},
  {"user_input": "Remove students who registered in the 2005 batch.", "sql_query": "DELETE FROM students WHERE batch = 2005;"},
  {"user_input": "Erase records of students who passed out before 2000.", "sql_query": "DELETE FROM students WHERE graduation_year < 2000;"},
  {"user_input": "Delete students whose enrollment date is before 1995.", "sql_query": "DELETE FROM students WHERE enrollment_date < '1995-01-01';"},
  {"user_input": "Remove students whose last login was before 2015.", "sql_query": "DELETE FROM students WHERE last_login < '2015-01-01';"},
  {"user_input": "Delete students who never received a scholarship.", "sql_query": "DELETE FROM students WHERE id NOT IN (SELECT student_id FROM student_scholarships);"},
  {"user_input": "Remove students with unpaid tuition fees.", "sql_query": "DELETE FROM students WHERE id IN (SELECT student_id FROM student_fees WHERE amount_paid = 0);"},
  {"user_input": "Erase students who took loans but did not pay any installments.", "sql_query": "DELETE FROM students WHERE id IN (SELECT student_id FROM student_loans WHERE paid_amount = 0);"},
  {"user_input": "Delete students who received financial aid but did not complete their course.", "sql_query": "DELETE FROM students WHERE id IN (SELECT student_id FROM student_scholarships WHERE status = 'Dropped Out');"},
  {"user_input": "Remove students whose bank details are missing.", "sql_query": "DELETE FROM students WHERE bank_account IS NULL;"},
  {"user_input": "Delete the student record in row 3, column 5.", "sql_query": "DELETE FROM students WHERE id = (SELECT id FROM students LIMIT 1 OFFSET 2);"},
  {"user_input": "Remove entry at 10th row, 2nd column.", "sql_query": "DELETE FROM students WHERE id = (SELECT id FROM students LIMIT 1 OFFSET 9);"},
  {"user_input": "Erase student from row 15, column 3.", "sql_query": "DELETE FROM students WHERE id = (SELECT id FROM students LIMIT 1 OFFSET 14);"},
  {"user_input": "Delete student at row 1, column 1.", "sql_query": "DELETE FROM students WHERE id = (SELECT id FROM students LIMIT 1 OFFSET 0);"},
  {"user_input": "Remove the last student entry.", "sql_query": "DELETE FROM students WHERE id = (SELECT id FROM students ORDER BY id DESC LIMIT 1);"},
  {"user_input": "Erase student from row 20, column 4.", "sql_query": "DELETE FROM students WHERE id = (SELECT id FROM students LIMIT 1 OFFSET 19);"},
  {"user_input": "Delete the second student record.", "sql_query": "DELETE FROM students WHERE id = (SELECT id FROM students LIMIT 1 OFFSET 1);"},
  {"user_input": "Remove student record from row 5, column 3.", "sql_query": "DELETE FROM students WHERE id = (SELECT id FROM students LIMIT 1 OFFSET 4);"},
  {"user_input": "Delete the 7th entry in the student table.", "sql_query": "DELETE FROM students WHERE id = (SELECT id FROM students LIMIT 1 OFFSET 6);"},
  {"user_input": "Erase the record from 8th row, 4th column.", "sql_query": "DELETE FROM students WHERE id = (SELECT id FROM students LIMIT 1 OFFSET 7);"},
  {"user_input": "Delete student data at row 30, column 2.", "sql_query": "DELETE FROM students WHERE id = (SELECT id FROM students LIMIT 1 OFFSET 29);"},
  {"user_input": "Remove the 25th row student.", "sql_query": "DELETE FROM students WHERE id = (SELECT id FROM students LIMIT 1 OFFSET 24);"},
  {"user_input": "Erase student entry at row 50.", "sql_query": "DELETE FROM students WHERE id = (SELECT id FROM students LIMIT 1 OFFSET 49);"},
  {"user_input": "Delete student from row 40, column 1.", "sql_query": "DELETE FROM students WHERE id = (SELECT id FROM students LIMIT 1 OFFSET 39);"},
  {"user_input": "Remove student in the last row of the table.", "sql_query": "DELETE FROM students WHERE id = (SELECT id FROM students ORDER BY id DESC LIMIT 1);"},
  {"user_input": "Delete the first occurrence where marks is 50.", "sql_query": "DELETE FROM students WHERE marks = 50 LIMIT 1;"},
  {"user_input": "Remove all students who scored exactly 50 marks.", "sql_query": "DELETE FROM students WHERE marks = 50;"},
  {"user_input": "Erase students with roll numbers below 20.", "sql_query": "DELETE FROM students WHERE roll_no < 20;"},
  {"user_input": "Delete all students whose attendance is below 40%.", "sql_query": "DELETE FROM students WHERE attendance_percent < 40;"},
  {"user_input": "Remove records where student names start with 'A'.", "sql_query": "DELETE FROM students WHERE name LIKE 'A%';"},
  {"user_input": "Erase student records where age is greater than 30.", "sql_query": "DELETE FROM students WHERE age > 30;"},
  {"user_input": "Delete students who registered before 2010.", "sql_query": "DELETE FROM students WHERE admission_year < 2010;"},
  {"user_input": "Remove all students who failed in Mathematics.", "sql_query": "DELETE FROM students WHERE id IN (SELECT student_id FROM student_marks WHERE subject = 'Mathematics' AND marks < 40);"},
  {"user_input": "Erase records where the last login was before 2015.", "sql_query": "DELETE FROM students WHERE last_login < '2015-01-01';"},
  {"user_input": "Delete students whose fees are still unpaid.", "sql_query": "DELETE FROM students WHERE id IN (SELECT student_id FROM student_fees WHERE amount_paid = 0);"},
  {"user_input": "Remove students who dropped out of college.", "sql_query": "DELETE FROM students WHERE status = 'Dropped Out';"},
  {"user_input": "Erase records where students have never attended classes.", "sql_query": "DELETE FROM students WHERE id NOT IN (SELECT student_id FROM student_attendance WHERE attendance_percent > 0);"},
  {"user_input": "Delete students who never received a scholarship.", "sql_query": "DELETE FROM students WHERE id NOT IN (SELECT student_id FROM student_scholarships);"},
  {"user_input": "Remove students who failed at least 3 subjects.", "sql_query": "DELETE FROM students WHERE id IN (SELECT student_id FROM student_marks GROUP BY student_id HAVING COUNT(subject) >= 3 AND SUM(marks) < 40);"},
  {"user_input": "Delete the last student who joined the college.", "sql_query": "DELETE FROM students WHERE id = (SELECT id FROM students ORDER BY admission_year DESC LIMIT 1);"},
  {"user_input": "Erase student record where bank details are missing.", "sql_query": "DELETE FROM students WHERE bank_account IS NULL;"},
  {"user_input": "Delete students with duplicate email addresses.", "sql_query": "DELETE FROM students WHERE email IN (SELECT email FROM (SELECT email, COUNT(*) AS count FROM students GROUP BY email HAVING count > 1) AS duplicate_emails);"},
  {"user_input": "Remove all students who never enrolled in a course.", "sql_query": "DELETE FROM students WHERE id NOT IN (SELECT student_id FROM student_enrollment);"},
  {"user_input": "Erase students whose grades are NULL.", "sql_query": "DELETE FROM students WHERE grade IS NULL;"},
  {"user_input": "Delete records where admission number is repeated.", "sql_query": "DELETE FROM students WHERE admission_no IN (SELECT admission_no FROM (SELECT admission_no, COUNT(*) AS count FROM students GROUP BY admission_no HAVING count > 1) AS duplicate_admissions);"},
  {"user_input": "Delete the student whose roll number is 5.", "sql_query": "DELETE FROM student_marks WHERE roll_no = 5; DELETE FROM student_attendance WHERE roll_no = 5; DELETE FROM student_fees WHERE roll_no = 5; DELETE FROM students WHERE roll_no = 5;"},
  {"user_input": "Remove student with roll number 10.", "sql_query": "DELETE FROM student_marks WHERE roll_no = 10; DELETE FROM student_attendance WHERE roll_no = 10; DELETE FROM student_fees WHERE roll_no = 10; DELETE FROM students WHERE roll_no = 10;"},
  {"user_input": "Erase student record for roll 25.", "sql_query": "DELETE FROM student_marks WHERE roll_no = 25; DELETE FROM student_attendance WHERE roll_no = 25; DELETE FROM student_fees WHERE roll_no = 25; DELETE FROM students WHERE roll_no = 25;"},
  {"user_input": "Delete student details of roll number 50.", "sql_query": "DELETE FROM student_marks WHERE roll_no = 50; DELETE FROM student_attendance WHERE roll_no = 50; DELETE FROM student_fees WHERE roll_no = 50; DELETE FROM students WHERE roll_no = 50;"},
  {"user_input": "Remove records of student with roll 15.", "sql_query": "DELETE FROM student_marks WHERE roll_no = 15; DELETE FROM student_attendance WHERE roll_no = 15; DELETE FROM student_fees WHERE roll_no = 15; DELETE FROM students WHERE roll_no = 15;"},
  {"user_input": "Delete all records of student named 'Amit Kumar'.", "sql_query": "DELETE FROM student_marks WHERE roll_no IN (SELECT roll_no FROM students WHERE name = 'Amit Kumar'); DELETE FROM student_attendance WHERE roll_no IN (SELECT roll_no FROM students WHERE name = 'Amit Kumar'); DELETE FROM student_fees WHERE roll_no IN (SELECT roll_no FROM students WHERE name = 'Amit Kumar'); DELETE FROM students WHERE name = 'Amit Kumar';"},
  {"user_input": "Remove student data where name is 'Pooja Singh'.", "sql_query": "DELETE FROM student_marks WHERE roll_no IN (SELECT roll_no FROM students WHERE name = 'Pooja Singh'); DELETE FROM student_attendance WHERE roll_no IN (SELECT roll_no FROM students WHERE name = 'Pooja Singh'); DELETE FROM student_fees WHERE roll_no IN (SELECT roll_no FROM students WHERE name = 'Pooja Singh'); DELETE FROM students WHERE name = 'Pooja Singh';"},
  {"user_input": "Erase student information for 'Rahul Sharma'.", "sql_query": "DELETE FROM student_marks WHERE roll_no IN (SELECT roll_no FROM students WHERE name = 'Rahul Sharma'); DELETE FROM student_attendance WHERE roll_no IN (SELECT roll_no FROM students WHERE name = 'Rahul Sharma'); DELETE FROM student_fees WHERE roll_no IN (SELECT roll_no FROM students WHERE name = 'Rahul Sharma'); DELETE FROM students WHERE name = 'Rahul Sharma';"},
  {"user_input": "Delete all students who dropped out.", "sql_query": "DELETE FROM student_marks WHERE roll_no IN (SELECT roll_no FROM students WHERE status = 'Dropped Out'); DELETE FROM student_attendance WHERE roll_no IN (SELECT roll_no FROM students WHERE status = 'Dropped Out'); DELETE FROM student_fees WHERE roll_no IN (SELECT roll_no FROM students WHERE status = 'Dropped Out'); DELETE FROM students WHERE status = 'Dropped Out';"},
  {"user_input": "Remove students who left college before 2020.", "sql_query": "DELETE FROM student_marks WHERE roll_no IN (SELECT roll_no FROM students WHERE leaving_year < 2020); DELETE FROM student_attendance WHERE roll_no IN (SELECT roll_no FROM students WHERE leaving_year < 2020); DELETE FROM student_fees WHERE roll_no IN (SELECT roll_no FROM students WHERE leaving_year < 2020); DELETE FROM students WHERE leaving_year < 2020;"},
  {"user_input": "Erase students who never paid any fees.", "sql_query": "DELETE FROM student_marks WHERE roll_no IN (SELECT roll_no FROM students WHERE roll_no NOT IN (SELECT roll_no FROM student_fees)); DELETE FROM student_attendance WHERE roll_no IN (SELECT roll_no FROM students WHERE roll_no NOT IN (SELECT roll_no FROM student_fees)); DELETE FROM students WHERE roll_no NOT IN (SELECT roll_no FROM student_fees);"},
  {"user_input": "Delete all students whose fees are unpaid.", "sql_query": "DELETE FROM student_marks WHERE roll_no IN (SELECT roll_no FROM student_fees WHERE amount_paid = 0); DELETE FROM student_attendance WHERE roll_no IN (SELECT roll_no FROM student_fees WHERE amount_paid = 0); DELETE FROM students WHERE roll_no IN (SELECT roll_no FROM student_fees WHERE amount_paid = 0);"},
  {"user_input": "Remove students who failed in more than 3 subjects.", "sql_query": "DELETE FROM student_marks WHERE roll_no IN (SELECT roll_no FROM student_marks GROUP BY roll_no HAVING COUNT(subject) >= 3 AND SUM(marks) < 40); DELETE FROM student_attendance WHERE roll_no IN (SELECT roll_no FROM student_marks GROUP BY roll_no HAVING COUNT(subject) >= 3 AND SUM(marks) < 40); DELETE FROM student_fees WHERE roll_no IN (SELECT roll_no FROM student_marks GROUP BY roll_no HAVING COUNT(subject) >= 3 AND SUM(marks) < 40); DELETE FROM students WHERE roll_no IN (SELECT roll_no FROM student_marks GROUP BY roll_no HAVING COUNT(subject) >= 3 AND SUM(marks) < 40);"},
  {"user_input": "Delete students who enrolled before 2015.", "sql_query": "DELETE FROM student_marks WHERE roll_no IN (SELECT roll_no FROM students WHERE admission_year < 2015); DELETE FROM student_attendance WHERE roll_no IN (SELECT roll_no FROM students WHERE admission_year < 2015); DELETE FROM student_fees WHERE roll_no IN (SELECT roll_no FROM students WHERE admission_year < 2015); DELETE FROM students WHERE admission_year < 2015;"},
  {"user_input": "Erase students who joined before 2010.", "sql_query": "DELETE FROM student_marks WHERE roll_no IN (SELECT roll_no FROM students WHERE admission_year < 2010); DELETE FROM student_attendance WHERE roll_no IN (SELECT roll_no FROM students WHERE admission_year < 2010); DELETE FROM student_fees WHERE roll_no IN (SELECT roll_no FROM students WHERE admission_year < 2010); DELETE FROM students WHERE admission_year < 2010;"},
  {"user_input": "Remove all students enrolled in 'Computer Science'.", "sql_query": "DELETE FROM student_marks WHERE roll_no IN (SELECT roll_no FROM students WHERE course = 'Computer Science'); DELETE FROM student_attendance WHERE roll_no IN (SELECT roll_no FROM students WHERE course = 'Computer Science'); DELETE FROM student_fees WHERE roll_no IN (SELECT roll_no FROM students WHERE course = 'Computer Science'); DELETE FROM students WHERE course = 'Computer Science';"},
  {"user_input": "Delete records of students studying 'Mathematics'.", "sql_query": "DELETE FROM student_marks WHERE roll_no IN (SELECT roll_no FROM students WHERE course = 'Mathematics'); DELETE FROM student_attendance WHERE roll_no IN (SELECT roll_no FROM students WHERE course = 'Mathematics'); DELETE FROM student_fees WHERE roll_no IN (SELECT roll_no FROM students WHERE course = 'Mathematics'); DELETE FROM students WHERE course = 'Mathematics';"},
  {"user_input": "Erase all students from 'Delhi'.", "sql_query": "DELETE FROM student_marks WHERE roll_no IN (SELECT roll_no FROM students WHERE city = 'Delhi'); DELETE FROM student_attendance WHERE roll_no IN (SELECT roll_no FROM students WHERE city = 'Delhi'); DELETE FROM student_fees WHERE roll_no IN (SELECT roll_no FROM students WHERE city = 'Delhi'); DELETE FROM students WHERE city = 'Delhi';"},
  {"user_input": "Remove student data of those from 'Mumbai'.", "sql_query": "DELETE FROM student_marks WHERE roll_no IN (SELECT roll_no FROM students WHERE city = 'Mumbai'); DELETE FROM student_attendance WHERE roll_no IN (SELECT roll_no FROM students WHERE city = 'Mumbai'); DELETE FROM student_fees WHERE roll_no IN (SELECT roll_no FROM students WHERE city = 'Mumbai'); DELETE FROM students WHERE city = 'Mumbai';"},
  {"user_input": "Delete students with attendance below 50%.", "sql_query": "DELETE FROM student_marks WHERE roll_no IN (SELECT roll_no FROM student_attendance WHERE attendance_percentage < 50); DELETE FROM student_fees WHERE roll_no IN (SELECT roll_no FROM student_attendance WHERE attendance_percentage < 50); DELETE FROM students WHERE roll_no IN (SELECT roll_no FROM student_attendance WHERE attendance_percentage < 50);"},
  {"user_input": "Erase records of students whose attendance is below 40%.", "sql_query": "DELETE FROM student_marks WHERE roll_no IN (SELECT roll_no FROM student_attendance WHERE attendance_percentage < 40); DELETE FROM student_fees WHERE roll_no IN (SELECT roll_no FROM student_attendance WHERE attendance_percentage < 40); DELETE FROM students WHERE roll_no IN (SELECT roll_no FROM student_attendance WHERE attendance_percentage < 40);"},
  {"user_input": "Remove students who failed three times in a row.", "sql_query": "DELETE FROM student_marks WHERE roll_no IN (SELECT roll_no FROM student_marks WHERE fail_count >= 3); DELETE FROM student_attendance WHERE roll_no IN (SELECT roll_no FROM student_marks WHERE fail_count >= 3); DELETE FROM student_fees WHERE roll_no IN (SELECT roll_no FROM student_marks WHERE fail_count >= 3); DELETE FROM students WHERE roll_no IN (SELECT roll_no FROM student_marks WHERE fail_count >= 3);"},
  {"user_input": "Delete records of students who failed last semester.", "sql_query": "DELETE FROM student_marks WHERE roll_no IN (SELECT roll_no FROM student_marks WHERE last_semester_result = 'Fail'); DELETE FROM student_attendance WHERE roll_no IN (SELECT roll_no FROM student_marks WHERE last_semester_result = 'Fail'); DELETE FROM student_fees WHERE roll_no IN (SELECT roll_no FROM student_marks WHERE last_semester_result = 'Fail'); DELETE FROM students WHERE roll_no IN (SELECT roll_no FROM student_marks WHERE last_semester_result = 'Fail');"},
  {"user_input": "Erase students who left the hostel.", "sql_query": "DELETE FROM student_marks WHERE roll_no IN (SELECT roll_no FROM student_hostel WHERE status = 'Left'); DELETE FROM student_attendance WHERE roll_no IN (SELECT roll_no FROM student_hostel WHERE status = 'Left'); DELETE FROM student_fees WHERE roll_no IN (SELECT roll_no FROM student_hostel WHERE status = 'Left'); DELETE FROM students WHERE roll_no IN (SELECT roll_no FROM student_hostel WHERE status = 'Left');"},
  {"user_input": "Delete records of students who were expelled from the hostel.", "sql_query": "DELETE FROM student_marks WHERE roll_no IN (SELECT roll_no FROM student_hostel WHERE status = 'Expelled'); DELETE FROM student_attendance WHERE roll_no IN (SELECT roll_no FROM student_hostel WHERE status = 'Expelled'); DELETE FROM student_fees WHERE roll_no IN (SELECT roll_no FROM student_hostel WHERE status = 'Expelled'); DELETE FROM students WHERE roll_no IN (SELECT roll_no FROM student_hostel WHERE status = 'Expelled');"},
  {"user_input": "Remove students who graduated in 2022.", "sql_query": "DELETE FROM student_marks WHERE roll_no IN (SELECT roll_no FROM students WHERE graduation_year = 2022); DELETE FROM student_attendance WHERE roll_no IN (SELECT roll_no FROM students WHERE graduation_year = 2022); DELETE FROM student_fees WHERE roll_no IN (SELECT roll_no FROM students WHERE graduation_year = 2022); DELETE FROM students WHERE graduation_year = 2022;"},
  {"user_input": "Erase all student data of batch 2020.", "sql_query": "DELETE FROM student_marks WHERE roll_no IN (SELECT roll_no FROM students WHERE batch_year = 2020); DELETE FROM student_attendance WHERE roll_no IN (SELECT roll_no FROM students WHERE batch_year = 2020); DELETE FROM student_fees WHERE roll_no IN (SELECT roll_no FROM students WHERE batch_year = 2020); DELETE FROM students WHERE batch_year = 2020;"},
  {"user_input": "Delete all students who transferred to another college.", "sql_query": "DELETE FROM student_marks WHERE roll_no IN (SELECT roll_no FROM students WHERE status = 'Transferred'); DELETE FROM student_attendance WHERE roll_no IN (SELECT roll_no FROM students WHERE status = 'Transferred'); DELETE FROM student_fees WHERE roll_no IN (SELECT roll_no FROM students WHERE status = 'Transferred'); DELETE FROM students WHERE status = 'Transferred';"},
  {"user_input": "Erase records of students who migrated to another university.", "sql_query": "DELETE FROM student_marks WHERE roll_no IN (SELECT roll_no FROM students WHERE migration_status = 'Yes'); DELETE FROM student_attendance WHERE roll_no IN (SELECT roll_no FROM students WHERE migration_status = 'Yes'); DELETE FROM student_fees WHERE roll_no IN (SELECT roll_no FROM students WHERE migration_status = 'Yes'); DELETE FROM students WHERE migration_status = 'Yes';"}
]
