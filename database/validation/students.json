[
    {"user_input": "Find students who scored above 95 in Mathematics.", "sql_query": "SELECT * FROM students WHERE math_score > 95;"},
    {"user_input": "Find students who scored above 85 in Mathematics.", "sql_query": "SELECT * FROM students WHERE math_score > 85;"},
    {"user_input": "Find students who scored exactly 60 in Mathematics.", "sql_query": "SELECT * FROM students WHERE math_score = 60;"},
    {"user_input": "Find students who scored between 60 and 80 in Mathematics.", "sql_query": "SELECT * FROM students WHERE math_score BETWEEN 60 AND 80;"},
    {"user_input": "Find students who scored less than 50 in Mathematics.", "sql_query": "SELECT * FROM students WHERE math_score < 50;"},
    {"user_input": "List students with Science scores above 80.", "sql_query": "SELECT * FROM students WHERE science_score > 80;"},
    {"user_input": "Find students who have both Science and Mathematics scores above 75.", "sql_query": "SELECT * FROM students WHERE science_score > 75 AND math_score > 75;"},
    {"user_input": "Find students who have scored below 40 in any subject.", "sql_query": "SELECT * FROM students WHERE math_score < 40 OR science_score < 40 OR english_score < 40;"},
    {"user_input": "Select students whose roll numbers are greater than 30.", "sql_query": "SELECT * FROM students WHERE roll_number > 30;"},
    {"user_input": "Find students whose roll numbers are between 25 and 50.", "sql_query": "SELECT * FROM students WHERE roll_number BETWEEN 25 AND 50;"},
    {"user_input": "Find students whose roll numbers are exactly 42.", "sql_query": "SELECT * FROM students WHERE roll_number = 42;"},
    {"user_input": "Find students who have attendance above 90%.", "sql_query": "SELECT * FROM students WHERE attendance_percentage > 90;"},
    {"user_input": "Fetch students who have attendance between 60% and 80%.", "sql_query": "SELECT * FROM students WHERE attendance_percentage BETWEEN 60 AND 80;"},
    {"user_input": "Find students who have been absent for more than 5 days.", "sql_query": "SELECT * FROM students WHERE days_absent > 5;"},
    {"user_input": "Select students who have been absent between 3 and 7 days.", "sql_query": "SELECT * FROM students WHERE days_absent BETWEEN 3 AND 7;"},
    {"user_input": "Find students who have not been absent at all.", "sql_query": "SELECT * FROM students WHERE days_absent = 0;"},
    {"user_input": "Find students who have at least one extracurricular activity.", "sql_query": "SELECT * FROM students WHERE extracurricular_activities > 0;"},
    {"user_input": "Find students who have participated in exactly 3 extracurricular activities.", "sql_query": "SELECT * FROM students WHERE extracurricular_activities = 3;"},
    {"user_input": "Show students who have participated in more than 5 extracurricular activities.", "sql_query": "SELECT * FROM students WHERE extracurricular_activities > 5;"},
    {"user_input": "Find students who have pending assignments.", "sql_query": "SELECT * FROM students WHERE pending_assignments > 0;"},
    {"user_input": "Extract students who have no pending assignments.", "sql_query": "SELECT * FROM students WHERE pending_assignments = 0;"},
    {"user_input": "Select students who have cleared all their dues.", "sql_query": "SELECT * FROM students WHERE fees_due = 0;"},
    {"user_input": "Find students who have partially paid their fees.", "sql_query": "SELECT * FROM students WHERE fees_due > 0 AND fees_due < total_fees;"},
    {"user_input": "Find students who have not paid any fees yet.", "sql_query": "SELECT * FROM students WHERE fees_due = total_fees;"},
    {"user_input": "Fetch students who have an average score above 85.", "sql_query": "SELECT * FROM students WHERE (math_score + science_score + english_score) / 3 > 85;"},
    {"user_input": "Find students who have an average score below 50.", "sql_query": "SELECT * FROM students WHERE (math_score + science_score + english_score) / 3 < 50;"},
    {"user_input": "Find students who are in grade 10.", "sql_query": "SELECT * FROM students WHERE grade = 10;"},
    {"user_input": "Find students who are in grade 12.", "sql_query": "SELECT * FROM students WHERE grade = 12;"},
    {"user_input": "Fetch students whose names start with 'A'.", "sql_query": "SELECT * FROM students WHERE name LIKE 'A%';"},
    {"user_input": "Find students whose names end with 'n'.", "sql_query": "SELECT * FROM students WHERE name LIKE '%n';"},
    {"user_input": "Find students who have a 'z' in their names.", "sql_query": "SELECT * FROM students WHERE name LIKE '%z%';"},
    {"user_input": "Find students who were born after 2005.", "sql_query": "SELECT * FROM students WHERE birth_year > 2005;"},
    {"user_input": "Find students who were born in 2004 or 2005.", "sql_query": "SELECT * FROM students WHERE birth_year IN (2004, 2005);"},
    {"user_input": "Give students who were born between 2000 and 2003.", "sql_query": "SELECT * FROM students WHERE birth_year BETWEEN 2000 AND 2003;"},
    {"user_input": "Find students whose parents' contact numbers are missing.", "sql_query": "SELECT * FROM students WHERE parent_contact IS NULL;"},
    {"user_input": "Display students who have a registered parent contact number.", "sql_query": "SELECT * FROM students WHERE parent_contact IS NOT NULL;"},
    {"user_input": "Find students who have email addresses ending with '@gmail.com'.", "sql_query": "SELECT * FROM students WHERE email LIKE '%@gmail.com';"},
    {"user_input": "Find students who have email addresses with '.edu' domains.", "sql_query": "SELECT * FROM students WHERE email LIKE '%.edu';"},
    {"user_input": "Find students who have scored above 90 in English.", "sql_query": "SELECT * FROM students WHERE english_score > 90;"},
    {"user_input": "Find students who have scored more than 75 but less than 90 in English.", "sql_query": "SELECT * FROM students WHERE english_score BETWEEN 75 AND 90;"},
    {"user_input": "Find students who have failed in English (score below 40).", "sql_query": "SELECT * FROM students WHERE english_score < 40;"},
    {"user_input": "Show students whose Science score is between 50 and 70.", "sql_query": "SELECT * FROM students WHERE science_score BETWEEN 50 AND 70;"},
    {"user_input": "Find students whose Science score is either 60 or 70.", "sql_query": "SELECT * FROM students WHERE science_score IN (60, 70);"},
    {"user_input": "Find students whose Mathematics score is not 75.", "sql_query": "SELECT * FROM students WHERE math_score != 75;"},
    {"user_input": "Provide students who have completed all their homework.", "sql_query": "SELECT * FROM students WHERE homework_pending = 0;"},
    {"user_input": "Find students who have pending homework assignments.", "sql_query": "SELECT * FROM students WHERE homework_pending > 0;"},
    {"user_input": "Find students who have more than 2 library books issued.", "sql_query": "SELECT * FROM students WHERE library_books_issued > 2;"},
    {"user_input": "Select students who have not issued any library books.", "sql_query": "SELECT * FROM students WHERE library_books_issued = 0;"},
    {"user_input": "Find students who are members of the sports team.", "sql_query": "SELECT * FROM students WHERE is_sports_team_member = TRUE;"},
    {"user_input": "Find students who are not part of any sports team.", "sql_query": "SELECT * FROM students WHERE is_sports_team_member = FALSE;"},
    {"user_input": "Find students who have participated in science fairs.", "sql_query": "SELECT * FROM students WHERE participated_in_science_fair = TRUE;"},
    {"user_input": "Find students who have not participated in science fairs.", "sql_query": "SELECT * FROM students WHERE participated_in_science_fair = FALSE;"},
    {"user_input": "Find students who have taken music as an elective subject.", "sql_query": "SELECT * FROM students WHERE elective_subject = 'Music';"},
    {"user_input": "Get students who have taken computer science as an elective subject.", "sql_query": "SELECT * FROM students WHERE elective_subject = 'Computer Science';"},
    {"user_input": "Find students who have birthdays in January.", "sql_query": "SELECT * FROM students WHERE MONTH(birth_date) = 1;"},
    {"user_input": "Find students who were born in the year 2006.", "sql_query": "SELECT * FROM students WHERE birth_year = 2006;"},
    {"user_input": "Find students who were born in 2004 or 2005.", "sql_query": "SELECT * FROM students WHERE birth_year IN (2004, 2005);"},
    {"user_input": "Find students whose names have 'John' in them.", "sql_query": "SELECT * FROM students WHERE name LIKE '%John%';"},
    {"user_input": "Find students whose last names start with 'S'.", "sql_query": "SELECT * FROM students WHERE last_name LIKE 'S%';"},
    {"user_input": "Display students whose email ends with '@yahoo.com'.", "sql_query": "SELECT * FROM students WHERE email LIKE '%@yahoo.com';"},
    {"user_input": "Find students whose roll number is between 10 and 20.", "sql_query": "SELECT * FROM students WHERE roll_number BETWEEN 10 AND 20;"},
    {"user_input": "Find students whose roll number is an odd number.", "sql_query": "SELECT * FROM students WHERE MOD(roll_number, 2) = 1;"},
    {"user_input": "Provide students who are older than 18 years.", "sql_query": "SELECT * FROM students WHERE age > 18;"},
    {"user_input": "Find students who are exactly 15 years old.", "sql_query": "SELECT * FROM students WHERE age = 15;"},
    {"user_input": "Find students who belong to section 'A'.", "sql_query": "SELECT * FROM students WHERE section = 'A';"},
    {"user_input": "Find students who belong to section 'B' or 'C'.", "sql_query": "SELECT * FROM students WHERE section IN ('B', 'C');"},
    {"user_input": "Extract students who do not belong to section 'D'.", "sql_query": "SELECT * FROM students WHERE section != 'D';"},
    {"user_input": "Find students who have secured first rank in any subject.", "sql_query": "SELECT * FROM students WHERE rank = 1;"},
    {"user_input": "Identify students who have secured top 3 ranks in Science.", "sql_query": "SELECT * FROM students WHERE science_rank <= 3;"},
    {"user_input": "Find students who have registered for the upcoming exam.", "sql_query": "SELECT * FROM students WHERE exam_registered = TRUE;"},
    {"user_input": "Find students who have not yet registered for the exam.", "sql_query": "SELECT * FROM students WHERE exam_registered = FALSE;"},
    {"user_input": "Display students who live in New York.", "sql_query": "SELECT * FROM students WHERE city = 'New York';"},
    {"user_input": "Find students who live in either California or Texas.", "sql_query": "SELECT * FROM students WHERE city IN ('California', 'Texas');"},
    {"user_input": "Find students who have siblings in the same school.", "sql_query": "SELECT * FROM students WHERE has_sibling_in_school = TRUE;"},
    {"user_input": "Extract students who have medical conditions.", "sql_query": "SELECT * FROM students WHERE has_medical_condition = TRUE;"},
    {"user_input": "Find students who do not have any medical conditions.", "sql_query": "SELECT * FROM students WHERE has_medical_condition = FALSE;"},
    {"user_input": "Find students who have bus transportation.", "sql_query": "SELECT * FROM students WHERE uses_school_bus = TRUE;"},
    {"user_input": "Display students who walk to school.", "sql_query": "SELECT * FROM students WHERE uses_school_bus = FALSE;"},
    {"user_input": "Find the names of students who have scored more than 85 in Mathematics.", "sql_query": "SELECT name FROM students WHERE math_score > 85;"},
    {"user_input": "Find the names and roll numbers of students who have scored between 70 and 85 in Mathematics.", "sql_query": "SELECT name, roll_number FROM students WHERE math_score BETWEEN 70 AND 85;"},
    {"user_input": "Find students whose Mathematics score is exactly 75.", "sql_query": "SELECT * FROM students WHERE math_score = 75;"},
    {"user_input": "Provide students who have attended more than 90% of their classes.", "sql_query": "SELECT * FROM students WHERE attendance_percentage > 90;"},
    {"user_input": "Find students who have attended between 70% and 90% of their classes.", "sql_query": "SELECT * FROM students WHERE attendance_percentage BETWEEN 70 AND 90;"},
    {"user_input": "Find students who have attended exactly 100% of their classes.", "sql_query": "SELECT * FROM students WHERE attendance_percentage = 100;"},
    {"user_input": "Retrieve students who have pending tuition fees.", "sql_query": "SELECT * FROM students WHERE fees_pending > 0;"},
    {"user_input": "Find students who have paid all their tuition fees.", "sql_query": "SELECT * FROM students WHERE fees_pending = 0;"},
    {"user_input": "Find students who have pending fees less than 5000.", "sql_query": "SELECT * FROM students WHERE fees_pending < 5000;"},
    {"user_input": "Find students who have borrowed more than 3 library books.", "sql_query": "SELECT * FROM students WHERE library_books_issued > 3;"},
    {"user_input": "Find students who have borrowed between 1 and 3 library books.", "sql_query": "SELECT * FROM students WHERE library_books_issued BETWEEN 1 AND 3;"},
    {"user_input": "Show students who have not borrowed any library books.", "sql_query": "SELECT * FROM students WHERE library_books_issued = 0;"},
    {"user_input": "Find students whose first name starts with 'A'.", "sql_query": "SELECT * FROM students WHERE first_name LIKE 'A%';"},
    {"user_input": "Provide students whose last name contains 'Singh'.", "sql_query": "SELECT * FROM students WHERE last_name LIKE '%Singh%';"},
    {"user_input": "Find students whose email domain is '@gmail.com'.", "sql_query": "SELECT * FROM students WHERE email LIKE '%@gmail.com';"},
    {"user_input": "Find students whose email does not contain 'yahoo'.", "sql_query": "SELECT * FROM students WHERE email NOT LIKE '%yahoo%';"},
    {"user_input": "Give students who have scored the highest in Science.", "sql_query": "SELECT * FROM students ORDER BY science_score DESC LIMIT 1;"},
    {"user_input": "Find students who have the lowest score in English.", "sql_query": "SELECT * FROM students ORDER BY english_score ASC LIMIT 1;"},
    {"user_input": "Find students who are in grade 10 and have an average score above 80.", "sql_query": "SELECT * FROM students WHERE grade = 10 AND avg_score > 80;"},
    {"user_input": "Find students who are in grade 12 and have a Science score above 85.", "sql_query": "SELECT * FROM students WHERE grade = 12 AND science_score > 85;"},
    {"user_input": "Find students who have participated in more than 2 school events.", "sql_query": "SELECT * FROM students WHERE school_events_participated > 2;"},
    {"user_input": "Search students who have participated in at least 1 sports event.", "sql_query": "SELECT * FROM students WHERE sports_events_participated >= 1;"},
    {"user_input": "Find students who have never participated in any school events.", "sql_query": "SELECT * FROM students WHERE school_events_participated = 0;"},
    {"user_input": "Identify students whose parents' occupation is 'Doctor'.", "sql_query": "SELECT * FROM students WHERE parent_occupation = 'Doctor';"},
    {"user_input": "Extract students whose parents' occupation is 'Engineer' or 'Teacher'.", "sql_query": "SELECT * FROM students WHERE parent_occupation IN ('Engineer', 'Teacher');"},
    {"user_input": "Find students who have at least one sibling studying in the same school.", "sql_query": "SELECT * FROM students WHERE has_sibling_in_school = TRUE;"},
    {"user_input": "Find students who have no siblings studying in the same school.", "sql_query": "SELECT * FROM students WHERE has_sibling_in_school = FALSE;"},
    {"user_input": "Find students who are eligible for a scholarship.", "sql_query": "SELECT * FROM students WHERE is_scholarship_eligible = TRUE;"},
    {"user_input": "Retrieve students who are not eligible for a scholarship.", "sql_query": "SELECT * FROM students WHERE is_scholarship_eligible = FALSE;"},
    {"user_input": "Find students who live in a hostel.", "sql_query": "SELECT * FROM students WHERE lives_in_hostel = TRUE;"},
    {"user_input": "Find students who do not live in a hostel.", "sql_query": "SELECT * FROM students WHERE lives_in_hostel = FALSE;"},
    {"user_input": "Provide students who were born before the year 2005.", "sql_query": "SELECT * FROM students WHERE birth_year < 2005;"},
    {"user_input": "Find students who were born after the year 2010.", "sql_query": "SELECT * FROM students WHERE birth_year > 2010;"},
    {"user_input": "Find students who have secured rank 1 in any subject.", "sql_query": "SELECT * FROM students WHERE rank = 1;"},
    {"user_input": "Give students who have secured a rank between 1 and 3.", "sql_query": "SELECT * FROM students WHERE rank BETWEEN 1 AND 3;"},
    {"user_input": "Find students who have secured a rank greater than 10.", "sql_query": "SELECT * FROM students WHERE rank > 10;"},
    {"user_input": "Find students who have more than 5 absences.", "sql_query": "SELECT * FROM students WHERE absences > 5;"},
    {"user_input": "Identify students who have never been absent.", "sql_query": "SELECT * FROM students WHERE absences = 0;"},
    {"user_input": "Retrieve students who have attendance less than 50%.", "sql_query": "SELECT * FROM students WHERE attendance_percentage < 50;"},
    {"user_input": "Add a new student named 'Rohit Sharma' with roll number 105 in the Computer Science course.", "sql_query": "INSERT INTO students (roll_no, name, course) VALUES (105, 'Rohit Sharma', 'Computer Science');"},
    {"user_input": "Create a record for 'Priya Mehta' in Electronics with roll 210.", "sql_query": "INSERT INTO students (roll_no, name, course) VALUES (210, 'Priya Mehta', 'Electronics');"},
    {"user_input": "Add student 'Amit Kumar', roll 302, from 'Delhi' with phone number '9876543210'.", "sql_query": "INSERT INTO students (roll_no, name, city, phone) VALUES (302, 'Amit Kumar', 'Delhi', '9876543210');"},
    {"user_input": "Create an entry for 'Neha Gupta' (Roll 402) from 'Mumbai' with email 'neha.g@gmail.com'.", "sql_query": "INSERT INTO students (roll_no, name, city, email) VALUES (402, 'Neha Gupta', 'Mumbai', 'neha.g@gmail.com');"},
    {"user_input": "Insert student 'Vikas Singh' with roll 505, admitted in 2023 in 'Mechanical'.", "sql_query": "INSERT INTO students (roll_no, name, admission_year, course) VALUES (505, 'Vikas Singh', 2023, 'Mechanical');"},
    {"user_input": "Add 'Swati Verma' (Roll 601) who joined in 2022 for 'Civil Engineering'.", "sql_query": "INSERT INTO students (roll_no, name, admission_year, course) VALUES (601, 'Swati Verma', 2022, 'Civil Engineering');"},
    {"user_input": "Add 'Rahul Yadav', Roll 701, enrolled in 'Biotechnology' with a scholarship of 50%.", "sql_query": "INSERT INTO students (roll_no, name, course, scholarship) VALUES (701, 'Rahul Yadav', 'Biotechnology', 50);"},
    {"user_input": "Create a new entry for 'Ananya Roy', Roll 805, with full fees paid for 'Data Science'.", "sql_query": "INSERT INTO students (roll_no, name, course, fees_paid) VALUES (805, 'Ananya Roy', 'Data Science', 'Yes');"},
    {"user_input": "Insert 'Karan Joshi', Roll 905, for 'Physics' with initial attendance of 75%.", "sql_query": "INSERT INTO students (roll_no, name, course, attendance_percentage) VALUES (905, 'Karan Joshi', 'Physics', 75);"},
    {"user_input": "Add 'Sonia Dutta', Roll 1001, in 'Mathematics' with 85% attendance.", "sql_query": "INSERT INTO students (roll_no, name, course, attendance_percentage) VALUES (1001, 'Sonia Dutta', 'Mathematics', 85);"},
    {"user_input": "Insert 'Deepak Rao', Roll 1102, in batch 2025 for 'AI & ML'.", "sql_query": "INSERT INTO students (roll_no, name, batch_year, course) VALUES (1102, 'Deepak Rao', 2025, 'AI & ML');"},
    {"user_input": "Create student 'Megha Sharma', Roll 1203, in batch 2026 for 'Cyber Security'.", "sql_query": "INSERT INTO students (roll_no, name, batch_year, course) VALUES (1203, 'Megha Sharma', 2026, 'Cyber Security');"},
    {"user_input": "Add 'Ravi Tiwari', Roll 1304, in 'Statistics' with 89 marks in last semester.", "sql_query": "INSERT INTO students (roll_no, name, course, last_semester_marks) VALUES (1304, 'Ravi Tiwari', 'Statistics', 89);"},
    {"user_input": "Insert student 'Simran Kaur', Roll 1405, for 'History' who scored 76 marks.", "sql_query": "INSERT INTO students (roll_no, name, course, last_semester_marks) VALUES (1405, 'Simran Kaur', 'History', 76);"},
    {"user_input": "Create record for 'Arjun Pandey', Roll 1506, staying in Hostel A.", "sql_query": "INSERT INTO students (roll_no, name, hostel_block) VALUES (1506, 'Arjun Pandey', 'Hostel A');"},
    {"user_input": "Add 'Ritika Das', Roll 1607, residing in Hostel C.", "sql_query": "INSERT INTO students (roll_no, name, hostel_block) VALUES (1607, 'Ritika Das', 'Hostel C');"},
    {"user_input": "Insert 'Suresh Nair', Roll 1708, enrolled in 'Philosophy' with father’s name 'Ramesh Nair'.", "sql_query": "INSERT INTO students (roll_no, name, course, father_name) VALUES (1708, 'Suresh Nair', 'Philosophy', 'Ramesh Nair');"},
    {"user_input": "Create record for 'Manisha Sen', Roll 1809, studying 'Economics' with mother’s name 'Sunita Sen'.", "sql_query": "INSERT INTO students (roll_no, name, course, mother_name) VALUES (1809, 'Manisha Sen', 'Economics', 'Sunita Sen');"},
    {"user_input": "Add 'Akash Patel', Roll 1900, for 'Geology' at 'Delhi University'.", "sql_query": "INSERT INTO students (roll_no, name, course, university) VALUES (1900, 'Akash Patel', 'Geology', 'Delhi University');"},
    {"user_input": "Insert 'Nidhi Raghav', Roll 2001, in 'Law' at 'Mumbai University'.", "sql_query": "INSERT INTO students (roll_no, name, course, university) VALUES (2001, 'Nidhi Raghav', 'Law', 'Mumbai University');"},
    {"user_input": "Create a new table for student records with some example data.", "sql_query": "CREATE TABLE student_records (id INT PRIMARY KEY, name VARCHAR(100), age INT, course VARCHAR(50)); INSERT INTO student_records VALUES (1, 'Example Student', 18, 'Physics');"},
    {"user_input": "Generate a structure for student enrollments with a sample row.", "sql_query": "CREATE TABLE student_enrollments (enrollment_id INT PRIMARY KEY, student_name VARCHAR(100), course_name VARCHAR(50)); INSERT INTO student_enrollments VALUES (1, 'Sample Student', 'Mathematics');"},
    {"user_input": "Make a table to store student extracurricular activities with a demo row.", "sql_query": "CREATE TABLE student_extracurricular (student_id INT PRIMARY KEY, activity_name VARCHAR(100), level VARCHAR(50)); INSERT INTO student_extracurricular VALUES (1, 'Football', 'State');"},
    {"user_input": "Design a database for tracking student internships with a sample entry.", "sql_query": "CREATE TABLE student_internships (student_id INT PRIMARY KEY, company_name VARCHAR(100), role VARCHAR(100)); INSERT INTO student_internships VALUES (1, 'ABC Corp', 'Intern');"},
    {"user_input": "Add a new student named 'Rohit Sharma' with roll number 105 in the Computer Science course.", "sql_query": "INSERT INTO students (roll_no, name, course) VALUES (105, 'Rohit Sharma', 'Computer Science');"},
    {"user_input": "Create a record for 'Priya Mehta' in Electronics with roll 210.", "sql_query": "INSERT INTO students (roll_no, name, course) VALUES (210, 'Priya Mehta', 'Electronics');"},
    {"user_input": "Add student 'Amit Kumar', roll 302, from 'Delhi' with phone number '9876543210'.", "sql_query": "INSERT INTO students (roll_no, name, city, phone) VALUES (302, 'Amit Kumar', 'Delhi', '9876543210');"},
    {"user_input": "Create an entry for 'Neha Gupta' (Roll 402) from 'Mumbai' with email 'neha.g@gmail.com'.", "sql_query": "INSERT INTO students (roll_no, name, city, email) VALUES (402, 'Neha Gupta', 'Mumbai', 'neha.g@gmail.com');"},
    {"user_input": "Insert student 'Vikas Singh' with roll 505, admitted in 2023 in 'Mechanical'.", "sql_query": "INSERT INTO students (roll_no, name, admission_year, course) VALUES (505, 'Vikas Singh', 2023, 'Mechanical');"},
    {"user_input": "Add 'Swati Verma' (Roll 601) who joined in 2022 for 'Civil Engineering'.", "sql_query": "INSERT INTO students (roll_no, name, admission_year, course) VALUES (601, 'Swati Verma', 2022, 'Civil Engineering');"},
    {"user_input": "Add 'Rahul Yadav', Roll 701, enrolled in 'Biotechnology' with a scholarship of 50%.", "sql_query": "INSERT INTO students (roll_no, name, course, scholarship) VALUES (701, 'Rahul Yadav', 'Biotechnology', 50);"},
    {"user_input": "Create a new entry for 'Ananya Roy', Roll 805, with full fees paid for 'Data Science'.", "sql_query": "INSERT INTO students (roll_no, name, course, fees_paid) VALUES (805, 'Ananya Roy', 'Data Science', 'Yes');"},
    {"user_input": "Insert 'Karan Joshi', Roll 905, for 'Physics' with initial attendance of 75%.", "sql_query": "INSERT INTO students (roll_no, name, course, attendance_percentage) VALUES (905, 'Karan Joshi', 'Physics', 75);"},
    {"user_input": "Add 'Sonia Dutta', Roll 1001, in 'Mathematics' with 85% attendance.", "sql_query": "INSERT INTO students (roll_no, name, course, attendance_percentage) VALUES (1001, 'Sonia Dutta', 'Mathematics', 85);"},
    {"user_input": "Insert 'Deepak Rao', Roll 1102, in batch 2025 for 'AI & ML'.", "sql_query": "INSERT INTO students (roll_no, name, batch_year, course) VALUES (1102, 'Deepak Rao', 2025, 'AI & ML');"},
    {"user_input": "Create student 'Megha Sharma', Roll 1203, in batch 2026 for 'Cyber Security'.", "sql_query": "INSERT INTO students (roll_no, name, batch_year, course) VALUES (1203, 'Megha Sharma', 2026, 'Cyber Security');"},
    {"user_input": "Add 'Ravi Tiwari', Roll 1304, in 'Statistics' with 89 marks in last semester.", "sql_query": "INSERT INTO students (roll_no, name, course, last_semester_marks) VALUES (1304, 'Ravi Tiwari', 'Statistics', 89);"},
    {"user_input": "Insert student 'Simran Kaur', Roll 1405, for 'History' who scored 76 marks.", "sql_query": "INSERT INTO students (roll_no, name, course, last_semester_marks) VALUES (1405, 'Simran Kaur', 'History', 76);"},
    {"user_input": "Create record for 'Arjun Pandey', Roll 1506, staying in Hostel A.", "sql_query": "INSERT INTO students (roll_no, name, hostel_block) VALUES (1506, 'Arjun Pandey', 'Hostel A');"},
    {"user_input": "Add 'Ritika Das', Roll 1607, residing in Hostel C.", "sql_query": "INSERT INTO students (roll_no, name, hostel_block) VALUES (1607, 'Ritika Das', 'Hostel C');"},
    {"user_input": "Insert 'Suresh Nair', Roll 1708, enrolled in 'Philosophy' with father’s name 'Ramesh Nair'.", "sql_query": "INSERT INTO students (roll_no, name, course, father_name) VALUES (1708, 'Suresh Nair', 'Philosophy', 'Ramesh Nair');"},
    {"user_input": "Create record for 'Manisha Sen', Roll 1809, studying 'Economics' with mother’s name 'Sunita Sen'.", "sql_query": "INSERT INTO students (roll_no, name, course, mother_name) VALUES (1809, 'Manisha Sen', 'Economics', 'Sunita Sen');"},
    {"user_input": "Add 'Akash Patel', Roll 1900, for 'Geology' at 'Delhi University'.", "sql_query": "INSERT INTO students (roll_no, name, course, university) VALUES (1900, 'Akash Patel', 'Geology', 'Delhi University');"},
    {"user_input": "Insert 'Nidhi Raghav', Roll 2001, in 'Law' at 'Mumbai University'.", "sql_query": "INSERT INTO students (roll_no, name, course, university) VALUES (2001, 'Nidhi Raghav', 'Law', 'Mumbai University');"},
    {"user_input": "Create a new table for student records with some example data.", "sql_query": "CREATE TABLE student_records (id INT PRIMARY KEY, name VARCHAR(100), age INT, course VARCHAR(50)); INSERT INTO student_records VALUES (1, 'Example Student', 18, 'Physics');"},
    {"user_input": "Generate a structure for student enrollments with a sample row.", "sql_query": "CREATE TABLE student_enrollments (enrollment_id INT PRIMARY KEY, student_name VARCHAR(100), course_name VARCHAR(50)); INSERT INTO student_enrollments VALUES (1, 'Sample Student', 'Mathematics');"},
    {"user_input": "Make a table to store student extracurricular activities with a demo row.", "sql_query": "CREATE TABLE student_extracurricular (student_id INT PRIMARY KEY, activity_name VARCHAR(100), level VARCHAR(50)); INSERT INTO student_extracurricular VALUES (1, 'Football', 'State');"},
    {"user_input": "Design a database for tracking student internships with a sample entry.", "sql_query": "CREATE TABLE student_internships (student_id INT PRIMARY KEY, company_name VARCHAR(100), role VARCHAR(100)); INSERT INTO student_internships VALUES (1, 'ABC Corp', 'Intern');"},
    {"user_input": "Build a student scholarship tracking system with an example row.", "sql_query": "CREATE TABLE student_scholarships (student_id INT PRIMARY KEY, scholarship_type VARCHAR(50), amount DECIMAL(10,2)); INSERT INTO student_scholarships VALUES (1, 'Merit-Based', 3000.00);"},
    {"user_input": "Create a table for tracking student health records with some sample data.", "sql_query": "CREATE TABLE student_health (student_id INT PRIMARY KEY, condition TEXT, last_checkup DATE); INSERT INTO student_health VALUES (1, 'No known issues', '2024-06-01');"},
    {"user_input": "Form a student project repository with a dummy project entry.", "sql_query": "CREATE TABLE student_projects (student_id INT PRIMARY KEY, project_title VARCHAR(255), mentor VARCHAR(100)); INSERT INTO student_projects VALUES (1, 'AI for Education', 'Dr. Patel');"},
    {"user_input": "Generate a student course registration system with some test data.", "sql_query": "CREATE TABLE student_courses (student_id INT PRIMARY KEY, course_name VARCHAR(100), semester VARCHAR(20)); INSERT INTO student_courses VALUES (1, 'Database Systems', 'Spring 2024');"},
    {"user_input": "Set up a database to monitor student hostel allocations with a sample row.", "sql_query": "CREATE TABLE student_hostel (student_id INT PRIMARY KEY, hostel_name VARCHAR(50), room_number INT); INSERT INTO student_hostel VALUES (1, 'Oak Hostel', 305);"},
    {"user_input": "Define a table to track student library book borrowing history with example data.", "sql_query": "CREATE TABLE student_library (student_id INT PRIMARY KEY, book_title VARCHAR(255), return_date DATE); INSERT INTO student_library VALUES (1, 'Machine Learning Basics', '2024-07-10');"},
    {"user_input": "Create a student profile for Emma, aged 20, in Computer Science.", "sql_query": "CREATE TABLE student_profiles (id INT PRIMARY KEY, name VARCHAR(100), age INT, major VARCHAR(50)); INSERT INTO student_profiles VALUES (1, 'Emma Roberts', 20, 'Computer Science');"},
    {"user_input": "Make a student record and insert Liam, 22, in Business.", "sql_query": "CREATE TABLE student_info (id INT PRIMARY KEY, full_name VARCHAR(100), age INT, department VARCHAR(100)); INSERT INTO student_info VALUES (1, 'Liam Johnson', 22, 'Business');"},
    {"user_input": "Define a student grading system and add Mia’s 90 in Biology.", "sql_query": "CREATE TABLE student_grades (student_id INT PRIMARY KEY, subject VARCHAR(100), marks INT); INSERT INTO student_grades VALUES (1, 'Biology', 90);"},
    {"user_input": "Generate a table for tracking attendance and add Oliver’s 25 days present in Physics.", "sql_query": "CREATE TABLE student_attendance (student_id INT PRIMARY KEY, subject VARCHAR(100), days_present INT); INSERT INTO student_attendance VALUES (1, 'Physics', 25);"},
    {"user_input": "Make a student fee table and record Jack’s payment of $1500.", "sql_query": "CREATE TABLE student_fees (student_id INT PRIMARY KEY, total_fee DECIMAL(10,2), paid_amount DECIMAL(10,2)); INSERT INTO student_fees VALUES (1, 4000.00, 1500.00);"},
    {"user_input": "Create a student research table and insert Sophia’s project on Machine Learning under Dr. Rao.", "sql_query": "CREATE TABLE student_research (student_id INT PRIMARY KEY, research_topic VARCHAR(255), mentor VARCHAR(100)); INSERT INTO student_research VALUES (1, 'Machine Learning Applications', 'Dr. Rao');"},
    {"user_input": "Make a sports participation log and add Ethan’s participation in the University Basketball team.", "sql_query": "CREATE TABLE student_sports (student_id INT PRIMARY KEY, sport VARCHAR(100), level VARCHAR(50)); INSERT INTO student_sports VALUES (1, 'Basketball', 'University');"},
    {"user_input": "Create a student organization membership table and add Ava in the Debate Club.", "sql_query": "CREATE TABLE student_organizations (student_id INT PRIMARY KEY, club_name VARCHAR(100), role VARCHAR(50)); INSERT INTO student_organizations VALUES (1, 'Debate Club', 'President');"},
    {"user_input": "Generate a volunteer service record and log Noah’s 30 hours at the Animal Shelter.", "sql_query": "CREATE TABLE student_volunteer (student_id INT PRIMARY KEY, organization VARCHAR(100), hours INT); INSERT INTO student_volunteer VALUES (1, 'Animal Shelter', 30);"},
    {"user_input": "Define a student exam schedule and add Olivia’s Math test on June 10th.", "sql_query": "CREATE TABLE student_exams (student_id INT PRIMARY KEY, subject VARCHAR(100), exam_date DATE); INSERT INTO student_exams VALUES (1, 'Mathematics', '2024-06-10');"},
    {"user_input": "Create a table for student academic records with example data.", "sql_query": "CREATE TABLE student_academics (student_id INT PRIMARY KEY, name VARCHAR(100), cgpa FLOAT, major VARCHAR(100));"},
    {"user_input": "Set up a student attendance monitoring table with demo entries.", "sql_query": "CREATE TABLE student_attendance (student_id INT PRIMARY KEY, subject VARCHAR(100), attendance_percentage FLOAT);"},
    {"user_input": "Generate a student examination results table with some test cases.", "sql_query": "CREATE TABLE student_results (student_id INT PRIMARY KEY, subject VARCHAR(100), marks INT, grade CHAR(1));"},
    {"user_input": "Make a table for storing student library book records.", "sql_query": "CREATE TABLE student_library (student_id INT PRIMARY KEY, book_title VARCHAR(255), issue_date DATE, return_date DATE);"},
    {"user_input": "Create a student fee payment table with sample data.", "sql_query": "CREATE TABLE student_fees (student_id INT PRIMARY KEY, total_fee DECIMAL(10,2), paid_amount DECIMAL(10,2));"},
    {"user_input": "Build a table for tracking student internship details.", "sql_query": "CREATE TABLE student_internships (student_id INT PRIMARY KEY, company_name VARCHAR(100), duration_months INT);"},
    {"user_input": "Generate a student extracurricular activities table with dummy values.", "sql_query": "CREATE TABLE student_extracurricular (student_id INT PRIMARY KEY, activity_name VARCHAR(100), role VARCHAR(50));"},
    {"user_input": "Set up a student club membership records table.", "sql_query": "CREATE TABLE student_clubs (student_id INT PRIMARY KEY, club_name VARCHAR(100), position VARCHAR(50));"},
    {"user_input": "Create a table for student scholarship details.", "sql_query": "CREATE TABLE student_scholarships (student_id INT PRIMARY KEY, scholarship_name VARCHAR(100), amount DECIMAL(10,2));"},
    {"user_input": "Make a table for student hostel accommodations.", "sql_query": "CREATE TABLE student_hostel (student_id INT PRIMARY KEY, hostel_name VARCHAR(100), room_number INT);"},
    {"user_input": "Set up a table for student mentorship programs with example entries.", "sql_query": "CREATE TABLE student_mentorship (student_id INT PRIMARY KEY, mentor_name VARCHAR(100), duration_months INT);"},
    {"user_input": "Create a table and add a student enrolled in AI course for semester 5.", "sql_query": "CREATE TABLE student_courses (student_id INT PRIMARY KEY, course_name VARCHAR(100), semester INT); INSERT INTO student_courses VALUES (1, 'Artificial Intelligence', 5);"},
    {"user_input": "Make a table and add a student who won a national coding competition.", "sql_query": "CREATE TABLE student_achievements (student_id INT PRIMARY KEY, award_name VARCHAR(100), awarded_by VARCHAR(100)); INSERT INTO student_achievements VALUES (1, 'National Coding Champion', 'CodeFest');"},
    {"user_input": "Set up a table and insert a student doing an internship at Google.", "sql_query": "CREATE TABLE student_internships (student_id INT PRIMARY KEY, company_name VARCHAR(100), duration_months INT); INSERT INTO student_internships VALUES (1, 'Google', 6);"},
    {"user_input": "Create a table and insert a student staying in Gamma Hostel, Room 306.", "sql_query": "CREATE TABLE student_hostel (student_id INT PRIMARY KEY, hostel_name VARCHAR(100), room_number INT); INSERT INTO student_hostel VALUES (1, 'Gamma Hostel', 306);"},
    {"user_input": "Make a table and add a student borrowing 'Deep Learning with Python' from the library.", "sql_query": "CREATE TABLE student_library (student_id INT PRIMARY KEY, book_title VARCHAR(255), issue_date DATE, return_date DATE); INSERT INTO student_library VALUES (1, 'Deep Learning with Python', '2025-02-05', '2025-03-05');"},
    {"user_input": "Create a table and insert a student enrolled in an online ML course on Udacity.", "sql_query": "CREATE TABLE student_online_courses (student_id INT PRIMARY KEY, platform VARCHAR(100), course_title VARCHAR(255)); INSERT INTO student_online_courses VALUES (1, 'Udacity', 'Intro to Machine Learning');"},
    {"user_input": "Generate a table and add a student winning a silver medal in National Olympiad.", "sql_query": "CREATE TABLE student_achievements (student_id INT PRIMARY KEY, award_name VARCHAR(100), awarded_by VARCHAR(100)); INSERT INTO student_achievements VALUES (1, 'Silver Medal', 'National Olympiad');"},
    {"user_input": "Make a table and insert a student taking Data Science Bootcamp on edX.", "sql_query": "CREATE TABLE student_online_courses (student_id INT PRIMARY KEY, platform VARCHAR(100), course_title VARCHAR(255)); INSERT INTO student_online_courses VALUES (1, 'edX', 'Data Science Bootcamp');"},
    {"user_input": "Set up a student participation table and record a student in a robotics competition.", "sql_query": "CREATE TABLE student_events (student_id INT PRIMARY KEY, event_name VARCHAR(100), role VARCHAR(50)); INSERT INTO student_events VALUES (1, 'Robotics Competition', 'Participant');"},
    {"user_input": "Build a table and insert a student receiving a 75,000 INR scholarship.", "sql_query": "CREATE TABLE student_scholarships (student_id INT PRIMARY KEY, scholarship_name VARCHAR(100), amount DECIMAL(10,2)); INSERT INTO student_scholarships VALUES (1, 'National Merit Scholarship', 75000.00);"},
    {"user_input": "Create tables for student emergency contacts and medical history.", "sql_query": "CREATE TABLE student_emergency_contacts (student_id INT PRIMARY KEY, guardian_name VARCHAR(100), contact_number VARCHAR(15)); CREATE TABLE student_medical_history (student_id INT PRIMARY KEY, blood_group VARCHAR(5), allergies TEXT);"},
    {"user_input": "Set up student placement records and industry internship details.", "sql_query": "CREATE TABLE student_placement (student_id INT PRIMARY KEY, company_name VARCHAR(100), job_role VARCHAR(100)); CREATE TABLE student_internship (student_id INT PRIMARY KEY, company_name VARCHAR(100), duration_months INT);"},
    {"user_input": "Make student research publications and conference participation records.", "sql_query": "CREATE TABLE student_research (student_id INT PRIMARY KEY, paper_title VARCHAR(255), journal VARCHAR(100)); CREATE TABLE student_conference (student_id INT PRIMARY KEY, conference_name VARCHAR(100), year INT);"},
    {"user_input": "Create student volunteering and NGO collaboration tables.", "sql_query": "CREATE TABLE student_volunteering (student_id INT PRIMARY KEY, organization VARCHAR(100), hours_contributed INT); CREATE TABLE student_ngo_projects (student_id INT PRIMARY KEY, project_title VARCHAR(255), impact TEXT);"},
    {"user_input": "Generate tables for student hostel allocation and mess preferences.", "sql_query": "CREATE TABLE student_hostel (student_id INT PRIMARY KEY, hostel_name VARCHAR(100), room_number INT); CREATE TABLE student_mess (student_id INT PRIMARY KEY, meal_preference VARCHAR(50));"},
    {"user_input": "Set up tables for student disciplinary actions and complaint tracking.", "sql_query": "CREATE TABLE student_disciplinary (student_id INT PRIMARY KEY, violation_description TEXT, date_reported DATE); CREATE TABLE student_complaints (student_id INT PRIMARY KEY, complaint_details TEXT, resolution_status VARCHAR(50));"},
    {"user_input": "Make tables for student academic projects and seminar participation.", "sql_query": "CREATE TABLE student_projects (student_id INT PRIMARY KEY, project_title VARCHAR(255), submission_date DATE); CREATE TABLE student_seminars (student_id INT PRIMARY KEY, seminar_topic VARCHAR(255), speaker_name VARCHAR(100));"},
    {"user_input": "Create student language proficiency and certifications tables.", "sql_query": "CREATE TABLE student_languages (student_id INT PRIMARY KEY, language VARCHAR(50), proficiency_level VARCHAR(50)); CREATE TABLE student_certifications (student_id INT PRIMARY KEY, certificate_name VARCHAR(100), issuing_organization VARCHAR(100));"},
    {"user_input": "Generate tables for student co-curricular activities and club memberships.", "sql_query": "CREATE TABLE student_cocurricular (student_id INT PRIMARY KEY, activity_name VARCHAR(100), role VARCHAR(50)); CREATE TABLE student_clubs (student_id INT PRIMARY KEY, club_name VARCHAR(100), position VARCHAR(50));"},
    {"user_input": "Set up student alumni network and mentorship records.", "sql_query": "CREATE TABLE student_alumni (alumni_id INT PRIMARY KEY, name VARCHAR(100), graduation_year INT); CREATE TABLE student_mentorship (student_id INT PRIMARY KEY, mentor_name VARCHAR(100), duration_months INT);"},
    {"user_input": "Create student study groups and group project tables.", "sql_query": "CREATE TABLE student_study_groups (group_id INT PRIMARY KEY, group_name VARCHAR(100), subject VARCHAR(100)); CREATE TABLE student_group_projects (project_id INT PRIMARY KEY, project_title VARCHAR(255), team_size INT);"},
    {"user_input": "Generate student online learning progress tracking and certifications.", "sql_query": "CREATE TABLE student_online_learning (student_id INT PRIMARY KEY, platform VARCHAR(100), course_title VARCHAR(255)); CREATE TABLE student_certificates (student_id INT PRIMARY KEY, certificate_name VARCHAR(255), completion_date DATE);"},
    {"user_input": "Set up student career counseling sessions and resume submissions.", "sql_query": "CREATE TABLE student_counseling (student_id INT PRIMARY KEY, counselor_name VARCHAR(100), session_date DATE); CREATE TABLE student_resume (student_id INT PRIMARY KEY, resume_link VARCHAR(255), last_updated DATE);"},
    {"user_input": "Make student transportation records and route details.", "sql_query": "CREATE TABLE student_transport (student_id INT PRIMARY KEY, bus_route VARCHAR(50), pickup_point VARCHAR(100)); CREATE TABLE student_vehicle (student_id INT PRIMARY KEY, vehicle_type VARCHAR(50), registration_number VARCHAR(50));"},
    {"user_input": "Create student hackathon participation and coding competition tables.", "sql_query": "CREATE TABLE student_hackathons (student_id INT PRIMARY KEY, hackathon_name VARCHAR(100), position VARCHAR(50)); CREATE TABLE student_coding_contests (student_id INT PRIMARY KEY, contest_name VARCHAR(100), rank INT);"},
    {"user_input": "Generate tables for student online attendance and virtual classroom participation.", "sql_query": "CREATE TABLE student_online_attendance (student_id INT PRIMARY KEY, subject VARCHAR(100), attendance_percentage FLOAT); CREATE TABLE student_virtual_classroom (student_id INT PRIMARY KEY, platform VARCHAR(100), session_duration INT);"},
    {"user_input": "Set up student research assistantships and grants received.", "sql_query": "CREATE TABLE student_research_assistants (student_id INT PRIMARY KEY, professor_name VARCHAR(100), project_title VARCHAR(255)); CREATE TABLE student_grants (student_id INT PRIMARY KEY, grant_name VARCHAR(100), funding_amount DECIMAL(10,2));"},
    {"user_input": "Make student freelancing projects and entrepreneurial ventures tables.", "sql_query": "CREATE TABLE student_freelance (student_id INT PRIMARY KEY, project_name VARCHAR(100), earnings DECIMAL(10,2)); CREATE TABLE student_startups (student_id INT PRIMARY KEY, startup_name VARCHAR(100), industry VARCHAR(100));"},
    {"user_input": "Create student library late returns and fine records.", "sql_query": "CREATE TABLE student_late_returns (student_id INT PRIMARY KEY, book_title VARCHAR(255), return_date DATE); CREATE TABLE student_library_fines (student_id INT PRIMARY KEY, fine_amount DECIMAL(10,2), due_date DATE);"},
    {"user_input": "Generate student personal development workshops and guest lectures.", "sql_query": "CREATE TABLE student_workshops (student_id INT PRIMARY KEY, workshop_topic VARCHAR(255), organizer VARCHAR(100)); CREATE TABLE student_guest_lectures (student_id INT PRIMARY KEY, lecturer_name VARCHAR(100), lecture_topic VARCHAR(255));"},
    {"user_input": "Retrieve student names along with their enrolled course names.", "sql_query": "SELECT students.name, courses.course_name FROM students INNER JOIN enrollments ON students.student_id = enrollments.student_id INNER JOIN courses ON enrollments.course_id = courses.course_id;"},
    {"user_input": "List all students and their assigned mentors, even if some students don't have mentors.", "sql_query": "SELECT students.name, mentors.mentor_name FROM students LEFT JOIN mentors ON students.mentor_id = mentors.mentor_id;"},
    {"user_input": "Show all course names and the students enrolled in them, including courses with no enrollments.", "sql_query": "SELECT courses.course_name, students.name FROM courses LEFT JOIN enrollments ON courses.course_id = enrollments.course_id LEFT JOIN students ON enrollments.student_id = students.student_id;"},
    {"user_input": "Retrieve student emails and the department they belong to.", "sql_query": "SELECT students.email, departments.department_name FROM students INNER JOIN departments ON students.department_id = departments.department_id;"},
    {"user_input": "List students along with their scholarship details, even if they don’t have a scholarship.", "sql_query": "SELECT students.name, scholarships.scholarship_type FROM students LEFT JOIN scholarships ON students.student_id = scholarships.student_id;"},
    {"user_input": "Show students and their hostel room details, including students without a hostel assignment.", "sql_query": "SELECT students.name, hostels.room_number FROM students LEFT JOIN hostels ON students.hostel_id = hostels.hostel_id;"},
    {"user_input": "Retrieve student names and their library membership status.", "sql_query": "SELECT students.name, library_membership.status FROM students LEFT JOIN library_membership ON students.student_id = library_membership.student_id;"},
    {"user_input": "Show all students and their internship companies, even if they haven't secured an internship.", "sql_query": "SELECT students.name, internships.company_name FROM students LEFT JOIN internships ON students.student_id = internships.student_id;"},
    {"user_input": "Retrieve students along with their registered sports activities.", "sql_query": "SELECT students.name, sports.activity_name FROM students INNER JOIN sports_registrations ON students.student_id = sports_registrations.student_id INNER JOIN sports ON sports_registrations.sport_id = sports.sport_id;"},
    {"user_input": "Show students and their registered clubs, including students who haven't joined any club.", "sql_query": "SELECT students.name, clubs.club_name FROM students LEFT JOIN club_memberships ON students.student_id = club_memberships.student_id LEFT JOIN clubs ON club_memberships.club_id = clubs.club_id;"},
    {"user_input": "Find all student pairs in the same batch.", "sql_query": "SELECT a.student_name AS student1, b.student_name AS student2 FROM students a CROSS JOIN students b WHERE a.batch_id = b.batch_id AND a.student_id < b.student_id;"},
    {"user_input": "List all possible mentor-student guidance pairs.", "sql_query": "SELECT students.student_name, mentors.mentor_name FROM students CROSS JOIN mentors;"},
    {"user_input": "Generate all possible student-course enrollments.", "sql_query": "SELECT students.student_name, courses.course_title FROM students CROSS JOIN courses;"},
    {"user_input": "Find students who have the same peer mentor.", "sql_query": "SELECT a.student_name AS student1, b.student_name AS student2 FROM students a CROSS JOIN students b WHERE a.mentor_id = b.mentor_id AND a.student_id < b.student_id;"},
    {"user_input": "Pair students with available project topics.", "sql_query": "SELECT students.student_name, projects.project_title FROM students CROSS JOIN projects;"},
    {"user_input": "Match students with study groups.", "sql_query": "SELECT students.student_name, study_groups.group_name FROM students CROSS JOIN study_groups;"},
    {"user_input": "Identify students in the same research team.", "sql_query": "SELECT a.student_name AS student1, b.student_name AS student2 FROM students a CROSS JOIN students b WHERE a.research_team_id = b.research_team_id AND a.student_id < b.student_id;"},
    {"user_input": "Find students who could be roommates.", "sql_query": "SELECT a.student_name AS student1, b.student_name AS student2 FROM students a CROSS JOIN students b WHERE a.hostel_id = b.hostel_id AND a.student_id < b.student_id;"},
    {"user_input": "List duplicate student records.", "sql_query": "SELECT a.student_name, a.student_id, b.student_id FROM students a JOIN students b ON a.student_name = b.student_name AND a.student_id != b.student_id;"},
    {"user_input": "Find students with the same elective course.", "sql_query": "SELECT a.student_name AS student1, b.student_name AS student2 FROM students a CROSS JOIN students b WHERE a.elective_id = b.elective_id AND a.student_id < b.student_id;"},
    {"user_input": "Generate student-exam hall assignments.", "sql_query": "SELECT students.student_name, halls.hall_name FROM students CROSS JOIN halls;"},
    {"user_input": "List all student-transport options.", "sql_query": "SELECT students.student_name, transport.transport_mode FROM students CROSS JOIN transport;"},
    {"user_input": "Find students attending the same seminar.", "sql_query": "SELECT a.student_name AS student1, b.student_name AS student2 FROM students a CROSS JOIN students b WHERE a.seminar_id = b.seminar_id AND a.student_id < b.student_id;"},
    {"user_input": "Find students grouped by shared skills.", "sql_query": "SELECT a.student_name AS student1, b.student_name AS student2, skills.skill_name FROM students a CROSS JOIN students b JOIN skills ON a.skill_id = b.skill_id WHERE a.student_id < b.student_id;"},
    {"user_input": "Generate possible student-faculty advisor assignments.", "sql_query": "SELECT students.student_name, faculty.faculty_name FROM students CROSS JOIN faculty;"},
    {"user_input": "Pair students for lab partner assignments.", "sql_query": "SELECT a.student_name AS student1, b.student_name AS student2 FROM students a CROSS JOIN students b WHERE a.lab_group_id = b.lab_group_id AND a.student_id < b.student_id;"},
    {"user_input": "Generate student-library book allocations.", "sql_query": "SELECT students.student_name, books.book_title FROM students CROSS JOIN books;"},
    {"user_input": "Find students in the same foreign exchange program.", "sql_query": "SELECT a.student_name AS student1, b.student_name AS student2 FROM students a CROSS JOIN students b WHERE a.exchange_program_id = b.exchange_program_id AND a.student_id < b.student_id;"},
    {"user_input": "List student pairs with the same internship mentor.", "sql_query": "SELECT a.student_name AS student1, b.student_name AS student2, mentors.mentor_name FROM students a CROSS JOIN students b JOIN mentors ON a.mentor_id = b.mentor_id WHERE a.student_id < b.student_id;"},
    {"user_input": "Find all possible exam invigilator-student assignments.", "sql_query": "SELECT students.student_name, invigilators.invigilator_name FROM students CROSS JOIN invigilators;"},
    {"user_input": "Identify students with the same attendance pattern.", "sql_query": "SELECT a.student_name AS student1, b.student_name AS student2 FROM attendance a CROSS JOIN attendance b WHERE a.subject_id = b.subject_id AND a.attendance_status = b.attendance_status AND a.student_id < b.student_id;"},
    {"user_input": "Generate student-course registrations for unenrolled students.", "sql_query": "SELECT students.student_name, courses.course_title FROM students CROSS JOIN courses WHERE NOT EXISTS (SELECT 1 FROM enrollments WHERE enrollments.student_id = students.student_id AND enrollments.course_id = courses.course_id);"},
    {"user_input": "Find students with the same sports preference.", "sql_query": "SELECT a.student_name AS student1, b.student_name AS student2, sports.sport_name FROM students a CROSS JOIN students b JOIN sports ON a.sport_id = b.sport_id WHERE a.student_id < b.student_id;"},
    {"user_input": "Fetch all students and their enrolled courses, ensuring even students without enrollments are listed.", "sql_query": "SELECT s.student_id, s.name, c.course_title FROM students s LEFT JOIN enrollments e ON s.student_id = e.student_id LEFT JOIN courses c ON e.course_id = c.course_id;"},
    {"user_input": "Retrieve all courses and their respective students, including courses without students.", "sql_query": "SELECT c.course_id, c.course_title, s.name FROM courses c LEFT JOIN enrollments e ON c.course_id = e.course_id LEFT JOIN students s ON e.student_id = s.student_id;"},
    {"user_input": "List students along with their scholarship details, even if they don’t have one.", "sql_query": "SELECT s.student_id, s.name, sch.scholarship_name FROM students s LEFT JOIN scholarships sch ON s.scholarship_id = sch.scholarship_id;"},
    {"user_input": "Fetch all scholarships and their respective students, even if some scholarships are unclaimed.", "sql_query": "SELECT sch.scholarship_id, sch.scholarship_name, s.name FROM scholarships sch LEFT JOIN students s ON sch.scholarship_id = s.scholarship_id;"},
    {"user_input": "Retrieve all students and their assigned class mentors, including those without a mentor.", "sql_query": "SELECT s.student_id, s.name, m.mentor_name FROM students s LEFT JOIN mentors m ON s.mentor_id = m.mentor_id;"},
    {"user_input": "Get all mentors and their students, ensuring even mentors without students appear in the result.", "sql_query": "SELECT m.mentor_id, m.mentor_name, s.name FROM mentors m LEFT JOIN students s ON m.mentor_id = s.mentor_id;"},
    {"user_input": "List students and their clubs, including those not part of any club.", "sql_query": "SELECT s.student_id, s.name, c.club_name FROM students s LEFT JOIN clubs c ON s.club_id = c.club_id;"},
    {"user_input": "Retrieve all clubs and their members, including clubs with no registered students.", "sql_query": "SELECT c.club_id, c.club_name, s.name FROM clubs c LEFT JOIN students s ON c.club_id = s.club_id;"},
    {"user_input": "Fetch students and their assigned thesis advisors, even if they don’t have one yet.", "sql_query": "SELECT s.student_id, s.name, f.faculty_name FROM students s LEFT JOIN faculty f ON s.advisor_id = f.faculty_id;"},
    {"user_input": "Get all faculty members along with their thesis students, including those with no assigned students.", "sql_query": "SELECT f.faculty_id, f.faculty_name, s.name FROM faculty f LEFT JOIN students s ON f.faculty_id = s.advisor_id;"},
    {"user_input": "List students and their associated internship companies, even if some haven't secured an internship.", "sql_query": "SELECT s.student_id, s.name, i.company_name FROM students s LEFT JOIN internships i ON s.internship_id = i.internship_id;"},
    {"user_input": "Retrieve all internship companies and their assigned students, including companies without interns.", "sql_query": "SELECT i.internship_id, i.company_name, s.name FROM internships i LEFT JOIN students s ON i.internship_id = s.internship_id;"},
    {"user_input": "Fetch students and their hostel assignments, including those who don’t stay in a hostel.", "sql_query": "SELECT s.student_id, s.name, h.hostel_name FROM students s LEFT JOIN hostels h ON s.hostel_id = h.hostel_id;"},
    {"user_input": "Get all hostels and the students staying in them, ensuring hostels without students are included.", "sql_query": "SELECT h.hostel_id, h.hostel_name, s.name FROM hostels h LEFT JOIN students s ON h.hostel_id = s.hostel_id;"},
    {"user_input": "List students and their elective subjects, even if some haven’t chosen an elective.", "sql_query": "SELECT s.student_id, s.name, e.course_title FROM students s LEFT JOIN electives e ON s.elective_id = e.elective_id;"},
    {"user_input": "Retrieve all elective courses and the students enrolled in them, even if some electives are unchosen.", "sql_query": "SELECT e.elective_id, e.course_title, s.name FROM electives e LEFT JOIN students s ON e.elective_id = s.elective_id;"},
    {"user_input": "Fetch students and their assigned research teams, even if some students are not in a research team.", "sql_query": "SELECT s.student_id, s.name, r.team_name FROM students s LEFT JOIN research_teams r ON s.research_team_id = r.research_team_id;"},
    {"user_input": "Get all research teams and their student members, ensuring research teams with no students appear.", "sql_query": "SELECT r.research_team_id, r.team_name, s.name FROM research_teams r LEFT JOIN students s ON r.research_team_id = s.research_team_id;"},
    {"user_input": "List students and their assigned project groups, including those who haven’t joined one.", "sql_query": "SELECT s.student_id, s.name, p.project_title FROM students s LEFT JOIN projects p ON s.project_group_id = p.project_group_id;"},
    {"user_input": "Retrieve all project groups and their assigned students, including empty project groups.", "sql_query": "SELECT p.project_group_id, p.project_title, s.name FROM projects p LEFT JOIN students s ON p.project_group_id = s.project_group_id;"},
    {"user_input": "Fetch students and their university departments, ensuring students without a department are listed.", "sql_query": "SELECT s.student_id, s.name, d.department_name FROM students s LEFT JOIN departments d ON s.department_id = d.department_id;"},
    {"user_input": "Get all university departments and their students, including departments without any students.", "sql_query": "SELECT d.department_id, d.department_name, s.name FROM departments d LEFT JOIN students s ON d.department_id = s.department_id;"},
    {"user_input": "List students and their enrolled academic years, even if some records are missing.", "sql_query": "SELECT s.student_id, s.name, y.academic_year FROM students s LEFT JOIN academic_years y ON s.academic_year_id = y.academic_year_id;"},
    {"user_input": "Retrieve all academic years and the students enrolled in them, including years with no students.", "sql_query": "SELECT y.academic_year_id, y.academic_year, s.name FROM academic_years y LEFT JOIN students s ON y.academic_year_id = s.academic_year_id;"},
    {"user_input": "Fetch students and their library membership details, including those without memberships.", "sql_query": "SELECT s.student_id, s.name, l.library_card FROM students s LEFT JOIN library_memberships l ON s.library_id = l.library_id;"},
    {"user_input": "Get all library memberships and their respective students, even if some memberships are unused.", "sql_query": "SELECT l.library_id, l.library_card, s.name FROM library_memberships l LEFT JOIN students s ON l.library_id = s.library_id;"},
    {"user_input": "List students and their part-time job assignments, including those without jobs.", "sql_query": "SELECT s.student_id, s.name, p.job_title FROM students s LEFT JOIN part_time_jobs p ON s.job_id = p.job_id;"},
    {"user_input": "Retrieve all part-time jobs and their respective students, even if no students are assigned.", "sql_query": "SELECT p.job_id, p.job_title, s.name FROM part_time_jobs p LEFT JOIN students s ON p.job_id = s.job_id;"},
    {"user_input": "Verify if the student committee entry exists before committing.", "sql_query": "SELECT * FROM student_committee WHERE committee_id = 7; COMMIT;"},
    {"user_input": "Rollback the deletion of a student committee.", "sql_query": "DELETE FROM student_committee WHERE committee_id = 8; ROLLBACK;"},
    {"user_input": "Verify if the student committee entry exists before rolling back.", "sql_query": "SELECT * FROM student_committee WHERE committee_id = 8; ROLLBACK;"},
    {"user_input": "Check if a committee update was successful before committing.", "sql_query": "SELECT * FROM student_committee WHERE committee_id = 7 AND name = 'Innovation Hub'; COMMIT;"},
    {"user_input": "Check if a committee update was incorrect before rolling back.", "sql_query": "SELECT * FROM student_committee WHERE committee_id = 8 AND name = 'Entrepreneurship Club'; ROLLBACK;"},
    {"user_input": "Ensure a student committee record is present before deleting and committing.", "sql_query": "SELECT * FROM student_committee WHERE committee_id = 7; DELETE FROM student_committee WHERE committee_id = 7; COMMIT;"},
    {"user_input": "Ensure a student committee record is present before deleting and rolling back.", "sql_query": "SELECT * FROM student_committee WHERE committee_id = 8; DELETE FROM student_committee WHERE committee_id = 8; ROLLBACK;"},
    {"user_input": "Verify if a new student committee was inserted before committing.", "sql_query": "SELECT * FROM student_committee WHERE committee_id = 9; COMMIT;"},
    {"user_input": "Verify if a new student committee was inserted before rolling back.", "sql_query": "SELECT * FROM student_committee WHERE committee_id = 10; ROLLBACK;"},
    {"user_input": "Check if multiple student committee records exist before committing.", "sql_query": "SELECT * FROM student_committee WHERE committee_id IN (11, 12); COMMIT;"},
    {"user_input": "Check if multiple student committee records exist before rolling back.", "sql_query": "SELECT * FROM student_committee WHERE committee_id IN (13, 14); ROLLBACK;"},
    {"user_input": "Verify if a research group exists before committing an update.", "sql_query": "SELECT * FROM student_research_group WHERE group_id = 5 AND topic = 'AI for Healthcare'; COMMIT;"},
    {"user_input": "Verify if a research group update should be rolled back.", "sql_query": "SELECT * FROM student_research_group WHERE group_id = 6 AND topic = 'Edge Computing'; ROLLBACK;"},
    {"user_input": "Ensure a thesis supervisor record exists before committing an update.", "sql_query": "SELECT * FROM thesis_supervisor WHERE advisor_id = 4 AND name = 'Dr. Black'; COMMIT;"},
    {"user_input": "Ensure a thesis supervisor record exists before rolling back an update.", "sql_query": "SELECT * FROM thesis_supervisor WHERE advisor_id = 5 AND name = 'Dr. Gray'; ROLLBACK;"},
    {"user_input": "Verify financial aid details before committing an update.", "sql_query": "SELECT * FROM financial_aid WHERE scholarship_id = 5 AND amount = 7800.00; COMMIT;"},
    {"user_input": "Verify financial aid details before rolling back an update.", "sql_query": "SELECT * FROM financial_aid WHERE scholarship_id = 6 AND amount = 8200.00; ROLLBACK;"},
    {"user_input": "Ensure an internship record is present before committing an update.", "sql_query": "SELECT * FROM student_internship WHERE internship_id = 5 AND company = 'Cisco'; COMMIT;"},
    {"user_input": "Ensure an internship record is present before rolling back an update.", "sql_query": "SELECT * FROM student_internship WHERE internship_id = 6 AND company = 'Oracle'; ROLLBACK;"},
    {"user_input": "Check if a committee membership record exists before committing.", "sql_query": "SELECT * FROM student_committee WHERE committee_id = 15; COMMIT;"},
    {"user_input": "Check if a committee membership record exists before rolling back.", "sql_query": "SELECT * FROM student_committee WHERE committee_id = 16; ROLLBACK;"},
    {"user_input": "Ensure student committee roles are properly updated before committing.", "sql_query": "SELECT * FROM student_committee WHERE committee_id = 17 AND role = 'President'; COMMIT;"},
    {"user_input": "Ensure student committee roles are properly updated before rolling back.", "sql_query": "SELECT * FROM student_committee WHERE committee_id = 18 AND role = 'Treasurer'; ROLLBACK;"},
    {"user_input": "Check if a student was assigned to a committee before committing.", "sql_query": "SELECT * FROM student_committee_assignment WHERE student_id = 101 AND committee_id = 19; COMMIT;"},
    {"user_input": "Check if a student was assigned to a committee before rolling back.", "sql_query": "SELECT * FROM student_committee_assignment WHERE student_id = 102 AND committee_id = 20; ROLLBACK;"},
    {"user_input": "Verify if a committee project exists before committing updates.", "sql_query": "SELECT * FROM student_committee_projects WHERE project_id = 21; COMMIT;"},
    {"user_input": "Verify if a committee project exists before rolling back updates.", "sql_query": "SELECT * FROM student_committee_projects WHERE project_id = 22; ROLLBACK;"},
    {"user_input": "Ensure committee budgets are updated correctly before committing.", "sql_query": "SELECT * FROM committee_budget WHERE committee_id = 23 AND amount = 50000.00; COMMIT;"},
    {"user_input": "Ensure committee budgets are updated correctly before rolling back.", "sql_query": "SELECT * FROM committee_budget WHERE committee_id = 24 AND amount = 60000.00; ROLLBACK;"},
    {"user_input": "Check if a committee decision is finalized before committing.", "sql_query": "SELECT * FROM committee_decisions WHERE decision_id = 25 AND status = 'Approved'; COMMIT;"},
    {"user_input": "Check if a committee decision is finalized before rolling back.", "sql_query": "SELECT * FROM committee_decisions WHERE decision_id = 26 AND status = 'Pending'; ROLLBACK;"},
    {"user_input": "Ensure committee meeting schedules are accurate before committing.", "sql_query": "SELECT * FROM committee_meeting WHERE meeting_id = 27 AND date = '2025-06-15'; COMMIT;"},
    {"user_input": "Ensure committee meeting schedules are accurate before rolling back.", "sql_query": "SELECT * FROM committee_meeting WHERE meeting_id = 28 AND date = '2025-07-20'; ROLLBACK;"},
    {"user_input": "Verify committee event approvals before committing.", "sql_query": "SELECT * FROM committee_events WHERE event_id = 29 AND approved = TRUE; COMMIT;"},
    {"user_input": "Rollback the insertion of a student internship record.", "sql_query": "INSERT INTO student_internship VALUES (6, 'NVIDIA'); ROLLBACK;"},
    {"user_input": "Verify committee event approvals before rolling back.", "sql_query": "SELECT * FROM committee_events WHERE event_id = 30 AND approved = FALSE; ROLLBACK;"},
    {"user_input": "Ensure committee attendance records are correct before committing.", "sql_query": "SELECT * FROM committee_attendance WHERE meeting_id = 31 AND present = TRUE; COMMIT;"},
    {"user_input": "Ensure committee attendance records are correct before rolling back.", "sql_query": "SELECT * FROM committee_attendance WHERE meeting_id = 32 AND present = FALSE; ROLLBACK;"},
    {"user_input": "Verify if a student committee feedback form is submitted before committing.", "sql_query": "SELECT * FROM committee_feedback WHERE student_id = 103 AND submitted = TRUE; COMMIT;"},
    {"user_input": "Verify if a student committee feedback form is submitted before rolling back.", "sql_query": "SELECT * FROM committee_feedback WHERE student_id = 104 AND submitted = FALSE; ROLLBACK;"},
    {"user_input": "Verify students who are enrolled in at least one course but have not taken any exams.", "sql_query": "SELECT student_id, student_name FROM students WHERE student_id IN (SELECT student_id FROM enrollments) AND student_id NOT IN (SELECT student_id FROM exams);"},
    {"user_input": "Verify students who have the highest GPA in their respective departments.", "sql_query": "SELECT student_id, student_name, department FROM students WHERE (department, gpa) IN (SELECT department, MAX(gpa) FROM students GROUP BY department);"},
    {"user_input": "Check students who have enrolled in both online and offline courses.", "sql_query": "SELECT student_id, student_name FROM students WHERE student_id IN (SELECT student_id FROM enrollments WHERE mode = 'Online') AND student_id IN (SELECT student_id FROM enrollments WHERE mode = 'Offline');"},
    {"user_input": "Verify students who have completed more than the department's average elective courses.", "sql_query": "SELECT student_id, student_name FROM students WHERE student_id IN (SELECT student_id FROM enrollments WHERE course_id IN (SELECT course_id FROM courses WHERE elective = 'Y') GROUP BY student_id HAVING COUNT(course_id) > (SELECT AVG(course_count) FROM (SELECT student_id, COUNT(course_id) AS course_count FROM enrollments WHERE course_id IN (SELECT course_id FROM courses WHERE elective = 'Y') GROUP BY student_id) AS avg_course));"},
    {"user_input": "Check students who received a scholarship but have not attended any extracurricular activities.", "sql_query": "SELECT student_id, student_name FROM students WHERE student_id IN (SELECT student_id FROM scholarships) AND student_id NOT IN (SELECT student_id FROM extracurricular_activities);"},
    {"user_input": "Verify students who have participated in research projects but have not published any papers.", "sql_query": "SELECT student_id, student_name FROM students WHERE student_id IN (SELECT student_id FROM research_participation) AND student_id NOT IN (SELECT student_id FROM research_papers);"},
    {"user_input": "Check students who have attended at least one seminar but have not registered for any workshops.", "sql_query": "SELECT student_id, student_name FROM students WHERE student_id IN (SELECT student_id FROM seminar_attendance) AND student_id NOT IN (SELECT student_id FROM workshops);"},
    {"user_input": "Verify students who have more than two internship experiences.", "sql_query": "SELECT student_id, student_name FROM students WHERE student_id IN (SELECT student_id FROM internships GROUP BY student_id HAVING COUNT(internship_id) > 2);"},
    {"user_input": "Find students who have received a scholarship and also completed at least one internship.", "sql_query": "SELECT student_id, student_name FROM students WHERE student_id IN (SELECT student_id FROM scholarships) AND student_id IN (SELECT student_id FROM internships);"},
    {"user_input": "Verify students who have not enrolled in any course but have registered for placement training.", "sql_query": "SELECT student_id, student_name FROM students WHERE student_id NOT IN (SELECT student_id FROM enrollments) AND student_id IN (SELECT student_id FROM placement_training);"},
    {"user_input": "Check students who have completed their degree but have not collected their certificates.", "sql_query": "SELECT student_id, student_name FROM students WHERE student_id IN (SELECT student_id FROM degree_completion) AND student_id NOT IN (SELECT student_id FROM certificate_collection);"},
    {"user_input": "Verify students who have taken the maximum number of subjects in their batch.", "sql_query": "SELECT student_id, student_name FROM students WHERE student_id = (SELECT student_id FROM enrollments GROUP BY student_id ORDER BY COUNT(course_id) DESC LIMIT 1);"},
    {"user_input": "Check students who have attended more meetings than the department average.", "sql_query": "SELECT student_id, student_name FROM students WHERE student_id IN (SELECT student_id FROM committee_meeting_participation GROUP BY student_id HAVING COUNT(meeting_id) > (SELECT AVG(meeting_count) FROM (SELECT student_id, COUNT(meeting_id) AS meeting_count FROM committee_meeting_participation GROUP BY student_id) AS avg_meeting));"},
    {"user_input": "Verify students who have participated in all mandatory projects.", "sql_query": "SELECT student_id, student_name FROM students WHERE NOT EXISTS (SELECT project_id FROM research_projects WHERE mandatory = 'Y' EXCEPT SELECT project_id FROM research_participation WHERE research_participation.student_id = students.student_id);"},
    {"user_input": "Check students who have taken more than three elective courses but have not participated in research activities.", "sql_query": "SELECT student_id, student_name FROM students WHERE student_id IN (SELECT student_id FROM enrollments WHERE course_id IN (SELECT course_id FROM courses WHERE elective = 'Y') GROUP BY student_id HAVING COUNT(course_id) > 3) AND student_id NOT IN (SELECT student_id FROM research_participation);"},
    {"user_input": "Verify students who have attended live online sessions but have not completed assignments.", "sql_query": "SELECT student_id, student_name FROM students WHERE student_id IN (SELECT student_id FROM live_sessions_attendance) AND student_id NOT IN (SELECT student_id FROM assignments_submission);"},
    {"user_input": "Check students who have been assigned mentors but have not scheduled any mentorship meetings.", "sql_query": "SELECT student_id, student_name FROM students WHERE student_id IN (SELECT student_id FROM mentorship_assignments) AND student_id NOT IN (SELECT student_id FROM mentorship_meetings);"},
    {"user_input": "Verify students who have taken all core subjects required for their program.", "sql_query": "SELECT student_id, student_name FROM students WHERE NOT EXISTS (SELECT course_id FROM program_requirements WHERE core = 'Y' EXCEPT SELECT course_id FROM enrollments WHERE enrollments.student_id = students.student_id);"},
    {"user_input": "Check students who have received feedback from more than two faculty members.", "sql_query": "SELECT student_id, student_name FROM students WHERE student_id IN (SELECT student_id FROM professor_feedback GROUP BY student_id HAVING COUNT(DISTINCT professor_id) > 2);"},
    {"user_input": "Verify students who have completed more assignments than the average number of assignments submitted in their department.", "sql_query": "SELECT student_id, student_name FROM students WHERE student_id IN (SELECT student_id FROM assignments_submission GROUP BY student_id HAVING COUNT(assignment_id) > (SELECT AVG(assignments_count) FROM (SELECT student_id, COUNT(assignment_id) AS assignments_count FROM assignments_submission GROUP BY student_id) AS avg_assignments));"}
]