[
    {"user_input": "Find students who scored above 85 in Mathematics.", "sql_query": "SELECT * FROM students WHERE math_score > 85;"},
    {"user_input": "Fetch students who scored between 70 and 85 in Mathematics.", "sql_query": "SELECT * FROM students WHERE math_score BETWEEN 70 AND 85;"},
    {"user_input": "Find students who scored exactly 75 in Mathematics.", "sql_query": "SELECT * FROM students WHERE math_score = 75;"},
    {"user_input": "Select students who scored below 40 in Science.", "sql_query": "SELECT * FROM students WHERE science_score < 40;"},
    {"user_input": "Find students who scored above 90 in Science.", "sql_query": "SELECT * FROM students WHERE science_score > 90;"},
    {"user_input": "Find students who have an attendance percentage lower than 60%.", "sql_query": "SELECT * FROM students WHERE attendance_percentage < 60;"},
    {"user_input": "Find students who have an attendance percentage between 70% and 85%.", "sql_query": "SELECT * FROM students WHERE attendance_percentage BETWEEN 70 AND 85;"},
    {"user_input": "Find students with exactly 90% attendance.", "sql_query": "SELECT * FROM students WHERE attendance_percentage = 90;"},
    {"user_input": "Show students who have more than 3 disciplinary warnings.", "sql_query": "SELECT * FROM students WHERE disciplinary_warnings > 3;"},
    {"user_input": "Find students who have no disciplinary warnings.", "sql_query": "SELECT * FROM students WHERE disciplinary_warnings = 0;"},
    {"user_input": "Find students who have checked out more than 3 books from the library.", "sql_query": "SELECT * FROM students WHERE library_books_issued > 3;"},
    {"user_input": "Retrieve students who have checked out between 1 and 3 books from the library.", "sql_query": "SELECT * FROM students WHERE library_books_issued BETWEEN 1 AND 3;"},
    {"user_input": "Find students who have checked out exactly 2 books.", "sql_query": "SELECT * FROM students WHERE library_books_issued = 2;"},
    {"user_input": "Find students whose first name starts with 'A'.", "sql_query": "SELECT * FROM students WHERE first_name LIKE 'A%';"},
    {"user_input": "Find students whose last name contains 'Singh'.", "sql_query": "SELECT * FROM students WHERE last_name LIKE '%Singh%';"},
    {"user_input": "Display students whose email ends with 'edu.in'.", "sql_query": "SELECT * FROM students WHERE email LIKE '%edu.in';"},
    {"user_input": "Find students whose email does not contain 'hotmail'.", "sql_query": "SELECT * FROM students WHERE email NOT LIKE '%hotmail%';"},
    {"user_input": "Find students who are in the top 10 based on average score.", "sql_query": "SELECT * FROM students ORDER BY avg_score DESC LIMIT 10;"},
    {"user_input": "Find students who are in the bottom 10 based on average score.", "sql_query": "SELECT * FROM students ORDER BY avg_score ASC LIMIT 10;"},
    {"user_input": "Show students who live in 'Mumbai'.", "sql_query": "SELECT * FROM students WHERE city = 'Mumbai';"},
    {"user_input": "Find students who live outside 'Bangalore'.", "sql_query": "SELECT * FROM students WHERE city != 'Bangalore';"},
    {"user_input": "Find students who have more than 2 siblings.", "sql_query": "SELECT * FROM students WHERE num_of_siblings > 2;"},
    {"user_input": "Get students who have only 1 sibling.", "sql_query": "SELECT * FROM students WHERE num_of_siblings = 1;"},
    {"user_input": "Find students who participate in exactly 2 extracurricular activities.", "sql_query": "SELECT * FROM students WHERE extracurricular_activities = 2;"},
    {"user_input": "Find students who do not participate in extracurricular activities.", "sql_query": "SELECT * FROM students WHERE extracurricular_activities = 0;"},
    {"user_input": "Display students who were born in the year 2007.", "sql_query": "SELECT * FROM students WHERE birth_year = 2007;"},
    {"user_input": "Find students who were born between 2005 and 2010.", "sql_query": "SELECT * FROM students WHERE birth_year BETWEEN 2005 AND 2010;"},
    {"user_input": "Display students who received scholarships greater than 20,000.", "sql_query": "SELECT * FROM students WHERE scholarship_amount > 20000;"},
    {"user_input": "Find students who received scholarships between 10,000 and 20,000.", "sql_query": "SELECT * FROM students WHERE scholarship_amount BETWEEN 10000 AND 20000;"},
    {"user_input": "Find students who received exactly 5,000 in scholarships.", "sql_query": "SELECT * FROM students WHERE scholarship_amount = 5000;"},
    {"user_input": "Find students with pending fees greater than 15,000.", "sql_query": "SELECT * FROM students WHERE fees_pending > 15000;"},
    {"user_input": "Display students with pending fees between 5,000 and 15,000.", "sql_query": "SELECT * FROM students WHERE fees_pending BETWEEN 5000 AND 15000;"},
    {"user_input": "Find students who have no pending fees.", "sql_query": "SELECT * FROM students WHERE fees_pending = 0;"},
    {"user_input": "Find students who have secured the first position in any subject.", "sql_query": "SELECT * FROM students WHERE subject_rank = 1;"},
    {"user_input": "Find students who have secured a rank lower than 3 in any subject.", "sql_query": "SELECT * FROM students WHERE subject_rank < 3;"},
    {"user_input": "Display students who have secured a rank greater than 15 in any subject.", "sql_query": "SELECT * FROM students WHERE subject_rank > 15;"},
    {"user_input": "Find students who have received at least 2 warnings for discipline violations.", "sql_query": "SELECT * FROM students WHERE disciplinary_warnings >= 2;"},
    {"user_input": "Find students who have not received any warnings.", "sql_query": "SELECT * FROM students WHERE disciplinary_warnings = 0;"},
    {"user_input": "Show details of students achieving more than 80% in Mathematics.", "sql_query": "SELECT * FROM students WHERE math_score > 80;"},
    {"user_input": "List students securing exactly 85 marks in Science.", "sql_query": "SELECT * FROM students WHERE science_score = 85;"},
    {"user_input": "Extract names of students with attendance lower than 50%.", "sql_query": "SELECT name FROM students WHERE attendance_percentage < 50;"},
    {"user_input": "Retrieve students whose attendance lies between 70% and 90%.", "sql_query": "SELECT * FROM students WHERE attendance_percentage BETWEEN 70 AND 90;"},
    {"user_input": "Which students did not borrow books from the library?", "sql_query": "SELECT * FROM students WHERE library_books_issued = 0;"},
    {"user_input": "Identify students who checked out more than 5 books.", "sql_query": "SELECT * FROM students WHERE library_books_issued > 5;"},
    {"user_input": "Display students with a discipline score lower than 3.", "sql_query": "SELECT * FROM students WHERE disciplinary_score < 3;"},
    {"user_input": "Who holds the first position in their respective subjects?", "sql_query": "SELECT * FROM students WHERE subject_rank = 1;"},
    {"user_input": "Find all students ranked between 5 and 10 in any subject.", "sql_query": "SELECT * FROM students WHERE subject_rank BETWEEN 5 AND 10;"},
    {"user_input": "Show students who participate in at least three extracurricular activities.", "sql_query": "SELECT * FROM students WHERE extracurricular_activities >= 3;"},
    {"user_input": "List students who have not participated in any sports.", "sql_query": "SELECT * FROM students WHERE sports_participation = 0;"},
    {"user_input": "Highlight students who received a scholarship of ₹15,000 or more.", "sql_query": "SELECT * FROM students WHERE scholarship_amount >= 15000;"},
    {"user_input": "Fetch students with pending fees greater than ₹20,000.", "sql_query": "SELECT * FROM students WHERE fees_pending > 20000;"},
    {"user_input": "Show students who cleared their fees completely.", "sql_query": "SELECT * FROM students WHERE fees_pending = 0;"},
    {"user_input": "Identify students from Mumbai who scored above 80 in Science.", "sql_query": "SELECT * FROM students WHERE city = 'Mumbai' AND science_score > 80;"},
    {"user_input": "Which students belong to Delhi and have attendance over 90%?", "sql_query": "SELECT * FROM students WHERE city = 'Delhi' AND attendance_percentage > 90;"},
    {"user_input": "Extract students whose first name begins with 'S'.", "sql_query": "SELECT * FROM students WHERE first_name LIKE 'S%';"},
    {"user_input": "Provide details of students with last names ending in 'Roy'.", "sql_query": "SELECT * FROM students WHERE last_name LIKE '%Roy';"},
    {"user_input": "Give me a list of students using an '@gmail.com' email.", "sql_query": "SELECT * FROM students WHERE email LIKE '%@gmail.com';"},
    {"user_input": "Show students whose emails do not contain 'yahoo'.", "sql_query": "SELECT * FROM students WHERE email NOT LIKE '%yahoo%';"},
    {"user_input": "Who are the top 5 students based on their average score?", "sql_query": "SELECT * FROM students ORDER BY avg_score DESC LIMIT 5;"},
    {"user_input": "Find out the lowest 5 ranked students in terms of overall score.", "sql_query": "SELECT * FROM students ORDER BY avg_score ASC LIMIT 5;"},
    {"user_input": "Fetch records of students born in 2008.", "sql_query": "SELECT * FROM students WHERE birth_year = 2008;"},
    {"user_input": "Give details of students aged between 15 and 18 years.", "sql_query": "SELECT * FROM students WHERE age BETWEEN 15 AND 18;"},
    {"user_input": "Identify students who are the only child in their family.", "sql_query": "SELECT * FROM students WHERE num_of_siblings = 0;"},
    {"user_input": "Which students have more than 2 siblings?", "sql_query": "SELECT * FROM students WHERE num_of_siblings > 2;"},
    {"user_input": "Fetch students enrolled in 'Computer Science' specialization.", "sql_query": "SELECT * FROM students WHERE specialization = 'Computer Science';"},
    {"user_input": "Extract student records who have secured at least one academic award.", "sql_query": "SELECT * FROM students WHERE academic_awards >= 1;"},
    {"user_input": "Find students with sports achievements higher than 2.", "sql_query": "SELECT * FROM students WHERE sports_awards > 2;"},
    {"user_input": "Retrieve students who opted for hostel accommodation.", "sql_query": "SELECT * FROM students WHERE hostel_status = 'Yes';"},
    {"user_input": "Show students who are day scholars.", "sql_query": "SELECT * FROM students WHERE hostel_status = 'No';"},
    {"user_input": "Identify students who have changed schools at least once.", "sql_query": "SELECT * FROM students WHERE school_changes >= 1;"},
    {"user_input": "Find students who have never changed schools.", "sql_query": "SELECT * FROM students WHERE school_changes = 0;"},
    {"user_input": "Display students with mobile numbers ending in '1234'.", "sql_query": "SELECT * FROM students WHERE mobile_number LIKE '%1234';"},
    {"user_input": "List students who have parental contact available.", "sql_query": "SELECT * FROM students WHERE parent_contact IS NOT NULL;"},
    {"user_input": "Fetch students whose admission date falls in 2020.", "sql_query": "SELECT * FROM students WHERE admission_year = 2020;"},
    {"user_input": "Show students whose admission date is before 2018.", "sql_query": "SELECT * FROM students WHERE admission_year < 2018;"},
    {"user_input": "Retrieve students who have been enrolled for more than 5 years.", "sql_query": "SELECT * FROM students WHERE years_enrolled > 5;"},
    {"user_input": "Create a student profile table.", "sql_query": "CREATE TABLE student_profile (id INT PRIMARY KEY, name VARCHAR(100), age INT, major VARCHAR(50));"},
  {"user_input": "Make a table for student personal details.", "sql_query": "CREATE TABLE student_details (student_id INT PRIMARY KEY, full_name VARCHAR(100), dob DATE, gender VARCHAR(10));"},
  {"user_input": "Define a database for student registrations.", "sql_query": "CREATE TABLE student_registration (reg_id INT PRIMARY KEY, student_id INT, course VARCHAR(100), semester VARCHAR(20));"},
  {"user_input": "Set up a table for student grades.", "sql_query": "CREATE TABLE student_grades (student_id INT PRIMARY KEY, subject VARCHAR(100), grade CHAR(2));"},
  {"user_input": "Create a database for student fees tracking.", "sql_query": "CREATE TABLE student_fees (student_id INT PRIMARY KEY, total_fee DECIMAL(10,2), paid_amount DECIMAL(10,2));"},
  {"user_input": "Generate a student library records table.", "sql_query": "CREATE TABLE student_library (student_id INT PRIMARY KEY, book_id INT, issue_date DATE, return_date DATE);"},
  {"user_input": "Build a student disciplinary actions database.", "sql_query": "CREATE TABLE student_disciplinary (student_id INT PRIMARY KEY, action TEXT, date_taken DATE);"},
  {"user_input": "Make a table to store student club memberships.", "sql_query": "CREATE TABLE student_clubs (student_id INT PRIMARY KEY, club_name VARCHAR(100), role VARCHAR(50));"},
  {"user_input": "Design a table to track student sports participation.", "sql_query": "CREATE TABLE student_sports (student_id INT PRIMARY KEY, sport VARCHAR(100), competition_level VARCHAR(50));"},
  {"user_input": "Create a student research database.", "sql_query": "CREATE TABLE student_research (student_id INT PRIMARY KEY, research_topic VARCHAR(255), mentor VARCHAR(100));"},
  {"user_input": "Set up a table for student internships.", "sql_query": "CREATE TABLE student_internships (student_id INT PRIMARY KEY, company VARCHAR(100), position VARCHAR(50), duration INT);"},
  {"user_input": "Generate a student attendance tracking system.", "sql_query": "CREATE TABLE student_attendance (student_id INT PRIMARY KEY, subject VARCHAR(100), days_present INT);"},
  {"user_input": "Make a table to record student volunteer activities.", "sql_query": "CREATE TABLE student_volunteer (student_id INT PRIMARY KEY, organization VARCHAR(100), hours INT);"},
  {"user_input": "Define a table for student hostel allocations.", "sql_query": "CREATE TABLE student_hostel (student_id INT PRIMARY KEY, hostel_name VARCHAR(50), room_number INT);"},
  {"user_input": "Create a table to track student exam schedules.", "sql_query": "CREATE TABLE student_exams (student_id INT PRIMARY KEY, subject VARCHAR(100), exam_date DATE);"},
  {"user_input": "Build a table for student career counseling sessions.", "sql_query": "CREATE TABLE student_counseling (student_id INT PRIMARY KEY, counselor VARCHAR(100), session_date DATE);"},
  {"user_input": "Set up a student emergency contact details database.", "sql_query": "CREATE TABLE student_emergency (student_id INT PRIMARY KEY, guardian_name VARCHAR(100), contact_number VARCHAR(15));"},
  {"user_input": "Make a table for student transportation details.", "sql_query": "CREATE TABLE student_transport (student_id INT PRIMARY KEY, bus_route VARCHAR(50), pickup_point VARCHAR(100));"},
  {"user_input": "Generate a table for tracking student scholarships.", "sql_query": "CREATE TABLE student_scholarships (student_id INT PRIMARY KEY, scholarship_type VARCHAR(50), amount DECIMAL(10,2));"},
  {"user_input": "Create a table to store student course materials.", "sql_query": "CREATE TABLE student_materials (student_id INT PRIMARY KEY, subject VARCHAR(100), file_link TEXT);"},
  {"user_input": "Build a database for student complaints and grievances.", "sql_query": "CREATE TABLE student_complaints (student_id INT PRIMARY KEY, complaint TEXT, status VARCHAR(20));"},
  {"user_input": "Define a student event participation tracking table.", "sql_query": "CREATE TABLE student_events (student_id INT PRIMARY KEY, event_name VARCHAR(100), position VARCHAR(50));"},
  {"user_input": "Create a table to track student exchange programs.", "sql_query": "CREATE TABLE student_exchange (student_id INT PRIMARY KEY, university VARCHAR(100), duration INT);"},
  {"user_input": "Set up a table to store student medical records.", "sql_query": "CREATE TABLE student_health (student_id INT PRIMARY KEY, condition TEXT, last_checkup DATE);"},
  {"user_input": "Make a student feedback database.", "sql_query": "CREATE TABLE student_feedback (student_id INT PRIMARY KEY, feedback TEXT, rating INT);"},
  {"user_input": "Generate a table for student online course enrollments.", "sql_query": "CREATE TABLE student_online_courses (student_id INT PRIMARY KEY, platform VARCHAR(100), course_title VARCHAR(255));"},
  {"user_input": "Create a table to manage student loan details.", "sql_query": "CREATE TABLE student_loans (student_id INT PRIMARY KEY, loan_amount DECIMAL(10,2), bank VARCHAR(100));"},
  {"user_input": "Build a database for tracking student achievements.", "sql_query": "CREATE TABLE student_achievements (student_id INT PRIMARY KEY, award_name VARCHAR(100), awarded_by VARCHAR(100));"},
  {"user_input": "Define a table to track student practical exams.", "sql_query": "CREATE TABLE student_practical (student_id INT PRIMARY KEY, subject VARCHAR(100), date DATE);"},
  {"user_input": "Set up a database for student research paper publications.", "sql_query": "CREATE TABLE student_publications (student_id INT PRIMARY KEY, paper_title VARCHAR(255), journal VARCHAR(100));"},
  {"user_input": "Make a table for tracking student attendance warnings.", "sql_query": "CREATE TABLE student_warnings (student_id INT PRIMARY KEY, warning_reason TEXT, issued_date DATE);"},
  {"user_input": "Generate a table to record student conference attendance.", "sql_query": "CREATE TABLE student_conferences (student_id INT PRIMARY KEY, conference_name VARCHAR(255), date DATE);"},
  {"user_input": "Build a table for student alumni records.", "sql_query": "CREATE TABLE student_alumni (student_id INT PRIMARY KEY, graduation_year INT, current_job VARCHAR(100));"},
  {"user_input": "Create a student competition participation database.", "sql_query": "CREATE TABLE student_competitions (student_id INT PRIMARY KEY, competition_name VARCHAR(100), rank VARCHAR(50));"},
  {"user_input": "Define a table to store student mentorship programs.", "sql_query": "CREATE TABLE student_mentorship (student_id INT PRIMARY KEY, mentor_name VARCHAR(100), duration INT);"},
  {"user_input": "Create a table for storing student attendance records with demo values.", "sql_query": "CREATE TABLE student_attendance (student_id INT PRIMARY KEY, subject VARCHAR(100), attendance_percentage FLOAT);"},
  {"user_input": "Make a table for student course enrollments with some sample data.", "sql_query": "CREATE TABLE student_courses (student_id INT PRIMARY KEY, course_name VARCHAR(100), semester INT);"},
  {"user_input": "Set up a student result tracking database with dummy values.", "sql_query": "CREATE TABLE student_results (student_id INT PRIMARY KEY, subject VARCHAR(100), marks INT, grade CHAR(1));"},
  {"user_input": "Build a database for student library records with example entries.", "sql_query": "CREATE TABLE student_library (student_id INT PRIMARY KEY, book_title VARCHAR(255), issue_date DATE, return_date DATE);"},
  {"user_input": "Generate a table for student scholarships with some test cases.", "sql_query": "CREATE TABLE student_scholarships (student_id INT PRIMARY KEY, scholarship_type VARCHAR(50), amount DECIMAL(10,2));"},
  {"user_input": "Design a table for student hostel details with sample data.", "sql_query": "CREATE TABLE student_hostel (student_id INT PRIMARY KEY, hostel_name VARCHAR(100), room_number INT);"},
  {"user_input": "Make a student internship tracking system with demo values.", "sql_query": "CREATE TABLE student_internships (student_id INT PRIMARY KEY, company_name VARCHAR(100), duration_months INT);"},
  {"user_input": "Create a student event participation table with example values.", "sql_query": "CREATE TABLE student_events (student_id INT PRIMARY KEY, event_name VARCHAR(100), role VARCHAR(50));"},
  {"user_input": "Set up a table for student complaints with some placeholder values.", "sql_query": "CREATE TABLE student_complaints (student_id INT PRIMARY KEY, complaint_text TEXT, status VARCHAR(20));"},
  {"user_input": "Generate a student fee management system with test data.", "sql_query": "CREATE TABLE student_fees (student_id INT PRIMARY KEY, total_fee DECIMAL(10,2), paid_amount DECIMAL(10,2));"},
  {"user_input": "Make a student medical history table with some dummy entries.", "sql_query": "CREATE TABLE student_medical (student_id INT PRIMARY KEY, health_condition TEXT, last_checkup DATE);"},
  {"user_input": "Build a table for tracking student online course enrollments.", "sql_query": "CREATE TABLE student_online_courses (student_id INT PRIMARY KEY, platform VARCHAR(100), course_title VARCHAR(255));"},
  {"user_input": "Create a student club membership table with example records.", "sql_query": "CREATE TABLE student_clubs (student_id INT PRIMARY KEY, club_name VARCHAR(100), position VARCHAR(50));"},
  {"user_input": "Generate a table for student mentorship programs.", "sql_query": "CREATE TABLE student_mentorship (student_id INT PRIMARY KEY, mentor_name VARCHAR(100), duration_months INT);"},
  {"user_input": "Create a table for tracking student volunteer activities.", "sql_query": "CREATE TABLE student_volunteer (student_id INT PRIMARY KEY, organization VARCHAR(100), hours_contributed INT);"},
  {"user_input": "Build a student academic achievements table.", "sql_query": "CREATE TABLE student_achievements (student_id INT PRIMARY KEY, award_name VARCHAR(100), awarded_by VARCHAR(100));"},
  {"user_input": "Set up a student exchange program database.", "sql_query": "CREATE TABLE student_exchange (student_id INT PRIMARY KEY, university VARCHAR(100), duration_months INT);"},
  {"user_input": "Make a student practical exam records table.", "sql_query": "CREATE TABLE student_practicals (student_id INT PRIMARY KEY, subject VARCHAR(100), exam_date DATE);"},
  {"user_input": "Create a table for tracking student disciplinary actions.", "sql_query": "CREATE TABLE student_disciplinary (student_id INT PRIMARY KEY, action_description TEXT, date_taken DATE);"},
  {"user_input": "Generate a table for student transportation details.", "sql_query": "CREATE TABLE student_transport (student_id INT PRIMARY KEY, bus_route VARCHAR(50), pickup_point VARCHAR(100));"},
  {"user_input": "Create a table for student internships at Infosys for 3 months.", "sql_query": "CREATE TABLE student_internships (student_id INT PRIMARY KEY, company_name VARCHAR(100), duration_months INT); INSERT INTO student_internships VALUES (1, 'Infosys', 3);"},
  {"user_input": "Add a record for a student enrolled in AI course for semester 5.", "sql_query": "CREATE TABLE student_courses (student_id INT PRIMARY KEY, course_name VARCHAR(100), semester INT); INSERT INTO student_courses VALUES (1, 'Artificial Intelligence', 5);"},
  {"user_input": "Make a table and insert data for a student who won a gold medal in Math Olympiad.", "sql_query": "CREATE TABLE student_achievements (student_id INT PRIMARY KEY, award_name VARCHAR(100), awarded_by VARCHAR(100)); INSERT INTO student_achievements VALUES (1, 'Gold Medal', 'Math Olympiad');"},
  {"user_input": "Create a table and record a student borrowing 'Data Science Handbook' from the library.", "sql_query": "CREATE TABLE student_library (student_id INT PRIMARY KEY, book_title VARCHAR(255), issue_date DATE, return_date DATE); INSERT INTO student_library VALUES (1, 'Data Science Handbook', '2025-02-01', '2025-03-01');"},
  {"user_input": "Generate a table and add an entry for a student staying in Alpha Hostel, Room 102.", "sql_query": "CREATE TABLE student_hostel (student_id INT PRIMARY KEY, hostel_name VARCHAR(100), room_number INT); INSERT INTO student_hostel VALUES (1, 'Alpha Hostel', 102);"},
  {"user_input": "Make a table for students who participated in the college hackathon.", "sql_query": "CREATE TABLE student_events (student_id INT PRIMARY KEY, event_name VARCHAR(100), role VARCHAR(50)); INSERT INTO student_events VALUES (1, 'College Hackathon', 'Participant');"},
  {"user_input": "Set up a student records table and insert a student enrolled in an online AI course on Coursera.", "sql_query": "CREATE TABLE student_online_courses (student_id INT PRIMARY KEY, platform VARCHAR(100), course_title VARCHAR(255)); INSERT INTO student_online_courses VALUES (1, 'Coursera', 'Artificial Intelligence for Everyone');"},
  {"user_input": "Create a student records table with some sample data.", "sql_query": "CREATE TABLE student_records (student_id INT PRIMARY KEY, name VARCHAR(100), age INT, department VARCHAR(100));"},
  {"user_input": "Set up a student attendance tracking table with demo values.", "sql_query": "CREATE TABLE student_attendance (student_id INT PRIMARY KEY, subject VARCHAR(100), attendance_percentage FLOAT);"},
  {"user_input": "Generate a table for student exam results with some dummy entries.", "sql_query": "CREATE TABLE student_results (student_id INT PRIMARY KEY, subject VARCHAR(100), marks INT, grade CHAR(1));"},
  {"user_input": "Make a table for storing student library book borrow records.", "sql_query": "CREATE TABLE student_library (student_id INT PRIMARY KEY, book_title VARCHAR(255), issue_date DATE, return_date DATE);"},
  {"user_input": "Create a student fee payment tracking system with example values.", "sql_query": "CREATE TABLE student_fees (student_id INT PRIMARY KEY, total_fee DECIMAL(10,2), paid_amount DECIMAL(10,2));"},
  {"user_input": "Build a student internship tracking table with demo values.", "sql_query": "CREATE TABLE student_internships (student_id INT PRIMARY KEY, company_name VARCHAR(100), duration_months INT);"},
  {"user_input": "Create a table for student extracurricular activities with some test cases.", "sql_query": "CREATE TABLE student_extracurricular (student_id INT PRIMARY KEY, activity_name VARCHAR(100), role VARCHAR(50));"},
  {"user_input": "Generate a student club membership records table.", "sql_query": "CREATE TABLE student_clubs (student_id INT PRIMARY KEY, club_name VARCHAR(100), position VARCHAR(50));"},
  {"user_input": "Create a student scholarship information table.", "sql_query": "CREATE TABLE student_scholarships (student_id INT PRIMARY KEY, scholarship_name VARCHAR(100), amount DECIMAL(10,2));"},
  {"user_input": "Make a table for storing student hostel accommodation details.", "sql_query": "CREATE TABLE student_hostel (student_id INT PRIMARY KEY, hostel_name VARCHAR(100), room_number INT);"},
  {"user_input": "Set up a table for student mentorship programs with sample data.", "sql_query": "CREATE TABLE student_mentorship (student_id INT PRIMARY KEY, mentor_name VARCHAR(100), duration_months INT);"},
  {"user_input": "Create a student sports achievements table with example records.", "sql_query": "CREATE TABLE student_sports (student_id INT PRIMARY KEY, sport_name VARCHAR(100), achievement VARCHAR(100));"},
  {"user_input": "Generate a table for student transportation records.", "sql_query": "CREATE TABLE student_transport (student_id INT PRIMARY KEY, bus_route VARCHAR(50), pickup_point VARCHAR(100));"},
  {"user_input": "Build a student counseling and guidance records table.", "sql_query": "CREATE TABLE student_counseling (student_id INT PRIMARY KEY, counselor_name VARCHAR(100), session_date DATE);"},
  {"user_input": "Make a table for student disciplinary actions.", "sql_query": "CREATE TABLE student_disciplinary (student_id INT PRIMARY KEY, action_description TEXT, date_taken DATE);"},
  {"user_input": "Create a student project submission records table.", "sql_query": "CREATE TABLE student_projects (student_id INT PRIMARY KEY, project_title VARCHAR(255), submission_date DATE);"},
  {"user_input": "Generate a student online learning courses tracking table.", "sql_query": "CREATE TABLE student_online_courses (student_id INT PRIMARY KEY, platform VARCHAR(100), course_title VARCHAR(255));"},
  {"user_input": "Make a table for student volunteer work.", "sql_query": "CREATE TABLE student_volunteer (student_id INT PRIMARY KEY, organization VARCHAR(100), hours_contributed INT);"},
  {"user_input": "Create a table for tracking student study abroad programs.", "sql_query": "CREATE TABLE student_study_abroad (student_id INT PRIMARY KEY, university VARCHAR(100), duration_months INT);"},
  {"user_input": "Build a student complaint management system.", "sql_query": "CREATE TABLE student_complaints (student_id INT PRIMARY KEY, complaint_text TEXT, status VARCHAR(20));"},
  {"user_input": "Create a table and insert a student enrolled in AI course for semester 5.", "sql_query": "CREATE TABLE student_courses (student_id INT PRIMARY KEY, course_name VARCHAR(100), semester INT); INSERT INTO student_courses VALUES (1, 'Artificial Intelligence', 5);"},
  {"user_input": "Make a table and insert a student who won a national level coding competition.", "sql_query": "CREATE TABLE student_achievements (student_id INT PRIMARY KEY, award_name VARCHAR(100), awarded_by VARCHAR(100)); INSERT INTO student_achievements VALUES (1, 'National Coding Champion', 'CodeFest');"},
  {"user_input": "Set up a table and insert data for a student doing an internship at Google for 6 months.", "sql_query": "CREATE TABLE student_internships (student_id INT PRIMARY KEY, company_name VARCHAR(100), duration_months INT); INSERT INTO student_internships VALUES (1, 'Google', 6);"},
  {"user_input": "Generate a table and insert a record of a student staying in Beta Hostel, Room 205.", "sql_query": "CREATE TABLE student_hostel (student_id INT PRIMARY KEY, hostel_name VARCHAR(100), room_number INT); INSERT INTO student_hostel VALUES (1, 'Beta Hostel', 205);"},
  {"user_input": "Make a table and insert a student borrowing 'Machine Learning with Python' from the library.", "sql_query": "CREATE TABLE student_library (student_id INT PRIMARY KEY, book_title VARCHAR(255), issue_date DATE, return_date DATE); INSERT INTO student_library VALUES (1, 'Machine Learning with Python', '2025-02-01', '2025-03-01');"},
  {"user_input": "Create a table and record a student enrolled in an online ML course on Udemy.", "sql_query": "CREATE TABLE student_online_courses (student_id INT PRIMARY KEY, platform VARCHAR(100), course_title VARCHAR(255)); INSERT INTO student_online_courses VALUES (1, 'Udemy', 'Machine Learning A-Z');"},
  {"user_input": "Make a table and insert a student winning a gold medal in the Mathematics Olympiad.", "sql_query": "CREATE TABLE student_achievements (student_id INT PRIMARY KEY, award_name VARCHAR(100), awarded_by VARCHAR(100)); INSERT INTO student_achievements VALUES (1, 'Gold Medal', 'Mathematics Olympiad');"},
  {"user_input": "Generate a table and insert a student enrolled in Data Science Bootcamp on Coursera.", "sql_query": "CREATE TABLE student_online_courses (student_id INT PRIMARY KEY, platform VARCHAR(100), course_title VARCHAR(255)); INSERT INTO student_online_courses VALUES (1, 'Coursera', 'Data Science Bootcamp');"},
  {"user_input": "Set up a student participation table and add a record for a student who participated in a hackathon.", "sql_query": "CREATE TABLE student_events (student_id INT PRIMARY KEY, event_name VARCHAR(100), role VARCHAR(50)); INSERT INTO student_events VALUES (1, 'Hackathon', 'Finalist');"},
  {"user_input": "Make a table and insert a student receiving a scholarship of 50,000 INR.", "sql_query": "CREATE TABLE student_scholarships (student_id INT PRIMARY KEY, scholarship_name VARCHAR(100), amount DECIMAL(10,2)); INSERT INTO student_scholarships VALUES (1, 'Merit Scholarship', 50000.00);"},
  {"user_input": "Generate a table for student sports achievements.", "sql_query": "CREATE TABLE student_sports (student_id INT PRIMARY KEY, sport_name VARCHAR(100), achievement VARCHAR(100));"},
  {"user_input": "Create a table to track student transportation services.", "sql_query": "CREATE TABLE student_transport (student_id INT PRIMARY KEY, bus_route VARCHAR(50), pickup_point VARCHAR(100));"},
  {"user_input": "Build a student counseling records table.", "sql_query": "CREATE TABLE student_counseling (student_id INT PRIMARY KEY, counselor_name VARCHAR(100), session_date DATE);"},
  {"user_input": "Make a table for student disciplinary actions.", "sql_query": "CREATE TABLE student_disciplinary (student_id INT PRIMARY KEY, action_description TEXT, date_taken DATE);"},
  {"user_input": "Create a table for student project submissions.", "sql_query": "CREATE TABLE student_projects (student_id INT PRIMARY KEY, project_title VARCHAR(255), submission_date DATE);"},
  {"user_input": "Generate a table for student online courses.", "sql_query": "CREATE TABLE student_online_courses (student_id INT PRIMARY KEY, platform VARCHAR(100), course_title VARCHAR(255));"},
  {"user_input": "Make a table for student volunteer work.", "sql_query": "CREATE TABLE student_volunteer (student_id INT PRIMARY KEY, organization VARCHAR(100), hours_contributed INT);"},
  {"user_input": "Create a table for tracking student exchange programs.", "sql_query": "CREATE TABLE student_study_abroad (student_id INT PRIMARY KEY, university VARCHAR(100), duration_months INT);"},
  {"user_input": "Build a table for student complaint management.", "sql_query": "CREATE TABLE student_complaints (student_id INT PRIMARY KEY, complaint_text TEXT, status VARCHAR(20));"},
  {"user_input": "Set up student profile and student guardian details tables.", "sql_query": "CREATE TABLE student_profile (student_id INT PRIMARY KEY, name VARCHAR(100), date_of_birth DATE); CREATE TABLE student_guardian (guardian_id INT PRIMARY KEY, student_id INT, guardian_name VARCHAR(100), relationship VARCHAR(50));"},
  {"user_input": "Create student extracurricular activities and club membership tables.", "sql_query": "CREATE TABLE student_extracurricular (student_id INT PRIMARY KEY, activity_name VARCHAR(100), participation_level VARCHAR(50)); CREATE TABLE student_club_membership (student_id INT PRIMARY KEY, club_name VARCHAR(100), role VARCHAR(50));"},
  {"user_input": "Generate tables for student online course enrollments and certification records.", "sql_query": "CREATE TABLE student_online_courses (student_id INT PRIMARY KEY, course_title VARCHAR(255), platform VARCHAR(100)); CREATE TABLE student_certifications (student_id INT PRIMARY KEY, certificate_name VARCHAR(100), issued_by VARCHAR(100), issue_date DATE);"},
  {"user_input": "Set up student financial aid and scholarship award records.", "sql_query": "CREATE TABLE student_financial_aid (student_id INT PRIMARY KEY, aid_type VARCHAR(100), amount DECIMAL(10,2)); CREATE TABLE student_scholarships (student_id INT PRIMARY KEY, scholarship_name VARCHAR(100), awarded_amount DECIMAL(10,2));"},
  {"user_input": "Make student academic performance and attendance tracking tables.", "sql_query": "CREATE TABLE student_academics (student_id INT PRIMARY KEY, subject VARCHAR(100), grade CHAR(2)); CREATE TABLE student_attendance (student_id INT PRIMARY KEY, total_classes INT, classes_attended INT);"},
  {"user_input": "Create tables for student library book borrowing and fine management.", "sql_query": "CREATE TABLE student_library (student_id INT PRIMARY KEY, book_id INT, borrow_date DATE, return_date DATE); CREATE TABLE student_fines (student_id INT PRIMARY KEY, fine_amount DECIMAL(10,2), due_date DATE);"},
  {"user_input": "Generate student career development and resume submissions records.", "sql_query": "CREATE TABLE student_career (student_id INT PRIMARY KEY, career_counselor VARCHAR(100), session_date DATE); CREATE TABLE student_resume (student_id INT PRIMARY KEY, resume_link VARCHAR(255), last_updated DATE);"},
  {"user_input": "Set up tables for student transportation and route allocation.", "sql_query": "CREATE TABLE student_transport (student_id INT PRIMARY KEY, route_number VARCHAR(10), pickup_point VARCHAR(100)); CREATE TABLE student_vehicle (student_id INT PRIMARY KEY, vehicle_type VARCHAR(50), registration_number VARCHAR(50));"},
  {"user_input": "Create tables for student hackathon participation and coding competitions.", "sql_query": "CREATE TABLE student_hackathons (student_id INT PRIMARY KEY, hackathon_name VARCHAR(100), award VARCHAR(100)); CREATE TABLE student_coding_contests (student_id INT PRIMARY KEY, contest_name VARCHAR(100), rank INT);"},
  {"user_input": "Generate tables for student research projects and journal publications.", "sql_query": "CREATE TABLE student_research (student_id INT PRIMARY KEY, research_topic VARCHAR(255), professor_name VARCHAR(100)); CREATE TABLE student_journals (student_id INT PRIMARY KEY, journal_title VARCHAR(255), publication_date DATE);"},
  {"user_input": "Set up student mentorship and alumni networking tables.", "sql_query": "CREATE TABLE student_mentorship (student_id INT PRIMARY KEY, mentor_name VARCHAR(100), duration_months INT); CREATE TABLE student_alumni_network (alumni_id INT PRIMARY KEY, name VARCHAR(100), graduation_year INT);"},
  {"user_input": "Make tables for student sports team participation and awards.", "sql_query": "CREATE TABLE student_sports (student_id INT PRIMARY KEY, sport_name VARCHAR(100), position VARCHAR(50)); CREATE TABLE student_sports_awards (student_id INT PRIMARY KEY, award_name VARCHAR(100), year INT);"},
  {"user_input": "Create student hostel allocation and meal preference tables.", "sql_query": "CREATE TABLE student_hostel (student_id INT PRIMARY KEY, hostel_name VARCHAR(100), room_number INT); CREATE TABLE student_meal_plan (student_id INT PRIMARY KEY, meal_type VARCHAR(50), dietary_preference VARCHAR(100));"},
  {"user_input": "Generate tables for student disciplinary actions and complaint management.", "sql_query": "CREATE TABLE student_disciplinary (student_id INT PRIMARY KEY, offense_description TEXT, date_reported DATE); CREATE TABLE student_complaints (student_id INT PRIMARY KEY, complaint_details TEXT, resolution_status VARCHAR(50));"},
  {"user_input": "Set up student part-time job records and internship tracking.", "sql_query": "CREATE TABLE student_jobs (student_id INT PRIMARY KEY, company_name VARCHAR(100), job_role VARCHAR(100)); CREATE TABLE student_internships (student_id INT PRIMARY KEY, internship_company VARCHAR(100), duration_months INT);"},
  {"user_input": "Make tables for student cultural event participation and leadership roles.", "sql_query": "CREATE TABLE student_cultural_events (student_id INT PRIMARY KEY, event_name VARCHAR(100), role VARCHAR(50)); CREATE TABLE student_leadership (student_id INT PRIMARY KEY, position_name VARCHAR(100), organization VARCHAR(100));"},
  {"user_input": "Create tables for student workshops and guest lecture participation.", "sql_query": "CREATE TABLE student_workshops (student_id INT PRIMARY KEY, workshop_topic VARCHAR(255), organizer VARCHAR(100)); CREATE TABLE student_guest_lectures (student_id INT PRIMARY KEY, lecturer_name VARCHAR(100), lecture_topic VARCHAR(255));"},
  {"user_input": "Generate student medical records and emergency contacts tables.", "sql_query": "CREATE TABLE student_medical (student_id INT PRIMARY KEY, blood_group VARCHAR(5), allergies TEXT); CREATE TABLE student_emergency_contacts (student_id INT PRIMARY KEY, guardian_name VARCHAR(100), contact_number VARCHAR(15));"},
  {"user_input": "Set up student volunteering projects and NGO partnerships.", "sql_query": "CREATE TABLE student_volunteering (student_id INT PRIMARY KEY, organization VARCHAR(100), hours_contributed INT); CREATE TABLE student_ngo_collaborations (student_id INT PRIMARY KEY, project_title VARCHAR(255), impact_description TEXT);"},
  {"user_input": "Make student group study and project collaboration tables.", "sql_query": "CREATE TABLE student_study_groups (group_id INT PRIMARY KEY, group_name VARCHAR(100), subject VARCHAR(100)); CREATE TABLE student_group_projects (project_id INT PRIMARY KEY, project_title VARCHAR(255), team_size INT);"},
  {"user_input": "Fetch student names along with their enrolled course names.", "sql_query": "SELECT s.name, c.course_name FROM students s INNER JOIN enrollments e ON s.student_id = e.student_id INNER JOIN courses c ON e.course_id = c.course_id;"},
  {"user_input": "Retrieve all students and their respective department names.", "sql_query": "SELECT s.name, d.department_name FROM students s LEFT JOIN departments d ON s.department_id = d.department_id;"},
  {"user_input": "Get students who have enrolled in at least one course.", "sql_query": "SELECT s.name FROM students s INNER JOIN enrollments e ON s.student_id = e.student_id;"},
  {"user_input": "Fetch student details along with their advisor names.", "sql_query": "SELECT s.name, a.advisor_name FROM students s LEFT JOIN advisors a ON s.advisor_id = a.advisor_id;"},
  {"user_input": "List all students and their assigned hostel names.", "sql_query": "SELECT s.name, h.hostel_name FROM students s LEFT JOIN hostels h ON s.hostel_id = h.hostel_id;"},
  {"user_input": "Get all students and their scholarship details if available.", "sql_query": "SELECT s.name, sch.scholarship_name FROM students s LEFT JOIN scholarships sch ON s.scholarship_id = sch.scholarship_id;"},
  {"user_input": "Fetch students and their assigned mentors.", "sql_query": "SELECT s.name, m.mentor_name FROM students s LEFT JOIN mentors m ON s.mentor_id = m.mentor_id;"},
  {"user_input": "List all students and their internship companies.", "sql_query": "SELECT s.name, i.company_name FROM students s LEFT JOIN internships i ON s.student_id = i.student_id;"},
  {"user_input": "Retrieve students and the number of courses they are enrolled in.", "sql_query": "SELECT s.name, COUNT(e.course_id) AS total_courses FROM students s INNER JOIN enrollments e ON s.student_id = e.student_id GROUP BY s.name;"},
  {"user_input": "Fetch students and their library issued book names.", "sql_query": "SELECT s.name, b.book_title FROM students s LEFT JOIN library_issues l ON s.student_id = l.student_id LEFT JOIN books b ON l.book_id = b.book_id;"},
  {"user_input": "Get student names and their attendance percentage.", "sql_query": "SELECT s.name, a.attendance_percentage FROM students s LEFT JOIN attendance a ON s.student_id = a.student_id;"},
  {"user_input": "Fetch all students along with their exam grades.", "sql_query": "SELECT s.name, e.exam_name, g.grade FROM students s INNER JOIN grades g ON s.student_id = g.student_id INNER JOIN exams e ON g.exam_id = e.exam_id;"},
  {"user_input": "Retrieve students and their assigned project titles.", "sql_query": "SELECT s.name, p.project_title FROM students s LEFT JOIN projects p ON s.student_id = p.student_id;"},
  {"user_input": "List students and their parents' contact numbers.", "sql_query": "SELECT s.name, p.parent_contact FROM students s LEFT JOIN parents p ON s.parent_id = p.parent_id;"},
  {"user_input": "Fetch students and their preferred transport mode.", "sql_query": "SELECT s.name, t.transport_mode FROM students s LEFT JOIN transport t ON s.transport_id = t.transport_id;"},
  {"user_input": "Get students and their assigned club activities.", "sql_query": "SELECT s.name, c.club_name FROM students s LEFT JOIN clubs c ON s.club_id = c.club_id;"},
  {"user_input": "Retrieve students and their campus job positions.", "sql_query": "SELECT s.name, j.job_position FROM students s LEFT JOIN campus_jobs j ON s.student_id = j.student_id;"},
  {"user_input": "List students and their medical history records.", "sql_query": "SELECT s.name, m.medical_condition FROM students s LEFT JOIN medical_records m ON s.student_id = m.student_id;"},
  {"user_input": "Fetch students and their graduation year.", "sql_query": "SELECT s.name, g.graduation_year FROM students s LEFT JOIN graduation g ON s.student_id = g.student_id;"},
  {"user_input": "Get students and their attendance in cultural events.", "sql_query": "SELECT s.name, ce.event_name FROM students s LEFT JOIN cultural_events ce ON s.student_id = ce.student_id;"},
  {"user_input": "Fetch students and their assigned sports teams.", "sql_query": "SELECT s.name, sp.team_name FROM students s LEFT JOIN sports_teams sp ON s.team_id = sp.team_id;"},
  {"user_input": "Retrieve students and their assigned research topics.", "sql_query": "SELECT s.name, r.research_topic FROM students s LEFT JOIN research_projects r ON s.student_id = r.student_id;"},
  {"user_input": "List students and their assigned hostel room numbers.", "sql_query": "SELECT s.name, h.room_number FROM students s LEFT JOIN hostels h ON s.hostel_id = h.hostel_id;"},
  {"user_input": "Fetch students and their assigned academic counselors.", "sql_query": "SELECT s.name, c.counselor_name FROM students s LEFT JOIN counselors c ON s.counselor_id = c.counselor_id;"},
  {"user_input": "Get students and their elective course choices.", "sql_query": "SELECT s.name, ec.course_name FROM students s INNER JOIN elective_courses ec ON s.student_id = ec.student_id;"},
  {"user_input": "Fetch students and their fee payment details.", "sql_query": "SELECT s.name, f.fee_status FROM students s LEFT JOIN fees f ON s.student_id = f.student_id;"},
  {"user_input": "Retrieve students and their extracurricular activities.", "sql_query": "SELECT s.name, e.activity_name FROM students s LEFT JOIN extracurricular e ON s.activity_id = e.activity_id;"},
  {"user_input": "List students and their study abroad program details.", "sql_query": "SELECT s.name, sa.program_name FROM students s LEFT JOIN study_abroad sa ON s.student_id = sa.student_id;"},
  {"user_input": "Fetch students and their past academic performance.", "sql_query": "SELECT s.name, p.performance_score FROM students s LEFT JOIN past_performance p ON s.student_id = p.student_id;"},
  {"user_input": "Retrieve students and their alumni connections.", "sql_query": "SELECT s.name, a.alumni_name FROM students s LEFT JOIN alumni a ON s.alumni_id = a.alumni_id;"},
  {"user_input": "List students and their skill development programs.", "sql_query": "SELECT s.name, sd.program_name FROM students s LEFT JOIN skill_development sd ON s.program_id = sd.program_id;"},
  {"user_input": "Fetch students and their internship mentors.", "sql_query": "SELECT s.name, im.mentor_name FROM students s LEFT JOIN internship_mentors im ON s.student_id = im.student_id;"},
  {"user_input": "Get students and their assigned thesis supervisors.", "sql_query": "SELECT s.name, ts.supervisor_name FROM students s LEFT JOIN thesis_supervisors ts ON s.supervisor_id = ts.supervisor_id;"},
  {"user_input": "Fetch students and their degree specialization.", "sql_query": "SELECT s.name, ds.specialization FROM students s LEFT JOIN degree_specialization ds ON s.student_id = ds.student_id;"},
  {"user_input": "Retrieve students and their enrollment year.", "sql_query": "SELECT s.name, e.enrollment_year FROM students s LEFT JOIN enrollment e ON s.student_id = e.student_id;"},
  {"user_input": "List students and their recorded volunteer work.", "sql_query": "SELECT s.name, v.volunteer_event FROM students s LEFT JOIN volunteer_work v ON s.student_id = v.student_id;"},
  {"user_input": "Fetch students and their foreign language certifications.", "sql_query": "SELECT s.name, fl.language_name FROM students s LEFT JOIN foreign_languages fl ON s.student_id = fl.student_id;"},
  {"user_input": "Get all possible mentor-student pairs from the student and mentor tables.", "sql_query": "SELECT s.student_id, s.student_name, m.mentor_id, m.mentor_name FROM students s CROSS JOIN mentors m;"},
  {"user_input": "List all possible student-course combinations.", "sql_query": "SELECT s.student_id, s.student_name, c.course_id, c.course_name FROM students s CROSS JOIN courses c;"},
  {"user_input": "Find all students who share the same elective subject.", "sql_query": "SELECT s1.student_id AS student1, s2.student_id AS student2, e.elective_name FROM students s1 JOIN students s2 ON s1.elective_id = s2.elective_id AND s1.student_id <> s2.student_id JOIN electives e ON s1.elective_id = e.elective_id;"},
  {"user_input": "Generate all possible student-hostel room assignments.", "sql_query": "SELECT s.student_id, s.student_name, h.hostel_id, h.room_number FROM students s CROSS JOIN hostels h;"},
  {"user_input": "Find all students working on the same research project.", "sql_query": "SELECT s1.student_id AS student1, s2.student_id AS student2, r.research_topic FROM students s1 JOIN students s2 ON s1.research_team_id = s2.research_team_id AND s1.student_id <> s2.student_id JOIN research_projects r ON s1.research_team_id = r.research_team_id;"},
  {"user_input": "Find all students with the same faculty mentor.", "sql_query": "SELECT s1.student_id AS student1, s2.student_id AS student2, m.mentor_name FROM students s1 JOIN students s2 ON s1.mentor_id = s2.mentor_id AND s1.student_id <> s2.student_id JOIN mentors m ON s1.mentor_id = m.mentor_id;"},
  {"user_input": "Find all student pairs who are in the same lab section.", "sql_query": "SELECT s1.student_id AS student1, s2.student_id AS student2, l.lab_name FROM students s1 JOIN students s2 ON s1.lab_group_id = s2.lab_group_id AND s1.student_id <> s2.student_id JOIN labs l ON s1.lab_group_id = l.lab_group_id;"},
  {"user_input": "List all student-student pairs for possible study abroad exchange programs.", "sql_query": "SELECT s1.student_id AS student1, s2.student_id AS student2, ep.exchange_program_name FROM students s1 JOIN students s2 ON s1.exchange_program_id = s2.exchange_program_id AND s1.student_id <> s2.student_id JOIN exchange_programs ep ON s1.exchange_program_id = ep.exchange_program_id;"},
  {"user_input": "Find all possible pairs of students in the same dormitory.", "sql_query": "SELECT s1.student_id AS student1, s2.student_id AS student2, h.hostel_name FROM students s1 JOIN students s2 ON s1.hostel_id = s2.hostel_id AND s1.student_id <> s2.student_id JOIN hostels h ON s1.hostel_id = h.hostel_id;"},
  {"user_input": "Get all student pairs enrolled in the same course.", "sql_query": "SELECT s1.student_id AS student1, s2.student_id AS student2, c.course_name FROM enrollments e1 JOIN enrollments e2 ON e1.course_id = e2.course_id AND e1.student_id <> e2.student_id JOIN courses c ON e1.course_id = c.course_id;"},
  {"user_input": "List all student pairs in the same research group.", "sql_query": "SELECT s1.student_id AS student1, s2.student_id AS student2, r.research_topic FROM students s1 JOIN students s2 ON s1.research_team_id = s2.research_team_id AND s1.student_id <> s2.student_id JOIN research_projects r ON s1.research_team_id = r.research_team_id;"},
  {"user_input": "Find students who are in the same study abroad program.", "sql_query": "SELECT s1.student_id AS student1, s2.student_id AS student2, ep.exchange_program_name FROM students s1 JOIN students s2 ON s1.exchange_program_id = s2.exchange_program_id AND s1.student_id <> s2.student_id JOIN exchange_programs ep ON s1.exchange_program_id = ep.exchange_program_id;"},
  {"user_input": "Find all possible student-course assignments.", "sql_query": "SELECT s.student_id, s.student_name, c.course_id, c.course_name FROM students s CROSS JOIN courses c;"},
  {"user_input": "List all student-mentor pairs.", "sql_query": "SELECT s.student_id, s.student_name, m.mentor_id, m.mentor_name FROM students s CROSS JOIN mentors m;"},
  {"user_input": "Find all student pairs who are working on the same project group.", "sql_query": "SELECT s1.student_id AS student1, s2.student_id AS student2, p.project_name FROM students s1 JOIN students s2 ON s1.research_team_id = s2.research_team_id AND s1.student_id <> s2.student_id JOIN projects p ON s1.research_team_id = p.research_team_id;"}
]
