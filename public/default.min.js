let chat;
let voice = 1;

class Chat{
  constructor(port){
    this.port = port;
    this.loc = window.location;
    this.history = undefined;
  }
}

document.addEventListener("DOMContentLoaded",() =>{
  chat = new Chat(window.location.port);
  chat.VisitPage(".chatBox");
  chat.setUp();
});

Chat.prototype.setUp = function(){
  const inputField = document.getElementById("input");
  inputField.addEventListener("keydown", function(e){
    if(e.code === "Enter"){
      chat.messageSynthesis();
    }
  });
  document.getElementById("logo").src = document.getElementById("logo").src;
  document.getElementById("logo").onload = function(){
  	loader.remove(2000);
  };
  chat.dumeQuries();
}
Chat.prototype.voiceOver = function(message){
  if(voice==1){
    if(message==''||message==undefined){
      message = "This feature is not available in this version, please try another options";
    }try{
      const speech = new SpeechSynthesisUtterance();
      speech.lang = "en";
      speech.text = message;
      speech.volume = 1;
      speech.rate = 1;
      speech.pitch = 1;
      speech.gender = "male";
      window.speechSynthesis.speak(speech);
    }catch(e){
      console.log(e);
    }
  }
}
Chat.prototype.messageSynthesis = function(){
  const inputField = document.getElementById("input");
  document.getElementById("input").disabled = true;
  document.querySelector(".circle").innerHTML = "<i class='fa fa-circle-o-notch'></i>";
  let input = inputField.value.trim();
  if(input == "" || input == " " || input == undefined){
    return;
  }
  inputField.value = "";
  chat.addChat(input, 'user');
  try{
    input != "" && chat.output(input);
    setTimeout(()=>{
  	  document.getElementById("input").disabled = false;
      document.querySelector(".circle").innerHTML = "<i class='fa fa-send'></i>";
    },2000);
  }catch(e){
    chat.addChat(2,'error');
  }
}
Chat.prototype.output = function(input){
  let response;
  let text = input.toLowerCase().replace(/[^\w\s\d]/gi, "");
  text = text
    .replace(/[\W_]/g, " ")
    .replace(/ a /g, " ")
    .replace(/write the query /g, "")
    .replace(/write the code/g, "what is")
    .replace(/please /g, "")
    .replace(/ please/g, "")
  .trim();
  let comparedText = chat.compare(userMessage, botReply, text);
  response = comparedText ? comparedText : alternative[Math.floor(Math.random() * alternative.length)];
  chat.addChat(response, 'bot');
}
Chat.prototype.compare = function(triggerArray, replyArray, string){
  let item,items;
  for(let x = 0; x < triggerArray.length; x++){
    for(let y = 0; y < replyArray.length; y++){
      if(triggerArray[x][y] == string){
        items = replyArray[x];
        item = items[Math.floor(Math.random() * items.length)];
      }
    }
  }
  if(item) return item;
  else return chat.containMessageCheck(string);
}
Chat.prototype.containMessageCheck = function(string){
  let item,items;
  for(let x = 0; x < expectedMessage.length; x++){
    if(expectedMessage[x].includes(string)){
      items = expectedReply[x];
      item = items[Math.floor(Math.random() * items.length)];
    }
  }
  return item;
}
Chat.prototype.addChat = function(input, type){
  const mainDiv = document.getElementById("message-section");
  document.querySelector('.dume').style.display = "none";
  if(type=='user'){
    let userDiv = document.createElement("div");
    userDiv.id = "user";
    userDiv.classList.add("message");
    userDiv.innerText = `${input}`;
    mainDiv.appendChild(userDiv);
  }else if(type=='bot'){
    let botDiv = document.createElement("div");
    botDiv.id = "bot";
    botDiv.classList.add("message");
    if(String(input).search("```")!=0){ 
      id = this.codeIdGenerator();
      input=input.replaceAll(" ```", `<div class="code-editor">
      <ul class="tabs codeheader_sql"><li class="tab" title="Language Name">SQL</li>
      <li class="tabi"><span onclick="system.copyCode('#${id}');" title="Copy this code"><i class="fa fa-clone"></i></span>
      <span onclick="system.downloadCode('${id}','main_${id}.sql');" title="Download it in text file"><i class="fa fa-download"></i></span></li></ul>
      <div class="code-wrapper"><pre class="code language-sql" contenteditable="false" spellcheck="false" id="${id}">`);
      input=input.replaceAll("``` ", `</pre></div></div>`);
    }
    botDiv.innerHTML = `<span id="bot-response">${input}</span>`;
    mainDiv.appendChild(botDiv);
    var scroll = document.getElementById("message-section");
    scroll.scrollTop = scroll.scrollHeight;
  }else if(type=='import'){
    let separetorDiv = document.createElement("div");
    separetorDiv.id = "separetor";
    separetorDiv.classList.add("message");
    separetorDiv.innerHTML = `<hr><span id="separetor-response">${input}</span><hr>`;
    mainDiv.appendChild(separetorDiv);
    var scroll = document.getElementById("message-section");
    scroll.scrollTop = scroll.scrollHeight;
  }else if(type=='error'){
    let error = config.error_log[input]==undefined?'An Error occure, please contact us to resolve it.':config.error_log[input].desc;
    let errorDiv = document.createElement("div");
    errorDiv.id = "error";
    errorDiv.classList.add("message");
    errorDiv.innerHTML = `<span id="error-response">${error}</span>`;
    mainDiv.appendChild(errorDiv);
  }else{
    chat.voiceOver("Some unwanted resource allocation command hit server..");
  }
}
Chat.prototype.showDp = function(){
  if(document.querySelector('.userInfo')==null){
    fetch('/userInfo' , {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ userAgent: navigator.userAgent })
    }).then(response => response.text()).then(data => 
      document.body.innerHTML += data
    ).catch(error => console.error('Error: ',error));
  }
  setTimeout(() => {
    chat.VisitPage('.userInfo');
    system.getUserLocation().then(location => 
      document.getElementById('loc').innerText = location
    ).catch(error => console.error(error));
    document.querySelector(".backTochat").addEventListener("click", function(){
      document.querySelector('.userInfo').style.display = "none";
      chat.VisitPage(".chatBox");
    });
  },1000);
}
Chat.prototype.VisitPage = function(page){
  document.querySelector(page).style.display = "block";
}
Chat.prototype.dumeQuries = function(){
  fetch('/dumeSection').then(response => response.text()).then(data => {
    document.querySelector('.dume').innerHTML = data;
  }).catch(error =>{
    console.error('Error: ',error);
  });
}
Chat.prototype.insertQuestion = function(question){
  document.getElementById("input").value = question;
}
Chat.prototype.codeIdGenerator = function(){
  var sample_space = new Array('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');
  let a, b, c, d, e, f, i, h;
  a = sample_space[Math.floor(Math.random()*sample_space.length)];
  b = sample_space[Math.floor(Math.random()*sample_space.length)];
  c = sample_space[Math.floor(Math.random()*sample_space.length)];
  d = sample_space[Math.floor(Math.random()*sample_space.length)];
  e = sample_space[Math.floor(Math.random()*sample_space.length)];
  f = sample_space[Math.floor(Math.random()*sample_space.length)];
  i = sample_space[Math.floor(Math.random()*sample_space.length)];
  h = sample_space[Math.floor(Math.random()*sample_space.length)];
  var id = a+b+c+d+e+f+i+h;
  return id;
}


function getUserLocation(){
  if(navigator.geolocation){
    navigator.geolocation.getCurrentPosition(showPosition, handleError);
  }else{
    console.log("Geolocation is not supported by this browser.Try another one!");
  }
}
function showPosition(position){
  const latitude = position.coords.latitude;
  const longitude = position.coords.longitude;
  return [`'${latitude.toFixed(2)}'`,`'${longitude.toFixed(2)}'`];
}
